@using System.Security.Claims
@using FamTec.Client.Shared.Provider
@inherits LayoutComponentBase
@* @inject AuthenticationStateProvider _authStateProvider *@
@inject ILocalStorageService _localStorageService

<div class="page">
    <div class="inner">
    <AuthorizeView>
        <Authorized>
                @if (!Navigation.Uri.Contains("/select"))
                {
                    <Nav UserName="@UserDisplayName(context.User.Claims.ToList())"
                         UserType="@UserDisplayType(context.User.Claims.ToList())" />
                }
                <main>
                    @if (!Navigation.Uri.Contains("/select"))
                    {
                    <Drawer />
                    }
                    <div class="content">
                        @Body
                    </div>
                </main>
        </Authorized>
        <NotAuthorized>
            <main>
                <div class="wrap">
                        @if (!Navigation.Uri.Contains("/login") && !Navigation.Uri.Contains("/select"))
                        {
                            Navigation.NavigateTo("/login", forceLoad: true);
                        }
                        else
                        {
                            @Body
                        }
                </div>
            </main>
            
        </NotAuthorized>
    </AuthorizeView>
    
    </div>
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private bool isAdminMode;

    private bool _isProcessingLogout = false;  // 로그아웃 처리 중복 방지 플래그

    // protected override async Task OnInitializedAsync()
    // {

    //     await OnUserCheck();
    //     StateHasChanged();
    // }


    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        await OnUserCheck();
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     await OnUserCheck();
    //     StateHasChanged();
    // }


    private string UserDisplayName(List<Claim> claims)
    {
        var Name = claims.Where(_ => _.Type == "Name").Select(_ => _.Value).FirstOrDefault();
        return Name;
    }


    private string UserDisplayType(List<Claim> claims)
    {
        var Name = claims.Where(_ => _.Type == "Role").Select(_ => _.Value).FirstOrDefault();
        return Name;
    }



    private async Task OnUserCheck()
    {
        //현주소
        var currentPath = new Uri(Navigation.Uri).AbsolutePath.ToLower();

        var authState = await (_authStateProvider as CustomAuthProvider).GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = await (_authStateProvider as CustomAuthProvider).GetUserId();

        // if (userId == 0 && !(currentPath== "") && !currentPath.Contains("/login"))
        // {
        //     await JS.InvokeVoidAsync("alert", "로그아웃 되었습니다. 다시 로그인 해주세요.");
        //     Navigation.NavigateTo("/login");
        //     return;
        // }


        var userPlace = user.Claims.FirstOrDefault(c => c.Type == "PlaceIdx")?.Value;

        //관리자 여부
        // var isAdmin = await (_authStateProvider as CustomAuthProvider).IsAdminAsync();

        // Console.WriteLine($"Is user authenticated: {user.Identity.IsAuthenticated}");
        // Console.WriteLine($"User identity name: {user.Identity.Name}");

        // 로그인 페이지는 체크 제외
        if (currentPath.Contains("/login"))
        {
            return;
        }

        // 비로그인 시 리턴
        if (!user.Identity.IsAuthenticated && !(currentPath == "") && !currentPath.Contains("/login"))
        {
            await JS.InvokeVoidAsync("alert","로그아웃 되었습니다. 다시 로그인 해주세요.");
            await (_authStateProvider as CustomAuthProvider).NotifyLogout();
            
            Navigation.NavigateTo("/login");
            StateHasChanged();
            return;
        }



        var isAdmin = user.IsInRole("SystemManager") || user.IsInRole("Master") || user.IsInRole("Manager");
        isAdminMode = await (_authStateProvider as CustomAuthProvider).GetLoginMode();

        //관리자 모드 접근
        if (currentPath.StartsWith("/admin") && !isAdminMode)
        {
            Console.WriteLine( "1");
            await JS.InvokeVoidAsync("alert", "잘못된 접근입니다.1");
            await ClearUserSessionAndLogout();
            return;
        }
        
        //일반모드 접근
        if (!currentPath.StartsWith("/admin") && isAdminMode)
        {
            Console.WriteLine("2");
            await JS.InvokeVoidAsync("alert", "잘못된 접근입니다.2");
            await ClearUserSessionAndLogout();
            return;
        }

        //일반유저 관리자 메뉴 선택화면 접근
        if (currentPath.StartsWith("/select") && !isAdmin)
        {
            Console.WriteLine("3");
            await JS.InvokeVoidAsync("alert", "잘못된 접근입니다.3");
            await ClearUserSessionAndLogout();
            return;
        }

        ///아래는 안씀

        if (Navigation.Uri.Contains("/admin"))
        {
            if (!isAdmin || !isAdminMode)
            {
                await ClearUserSessionAndLogout();
                return;
            }
        }
        else if (Navigation.Uri.Contains("/select"))
        {
            if (!isAdmin || isAdminMode)
            {
                await ClearUserSessionAndLogout();
                return;
            }
        }
        else if (!Navigation.Uri.Contains("/select") && !Navigation.Uri.Contains("/select"))
        {
            if (isAdminMode)
            {
                await ClearUserSessionAndLogout();
                return;
            }
            if (isAdmin && string.IsNullOrEmpty(userPlace))
            {
                Console.WriteLine("관리자 사업장 미선택");
                await ShowAlertAndNavigate("사업장을 선택해주세요", "/select");
                return;
            }
        }
    }

    private async Task ShowAlertAndNavigate(string message, string navigateTo)
    {
        await JS.InvokeVoidAsync("alert", message);
        Navigation.NavigateTo(navigateTo);
    }

    private async Task ClearUserSessionAndLogout()
    {
        await _localStorageService.RemoveItemAsync("sworks-jwt-token");
        await _localStorageService.RemoveItemAsync("loginMode");
        await (_authStateProvider as CustomAuthProvider).NotifyLogout();
        // 인증 상태 변경을 기다린 후에 리디렉션을 처리
        await Task.Delay(100); // 상태 변경이 반영될 시간을 주기 위함

        await JS.InvokeVoidAsync("alert", "접근 권한이 없습니다.");
        Navigation.NavigateTo("/login");
    }
}
