@using System;
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Drawer
@using FamTec.Shared.Server.DTO
@inject AuthenticationStateProvider _authStateProvider;

<div class="drawer-container">
    <ul class="drawer-wrap">
        @foreach (var category in CategoryList)
        {
            <li class="drawer-item pointer">
                @if(category.Url == null)
                {
                    <NavLink class="drawer-link none">
                        <span class="category-title">@category.Name</span>
                    </NavLink>
                }
                else
                {
                    <a class="drawer-link @(ActiveMainLink(category.Url))"
                             href="@(category.SubCategory == null ? category.Url : null)"
                             @onclick="() => ToggleDropdown(category)"
                             >
                        <span class="category-title">@category.Name</span>
                    </a>

                    @if (category.SubCategory != null)
                    {
                        <ul class="drawer-sub-wrap @(category.IsDropDown ? "show": null)">
                            @foreach (var subcategory in category.SubCategory)
                            {
                                @if (subcategory != null)
                                {
                                    <li class="drawer-sub-item">
                                        <a class="drawer-sub-link @(ActiveSubLink(subcategory?.Url))" href="@(category.Url + subcategory.Url)">
                                            <span class="category-title">@subcategory.Name</span>
                                        </a>
                                    </li>
                                }
                            }
                        </ul>
                    }
                }
                
            </li>
        }
    </ul>
</div>


@code {

    // [Parameter] public bool IsUser { get; set; }
    bool LoginMode;
    List<Category>? CategoryList = new List<Category>();

    PlacePermDTO _placePerm = new PlacePermDTO();

    private string currentUrl;

    //사용자 권한
    private bool basic = false;
    private bool machine = false;
    private bool elec = false;
    private bool lift = false;
    private bool fire = false;
    private bool construct = false;
    private bool network = false;
    private bool beauty = false;
    private bool security = false;
    private bool material = false;
    private bool energy = false;
    private bool user = false;
    private bool voc = false;
    private bool isAdmin = false;



    public class Category
    {
        public string? Name { get; set; }
        public string? Url { get; set; }
        public List<Category>? SubCategory { get; set; }
        public bool IsDropDown { get; set; } = false;
        public string? SvgImgUrl { get; set; }
    }

    private string ActiveMainLink(string url)
    {
        return Navigation.Uri.Contains(url) ? "spot" : null;
    }

    private string ActiveSubLink(string url)
    {
        return Navigation.Uri.Contains(url) ? "sub-spot" : null;
    }

    protected override void OnInitialized()
    {
        Navigation.LocationChanged += LocationChanged;
    }
    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.Uri;
        StateHasChanged();
    }
    public void Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }

    protected async override Task OnInitializedAsync()
    {
        await OnLoginMode();
        if (!LoginMode)
        {
            await OnLoadPlacePerm();
            await OnCheckUserPerm();
        }
        isAdmin = await (_authStateProvider as CustomAuthProvider).IsAdminAsync();

        await LoadCategory();
    }



    private async Task OnLoginMode()
    {
        LoginMode = await (_authStateProvider as CustomAuthProvider).GetLoginMode();
    }

    private Task LoadCategory()
    {
        return Task.Run(() =>
        {
            CategoryList = LoginMode ? GetAdminCategories() : GetUserCategories();
        });
    }

    /*
    * 관리자 모드 카테고리
    */
    private List<Category> GetAdminCategories()
    {
        return new List<Category>
        {
            new Category
            {
                Name = "사업장 관리",
                Url = "/admin/place"
            },
            new Category
            {
                Name = "관리자 설정",
                Url = "/admin/manager"
            }
        };
    }

    /*
    * 일반 모드 카테고리
    */
    private List<Category> GetUserCategories()
    {
        List<Category> test = new List<Category>
        {
            new Category
            {
                Name = "기본 정보 관리",
                Url = "/basic",
                SubCategory = new List<Category>
                {
                    new Category { Name = "건물 관리", Url = "/buildings" },
                    new Category { Name = "위치 관리", Url = "/locations" },
                    new Category { Name = "단위 관리", Url = "/units"  },

                }
            },
        };

       /*
        * 설비
        */
        if (
            _placePerm.PermMachine.Value || _placePerm.PermElec.Value ||
            _placePerm.PermLift.Value || _placePerm.PermFire.Value ||
            _placePerm.PermConstruct.Value || _placePerm.PermNetwork.Value ||
            _placePerm.PermBeauty.Value || _placePerm.PermSecurity.Value 
        )
        {
            if (machine || elec || lift || fire || construct || network || beauty || security)
            {
                // 권한이 하나라도 있으면 유지 보수 이력을 추가
                var hasAnyPermission =
                    _placePerm.PermMachine.Value || _placePerm.PermElec.Value ||
                    _placePerm.PermLift.Value || _placePerm.PermFire.Value ||
                    _placePerm.PermConstruct.Value || _placePerm.PermNetwork.Value ||
                    _placePerm.PermBeauty.Value || _placePerm.PermSecurity.Value;
                test.Add(
                new Category
                    {
                        Name = "설비 유지 관리",
                        Url = "/facility",
                        SubCategory = new List<Category>
                                {
                        _placePerm.PermMachine.Value && machine ? new Category { Name = "기계 설비", Url = "/machine" } : null,
                        _placePerm.PermElec.Value && elec? new Category { Name = "전기 설비", Url = "/electronic" } : null,
                        _placePerm.PermLift.Value && lift? new Category { Name = "승강 설비", Url = "/lift" } : null,
                        _placePerm.PermFire.Value && fire? new Category { Name = "소방 설비", Url = "/fire" } : null,
                        _placePerm.PermConstruct.Value && construct? new Category { Name = "건물 설비", Url = "/construct" } : null,
                        _placePerm.PermNetwork.Value && network? new Category { Name = "통신 설비", Url = "/network" } : null,
                        _placePerm.PermBeauty.Value && beauty? new Category { Name = "미화 설비", Url = "/beauty" } : null,
                        _placePerm.PermSecurity.Value && security? new Category { Name = "보안 설비", Url = "/security" } : null,
                        hasAnyPermission ? new Category { Name = "유지 보수 이력", Url = "/history" } : null,
                                }.Where(c => c != null).ToList()

                    }
            );
            }


        }
       /*
        * 자재
        */
        if (_placePerm.PermMaterial.Value && material)
        {
            test.Add(
                new Category
                    {
                        Name = "자재 관리",
                        Url = "/material",
                        SubCategory = new List<Category>
                            {
                        new Category { Name = "품목 관리", Url = "/info" },
                        new Category { Name = "입출고 관리", Url = "/inout" },
                        new Category { Name = "재고 현황", Url = "/inventory"  },
                        new Category { Name = "입출고 내역", Url = "/detail"  },

                            }
                    }
            );
        }
         /*
         * 에너지
        */
        if (_placePerm.PermEnergy.Value && energy)
        {
            test.Add(
                new Category
                    {
                        Name = "에너지 관리",
                    }
            );
        }
        /*
        * 사용자관리
        */
        test.Add(
            new Category
                {
                    Name = "사용자 관리",
                    Url = "/users",
                }
        );
       /*
        * 민원
        */
        if (_placePerm.PermVoc.Value && voc)
        {
            test.Add(
                new Category
                    {
                        Name = "민원 관리",
                        Url = "/voc"
                    }
            );
        }

        /*
        * 설정 (데이터 밀어넣는곳 관리자 전용)
        */
        // if (isAdmin)
        // {
        //     test.Add(
        //         new Category
        //             {
        //                 Name = "설정",
        //                 Url = "/settings"
        //             }
        //     );
        // }

        return test;
    }



    /*
    * 드롭다운 기능
     */

    void ToggleDropdown(Category category)
    {

        category.IsDropDown = !category.IsDropDown;
        StateHasChanged();
    }


    private async Task OnLoadPlacePerm()
    {
        try
        {
            ResponseUnit<PlacePermDTO> resGet = await apiManager.GetUnitAsync<PlacePermDTO>("Place/sign/GetPlacePerm");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }

            _placePerm = resGet.data;
        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }

    }


    /*
    * 사용자 권한 확인
    */
    private async Task OnCheckUserPerm()
    {
        List<string> permName = new List<string>() { "UserPerm_Basic", "UserPerm_Machine", "UserPerm_Elec", "UserPerm_Lift", "UserPerm_Fire", "UserPerm_Construct", "UserPerm_Network", "UserPerm_Beauty", "UserPerm_Security", "UserPerm_Material", "UserPerm_Energy", "UserPerm_User", "UserPerm_Voc" };

        foreach(string perm in permName)
        {
            int permValue = await(_authStateProvider as CustomAuthProvider).GetUserPermission(perm);
            if(permValue > 0)
            {
                switch (perm)
                {
                    case "UserPerm_Basic":
                        basic = true;
                        break;
                    case "UserPerm_Machine":
                        machine = true;
                        break;
                    case "UserPerm_Elec":
                        elec = true;
                        break;
                    case "UserPerm_Lift":
                        lift = true;
                        break;
                    case "UserPerm_Fire":
                        fire = true;
                        break;
                    case "UserPerm_Construct":
                        construct = true;
                        break;
                    case "UserPerm_Network":
                        network = true;
                        break;
                    case "UserPerm_Beauty":
                        beauty = true;
                        break;
                    case "UserPerm_Security":
                        security = true;
                        break;
                    case "UserPerm_Material":
                        material = true;
                        break;
                    case "UserPerm_Energy":
                        energy = true;
                        break;
                    case "UserPerm_User":
                        user = true;
                        break;
                    case "UserPerm_Voc":
                        voc = true;
                        break;
                }
            }
        }

        
    }
}