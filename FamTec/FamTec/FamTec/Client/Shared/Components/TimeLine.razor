@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Alarm
@using FamTec.Shared.Server.DTO


<div class="timeline">
    <div class="header">
        <span class="title">
            최근 알림
        </span>
    </div>
    <div class="content">
        @if (AlarmData.Count == 0)
        {
            @* <EmptyAlarm/> *@
        }
        else if(AlarmData == null)
        {
            <Loading/>
        }
        else
        {
            @foreach (AlarmDTO alarm in AlarmData)
            {
                <Notify 
                    AlarmId ="@alarm.AlarmID.Value"
                    Title="민원 알림"
                    Context="@ConvertContext(alarm.Type.Value, alarm.BuildingName, alarm.VocType)"
                    Url="@ConvertUrl(alarm.VocID.Value)" 
                    OnLoad=OnLoad
                    Date="@alarm.CreateDT"
                    />
            }
        }

    </div>
    <button class="btn" @onclick=OnAllRead>모두 읽음</button>
</div>

@code {
    [Parameter] public List<AlarmDTO> AlarmData { get; set; }
    [Parameter] public EventCallback OnLoad { get; set; }


    //알림 내용 변환
    private string ConvertContext(int type, string name, int? voctype)
    {
        string context = type switch
        {
            0 => $"{name}에 민원이 접수되었습니다.",
            1 => $"민원유형이 {ConvertContext(voctype)}로 변경되었습니다.",
            _ => "None"
        };

        return context;
    }

    private string ConvertContext(int? voctype)
    {
        string type;
        return type = voctype switch
        {
            0 => "미분류",
            1 => "기계",
            2 => "전기",
            3 => "승강",
            4 => "소방",
            5 => "건축",
            6 => "통신",
            7 => "미화",
            8 => "보안",
            _ => "Unknown",
        };
    }


    //알림 내용 변환
    private string ConvertUrl(int vocid)
    {
        string url = $"voc/{vocid}";

        return url;
    }


    public class alert
    {
        public string title { get; set; }
        public string context { get; set; }
        public string url { get; set; }
        public bool isread { get; set; }
    }

    List<alert> mockup = new List<alert>
    {
        new alert
        {
            title = "민원 발생",
            context = "a건물 민원이 발생하였습니다.",
            url = "/voc",
            isread = false,
        },
        new alert
        {
            title = "민원 발생",
            context = "a건물 민원이 발생하였습니다.",
            url = "/voc",
            isread = true,

        },
        new alert
        {
            title = "민원 발생",
            context = "a건물 민원이 발생하였습니다.",
            url = "/voc",
            isread = false,

        },
        new alert
        {
            title = "민원 발생",
            context = "a건물 민원이 발생하였습니다.",
            url = "/voc",
            isread = false,

        },
        new alert
        {
            title = "민원 발생",
            context = "a건물 민원이 발생하였습니다.",
            url = "/voc",
            isread = false,

        },

    };

    private async Task OnAllRead()
    {
        try
        {
            if(AlarmData.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "알림이 존재하지 않습니다.");
                return;
            }
            ResponseUnit<bool> resDel = await apiManager.GetUnitAsync<bool>("Alarm/sign/AllAlarmDelete");
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoad.InvokeAsync();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "알림 모두 읽음 처리 에러");
        }
    }
}
