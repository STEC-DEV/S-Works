@using FamTec.Client.Middleware
@using FamTec.Client.Shared.Provider
@using Microsoft.AspNetCore.SignalR.Client
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authStateProvider;
@inject ILocalStorageService _localStorageService;

<div class="nav-container">
    <div class="nav-logo">
        <NavLink href="@(LoginMode ? "/admin/place" : "/user")" class="nav-wrap-img">
            <img src="img/Stec_Logo.png" />
        </NavLink>
    </div>
    <div class="nav-tab">
        @* 로그인 여부 *@
        <ul class="nav-tab-wrap">
            <!-- 알림 -->

            @* <li class="nav-tab-item">
                <button disabled="@(!IsConnected)">@MessageCount</button>
            </li> *@
            @if (UserType != null)
            {
                <li class="nav-tab-item">
                    <span class="nav-usertype">@UserType</span>
                    <span class="nav-divider">|</span>
                    <span class="nav-username">@UserName</span>
                </li>
                @* <li class="nav-tab-item">
                    
                </li> *@
            }
            else
            {
                
            }
            <li class="nav-tab-item">
                <NavLink class="nav-tab-link" @onclick="OnLogOut">Logout</NavLink>
            </li>
            <li class="nav-tab-item">
                <NavLink class="nav-tab-link">About</NavLink>
            </li>
        </ul>
    </div>
</div>

@code {
    [Parameter] public string? UserName { get; set; }
    [Parameter] public string? UserType  { get; set; }
    private int MessageCount { get; set; }
    // private string? _userType;
    // private string? _userName;
    private bool LoginMode;
    private HubConnection hubConnection;



    protected override async Task OnInitializedAsync()
    {
        // LoginMode = await sessionStorage.GetItemAsync<bool>("LoginMode");
        await OnLoginMode();

        Socket();

        // var session = await sessionStorage.GetItemAsStringAsync("SWORKSSESSION");
        // _userType = await SessionService.GetClaimValue(session, "Role");
        // _userName = await SessionService.GetClaimValue(session, "Name");
    }

    private async Task OnLoginMode()
    {
        LoginMode = await (_authStateProvider as CustomAuthProvider).GetLoginMode();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("설마안타?");
        if (firstRender)
        {
            #region SIGNAL R 메시지 받는곳
            HubObject.hubConnection!.On<string>("ReceiveVoc", (message) =>
            {
                Console.WriteLine(message);
            });
        }
        #endregion

        // 다시재연결 필요하면 이거 쓰면될듯

        HubObject.hubConnection!.Closed += async (exception) =>
        {
            await HubObject.hubConnection.StartAsync(); // 다시재연결
        };
    }


    private async Task OnLogOut()
    {
        Console.WriteLine("로그아웃 동작");
        // await sessionStorage.RemoveItemAsync("SWORKSSESSION");
        // await sessionStorage.RemoveItemAsync("LoginMode");
        // await sessionStorage.RemoveItemAsync("IsLogin");
        // StateHasChanged();

        await _localStorageService.RemoveItemAsync("sworks-jwt-token");

        // 로그인 모드 정보 제거
        await _localStorageService.RemoveItemAsync("loginMode");

        // 인증 상태 제공자에게 인증 상태가 변경되었음을 알림
        (_authStateProvider as CustomAuthProvider).NotifyLogout();

        NavigationManager.NavigateTo("/");
    }


    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await OnLoadData();
        });
    }

    protected async Task OnLoadData()
    {
        // api 요청 날리는것
        // DB SELECT --> 모델로 반환


        StateHasChanged();
    }

    /// <summary>
    /// SignalR 연결여부
    /// </summary>
    // public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    private void Socket()
    {
        int PlaceIdx = 3;
        HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_BEAUTYRoom");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/broadcastHub"))
            .Build();


        hubConnection.On<string>("ReceiveVoc", (message) =>
        {
            Console.WriteLine(message);
        });

    }


}
