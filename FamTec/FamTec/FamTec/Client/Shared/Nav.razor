@using FamTec.Client.Middleware
@using FamTec.Client.Shared.Components
@using FamTec.Client.Shared.Provider
@using Microsoft.AspNetCore.SignalR.Client
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authStateProvider;
@inject ILocalStorageService _localStorageService;
@inherits PermissionComponentBase
<div class="nav-container">
    <div class="nav-logo">
        <NavLink href="@(LoginMode ? "/admin/place" : "/user")" class="nav-wrap-img">
            <img src="img/Stec_Logo.png" />
        </NavLink>
    </div>
    <div class="nav-tab">
        @* 로그인 여부 *@
        <ul class="nav-tab-wrap">
            <!-- 알림 -->
            @if(!LoginMode)
            {
                <li class="nav-tab-item alarm scale" @onclick="OnActiveTimeLine">
                    <svg xmlns="http://www.w3.org/2000/svg" width="15" viewBox="0 0 448 512">
                        <path fill="white"
                              d="M224 0c-17.7 0-32 14.3-32 32l0 19.2C119 66 64 130.6 64 208l0 18.8c0 47-17.3 92.4-48.5 127.6l-7.4 8.3c-8.4 9.4-10.4 22.9-5.3 34.4S19.4 416 32 416l384 0c12.6 0 24-7.4 29.2-18.9s3.1-25-5.3-34.4l-7.4-8.3C401.3 319.2 384 273.9 384 226.8l0-18.8c0-77.4-55-142-128-156.8L256 32c0-17.7-14.3-32-32-32zm45.3 493.3c12-12 18.7-28.3 18.7-45.3l-64 0-64 0c0 17 6.7 33.3 18.7 45.3s28.3 18.7 45.3 18.7s33.3-6.7 45.3-18.7z" />
                    </svg>
                </li>
                @if (_timelineActive)
                {
                    <TimeLine/>
                }
            }
            @if (UserType != null)
            {
                <li class="nav-tab-item scale">
                    <span class="nav-usertype">@UserType</span>
                    <span class="nav-divider">|</span>
                    <span class="nav-username">@UserName</span>
                </li>
            }
            @if (!LoginMode)
            {
                <li class="nav-tab-item scale">
                    <span class="nav-username">
                        @PalceName
                    </span>

                </li>
            }
            @if (ISADMIN)
            {
                <li class="nav-tab-item scale">
                    <NavLink class="nav-tab-link" @onclick="OnSelectPlace">사업장 목록</NavLink>
                </li>
            }
            <li class="nav-tab-item scale">
                <NavLink class="nav-tab-link" @onclick="OnLogOut">Logout</NavLink>
            </li>
            
        </ul>
    </div>
</div>

@code {
    [Parameter] public string? UserName { get; set; }
    [Parameter] public string? UserType  { get; set; }
    private int MessageCount { get; set; }
    // private string? _userType;
    // private string? _userName;
    private bool LoginMode = false;
    private HubConnection hubConnection;

    private bool _timelineActive = false;
    private string PalceName = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoginMode();

        PalceName = await (_authStateProvider as CustomAuthProvider).GetPlaceName();

        Socket();
    }


    private async Task OnLoginMode()
    {
        LoginMode = await (_authStateProvider as CustomAuthProvider).GetLoginMode();
        StateHasChanged();
        Console.WriteLine("로그인 모드:"+LoginMode);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("설마안타?");
        if (firstRender)
        {
            #region SIGNAL R 메시지 받는곳
            HubObject.hubConnection!.On<string>("ReceiveVoc", (message) =>
            {
                Console.WriteLine(message);
            });
        }
        #endregion

        // 다시재연결 필요하면 이거 쓰면될듯

        HubObject.hubConnection!.Closed += async (exception) =>
        {
            await HubObject.hubConnection.StartAsync(); // 다시재연결
        };
    }


    private async Task OnLogOut()
    {
        Console.WriteLine("로그아웃 동작");
        // await sessionStorage.RemoveItemAsync("SWORKSSESSION");
        // await sessionStorage.RemoveItemAsync("LoginMode");
        // await sessionStorage.RemoveItemAsync("IsLogin");
        // StateHasChanged();

        await _localStorageService.RemoveItemAsync("sworks-jwt-token");

        // 로그인 모드 정보 제거
        await _localStorageService.RemoveItemAsync("loginMode");

        // 인증 상태 제공자에게 인증 상태가 변경되었음을 알림
        (_authStateProvider as CustomAuthProvider).NotifyLogout();

        NavigationManager.NavigateTo("/");
    }


    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await OnLoadData();
        });
    }

    protected async Task OnLoadData()
    {
        // api 요청 날리는것
        // DB SELECT --> 모델로 반환


        StateHasChanged();
    }

    /// <summary>
    /// SignalR 연결여부
    /// </summary>
    // public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    private void Socket()
    {
        int PlaceIdx = 3;
        HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_BEAUTYRoom");

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/broadcastHub"))
            .Build();


        hubConnection.On<string>("ReceiveVoc", (message) =>
        {
            /*
             * message : {
             *  group : machine, network, ...
             *  data : {
             * }
             * }
             */
            Console.WriteLine(message);
        });

    }

    private void OnSelectPlace()
    {
        Navigation.NavigateTo("/select");
    }

    private void OnActiveTimeLine()
    {
        _timelineActive = !_timelineActive;
    }
}
