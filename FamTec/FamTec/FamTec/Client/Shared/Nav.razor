@using FamTec.Client.Middleware
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Shared.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Alarm
@using FamTec.Shared.Server.DTO
@using Microsoft.AspNetCore.SignalR.Client
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authStateProvider;
@inject ILocalStorageService _localStorageService;
@inherits PermissionComponentBase
@implements IDisposable

<div class="nav-container">
    <div class="nav-logo">
        <NavLink href="@(LoginMode ? "/admin/place" : "/basic/buildings")" class="nav-wrap-img">
            <img src="img/Stec_Logo.png" />
        </NavLink>
    </div>
    <div class="nav-tab">
        @* 로그인 여부 *@
        <ul class="nav-tab-wrap">
            <!-- 알림 -->
            @if(!LoginMode && !ISADMIN)
            {
                <li class="nav-tab-item alarm " @onclick="OnActiveTimeLine">
                    <div class="center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="white" class="bi bi-bell-fill" viewBox="0 0 16 16">
                            <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zm.995-14.901a1 1 0 1 0-1.99 0A5.002 5.002 0 0 0 3 6c0 1.098-.5 6-2 7h14c-1.5-1-2-5.902-2-7 0-2.42-1.72-4.44-4.005-4.901z" />
                        </svg>
                    </div>

                    @if (AlarmData?.Count != 0)
                    {
                        <div class="count">
                            @alarmCount
                        </div>
                    }
                    @if (_timelineActive)
                    {
                        <TimeLine  AlarmData="@AlarmData" OnLoad="@OnLoadAlarmData" />
                    }
                </li>

            }
            @if (UserType != null)
            {
                <li class="nav-tab-item scale">
                    <span class="nav-usertype">@UserType</span>
                    <span class="nav-divider">|</span>
                    <span class="nav-username">@UserName</span>
                </li>
            }
            @if (!LoginMode)
            {
                <li class="nav-tab-item scale">
                    <span class="nav-username">
                        @PalceName
                    </span>

                </li>
            }
            @if (ISADMIN)
            {
                <li class="nav-tab-item scale">
                    <NavLink class="nav-tab-link" @onclick="OnSelectPlace">사업장 목록</NavLink>
                </li>
            }
            @if (building == 2 || machine == 2 || elect == 2 || lift == 2 || fire == 2 || contstruct == 2 || network == 2 || beauty == 2 || security == 2 || msecurity == 2 || material == 2 || user == 2)
            {
                @if (!LoginMode)
                {
                    <li class="nav-tab-item scale">
                        <NavLink @onclick="MoveSetting">
                            <Setting Color="white" />
                        </NavLink>
                    </li>
                }
            }
            <li class="nav-tab-item scale" @onclick="DownloadHelp">
                <Question Color="white"/>
            </li>
            <li class="nav-tab-item scale">
                <NavLink class="nav-tab-link" @onclick="OnLogOut">Logout</NavLink>
            </li>

        </ul>
    </div>
</div>

@code {
    [Parameter] public string? UserName { get; set; }
    [Parameter] public string? UserType  { get; set; }

    //영역클릭
    private DotNetObjectReference<Nav> dotNetReference;
    private Func<Task> cleanupFunc; // JavaScript cleanup 함수
    private bool disposedValue;

    List<AlarmDTO> AlarmData = new List<AlarmDTO>();

    private int MessageCount { get; set; }
    // private string? _userType;
    // private string? _userName;
    private bool LoginMode = false;
    private HubConnection hubConnection;

    private bool _timelineActive = false;
    private string PalceName = "";


    private string alarmCount = "";
    private string valid = "";

    /// <summary>
    /// 임포트시 권한확인
    /// </summary>
    int building = 0;
    int machine = 0;
    int elect = 0;
    int lift = 0;
    int fire = 0;
    int contstruct = 0;
    int network = 0;
    int beauty = 0;
    int security = 0;
    int msecurity = 0;
    int material = 0;
    int user = 0;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoginMode();

        PalceName = await (_authStateProvider as CustomAuthProvider).GetPlaceName();

        valid = await (_authStateProvider as CustomAuthProvider).GetJwtTokenAsync();
        if (!LoginMode & !string.IsNullOrEmpty(valid))
        {
            await OnLoadAlarmData();
        }
        await OnConnectionSocket();
        await Socket();

        building = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Basic");
        machine = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Machine");
        elect = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Elec");
        lift = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Lift");
        fire = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Fire");
        contstruct = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Construct");
        network = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Network");
        beauty = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Beauty");
        security = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Security");
        material = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Material");
        user = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_User");

        dotNetReference = DotNetObjectReference.Create(this);
        cleanupFunc = await JS.InvokeAsync<Func<Task>>("timelineHandler.initialize", dotNetReference);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Socket(); // 첫 렌더링 후에도 Socket 메서드 호출
        }
    }

    // public void Dispose()
    // {
    //     if (HubObject.hubConnection != null)
    //     {
    //         _ = HubObject.hubConnection.DisposeAsync();
    //     }
    // }

    private async Task OnLoginMode()
    {
        LoginMode = await (_authStateProvider as CustomAuthProvider).GetLoginMode();
        StateHasChanged();
    }




    private async Task OnLogOut()
    {
        NavigationManager.NavigateTo("/login");

        await _localStorageService.RemoveItemAsync("sworks-jwt-token");

        // 로그인 모드 정보 제거
        await _localStorageService.RemoveItemAsync("loginMode");

        // 인증 상태 제공자에게 인증 상태가 변경되었음을 알림
        (_authStateProvider as CustomAuthProvider).NotifyLogout();


    }


    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await OnLoadData();
        });
    }

    protected async Task OnLoadData()
    {
        // api 요청 날리는것
        // DB SELECT --> 모델로 반환


        StateHasChanged();
    }

    /// <summary>
    /// SignalR 연결여부
    /// </summary>
    // 

    // public void Dispose()
    // {
    //     _ = hubConnection.DisposeAsync();
    // }

    private async Task Socket()
    {
        bool IsConnected = HubObject.hubConnection.State == HubConnectionState.Connected;

        // HubConnection이 null이 아닌지 확인
        if (IsConnected)
        {

            // 메시지 수신 처리
            HubObject.hubConnection.On<string>("ReceiveVoc", async (message) =>
            {
                Console.WriteLine(message);
                await OnLoadAlarmData();
                StateHasChanged(); // 상태 변경 알림
            });
            HubObject.hubConnection.On<string>("ReceiveMessage", async (message) =>
            {
                Console.WriteLine(message);
                await OnLoadAlarmData();
                StateHasChanged(); // 상태 변경 알림
            });
        }


    }

    //알람 조회
    private async Task OnLoadAlarmData()
    {
        try
        {
            ResponseList<AlarmDTO> resGet = await apiManager.GetListAsync<AlarmDTO>("Alarm/sign/GetAlarmList");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if(resGet.data == null)
            {
                AlarmData = new List<AlarmDTO>();
                alarmCount = AlarmData.Count.ToString();
            }
            else
            {
                AlarmData = resGet.data;
                if (AlarmData.Count > 99)
                {
                    alarmCount = "99+";
                    return;
                }
                alarmCount = AlarmData.Count.ToString() ;
            }


            StateHasChanged();
        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 에러");
        }
    }

    private void OnSelectPlace()
    {
        Navigation.NavigateTo("/select");
    }

    private void OnActiveTimeLine()
    {
        _timelineActive = !_timelineActive;
    }


    //소켓 연결
    private async Task OnConnectionSocket()
    {
        //알람 권한
        bool isAlarm = await (_authStateProvider as CustomAuthProvider).GetAlarmYN();
        if (!isAlarm)
        {
            // Console.WriteLine("알람 권한없음");
            return;
        }


        //사용자 voc권한
        int vocPerm = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Voc");

        if (vocPerm < 1)
        {
            // Console.WriteLine("voc권한 없음");
            return;
        }

        int placeIdx = await (_authStateProvider as CustomAuthProvider).GetPlaceIdx();


        //소켓 방 명칭
        List<string> RoomName = new List<string>()
        {
            "_MCRoom","_ELECRoom","_LFRoom","_FRRoom","_CSTRoom","_NTRoom","_BEAUTYRoom","_SECURoom","_ETCRoom"
        };


        List<bool> VocPerms = new List<bool>();
        VocPerms = await (_authStateProvider as CustomAuthProvider).GetAllUserPerm();

        // VocPerms가 null인 경우 처리
        if (VocPerms == null || VocPerms.Count == 0)
        {
            // Console.WriteLine("사용자 권한 정보가 없습니다.");
            return; // 더 이상 진행하지 않음
        }

        foreach (var perm in VocPerms.Select((value, idx) => (value, idx)))
        {
            if (perm.value)
            {
                // Console.WriteLine($"가입할 방 {RoomName[perm.idx]}");
                await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{placeIdx}{RoomName[perm.idx]}");

            }
        }

    }



    /// <summary>
    /// 영역클릭
    /// </summary>
    /// [JSInvokable]
    ///
    public void Dispose()
    {
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                // 관리하는 리소스 해제
                cleanupFunc?.Invoke();
                dotNetReference?.Dispose();
            }
            disposedValue = true;
        }
    }

    [JSInvokable]
    public void CloseTimeline()
    {
        _timelineActive = false;
        StateHasChanged();
    }

    public void MoveSetting()
    {

        Navigation.NavigateTo("/setting");
    }



    /*
    * 설명서 다운
    * --
    */
    protected async Task DownloadHelp()
    {
        string url = LoginMode ? "AdminPlace/sign/DownloadAdminGuideForm" : "User/sign/DownloadUserGuideForm";
        var filebytes = await apiManager.GetFileAsync(url);
        var base64 = Convert.ToBase64String(filebytes);
        var fileurl = $"data:application/pdf;base64,{base64}";

        string title = LoginMode ? "S-Works_관리자설명서_1.3.pdf" : "S-Works_사용자설명서_1.3.pdf";
        await JS.InvokeVoidAsync("downloadFile", fileurl, title);
    }

}
