@typeparam T
<div class="inputcol @(Row==true ? "row":"")">
    @if (!String.IsNullOrEmpty(Label))
    {
        <label class="label @(Required.Value ? "required" : "")">
            @Label
        </label>
    }

    <input 
        class="input"
        type="@ValueType"
        step="@(ValueType=="number" ? 0.001:"")"
        placeholder="@Placeholder"
        min="@Min"
        max="@Max"
        maxlength="@MaxLength"
        value="@Value"
        @oninput="OnValueChanged"
        readonly="@ReadOnly"
        @onkeypress="(e)=>OnkeyPress(e)"
        />
    @if(Unit)
    {
        <div class="unit-btn">
            <Button Name="단위" OnClick="OnUnitModal" />
        </div>
    }
</div>
@if (unitModal)
{
    <ModalBackground>
        <ChildComponent>
            <UnitButton OnCancel="OnUnitModal" ReturnValue="OnUnitValue" />
        </ChildComponent>
    </ModalBackground>
}


@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? ValueType { get; set; }
    [Parameter] public T? Value { get; set; }
    [Parameter] public int? Min { get; set; } = 0;
    [Parameter] public int? Max { get; set; }
    [Parameter] public int? MaxLength { get; set; }
    [Parameter] public bool? Row { get; set; }
    [Parameter] public bool? Required { get; set; } = false;
    [Parameter] public bool Unit { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }


    private bool unitModal = false;

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        // Check if the value is null or empty
        var newValue = e.Value?.ToString();

        // Handle empty input for number types
        if (ValueType == "number" && string.IsNullOrEmpty(newValue))
        {
            newValue = "0"; // Set default value for empty input
        }

        if (newValue.Length > MaxLength)
        {
            newValue = newValue.Substring(0, MaxLength.Value);
        }
        // Update Value based on input change
        if (typeof(T) == typeof(float))
        {
            if (float.TryParse(newValue, out float floatValue))
            {
                // 새로 추가된 부분: Max 값 검사
                if (Max.HasValue && floatValue > Max.Value)
                {
                    floatValue = Max.Value;
                }
                // 새로 추가된 부분: Min 값 검사
                if (Min.HasValue && floatValue < Min.Value)
                {
                    floatValue = Min.Value;
                }
                await ValueChanged.InvokeAsync((T)(object)floatValue);
            }
            else
            {
                // If parsing fails, set default value to 0
                await ValueChanged.InvokeAsync((T)(object)0f);
            }
        }
        else if (typeof(T) == typeof(int))
        {
            if (int.TryParse(newValue, out int intValue))
            {
                // 새로 추가된 부분: Max 값 검사
                if (Max.HasValue && intValue > Max.Value)
                {
                    intValue = Max.Value;
                }
                // 새로 추가된 부분: Min 값 검사
                if (Min.HasValue && intValue < Min.Value)
                {
                    intValue = Min.Value;
                }
                await ValueChanged.InvokeAsync((T)(object)intValue);
            }
            else
            {
                // If parsing fails, set default value to 0
                await ValueChanged.InvokeAsync((T)(object)0);
            }
        }
        else if (typeof(T) == typeof(string))
        {
            // For strings, simply pass the value or an empty string
            await ValueChanged.InvokeAsync((T)(object)(newValue ?? string.Empty));
        }
    }


    private async void OnkeyPress(KeyboardEventArgs e)
    {
        await OnKeyPress.InvokeAsync(e);
    }

    private void OnUnitModal()
    {
        unitModal = !unitModal;
    }


    private async void OnUnitValue(string unit)
    {
        if (typeof(T) == typeof(string))
        {
            string newValue;

            // Value가 문자열이고 값이 있을 경우
            if (Value is string currentValue && !string.IsNullOrEmpty(currentValue))
            {
                // 기존 문자열에 단위 추가
                newValue = currentValue + unit;
            }
            else
            {
                // 값이 없으면 단위만 추가
                newValue = unit;
            }
            await ValueChanged.InvokeAsync((T)(object)newValue);
        }
    }

}


