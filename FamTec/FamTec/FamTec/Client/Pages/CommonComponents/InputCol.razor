@typeparam T
<div class="inputcol @(Row==true ? "row":"")">
    @if (!String.IsNullOrEmpty(Label))
    {
        <label class="label">
            @Label
        </label>
    }

    <input 
        class="input"
        type="@ValueType" 
        placeholder="@Placeholder"
        min="@Min"
        value="@Value"
        @oninput="OnValueChanged"
        />
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? ValueType { get; set; }
    [Parameter] public T? Value { get; set; }
    [Parameter] public string? Min { get; set; }
    [Parameter] public bool? Row { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }

    private async Task OnValueChanged(ChangeEventArgs e)
    {

        if (typeof(T) == typeof(int) && int.TryParse(e.Value?.ToString(), out int intValue))
        {
            if (e.Value.ToString() == "-")
            {
                JS.InvokeVoidAsync("alert","음수 입력이 불가능 합니다.");
                return;
            }
            await ValueChanged.InvokeAsync((T)(object)intValue);
        }
        else if (typeof(T) == typeof(string))
        {
            await ValueChanged.InvokeAsync((T)(object)(e.Value?.ToString() ?? string.Empty));
        }

    }
    
}
