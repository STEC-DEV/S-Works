
<div class="inputfield-container">
    <label class="inputfield-label">
        @Label
    </label>
    <input class="inputfield-input @(EditMode ? null : "block")"
        type="@InputType"
        @bind-value="@(Value)"
        @oninput="onInputChange"
        placeholder="@Placeholder"
        @onblur="OnBlur"
        disabled="@(!EditMode)"
        @onkeypress="(e)=>OnkeyPress(e)"
    />
    @* @oninput="onInputChange" *@
    @* @bind-value:event="oninput" *@
    @if (Duplication)
    {
        <button class="btn" type="button" @onclick="OnClick" value="@Value">
            중복확인
        </button>
    }
    
    
</div>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public string InputType{ get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public bool Duplication { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback OnBlur{ get; set; }
    [Parameter] public EventCallback OnClick{get;set;}
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyPress { get; set; }


    private async Task onInputChange(ChangeEventArgs e)
    {
        Value = e?.Value?.ToString();


        await ValueChanged.InvokeAsync(Value);
    }

    private async void OnkeyPress(KeyboardEventArgs e)
    {
        await OnKeyPress.InvokeAsync(e);
    }

}
