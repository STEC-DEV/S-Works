@using FamTec.Shared.Client.Class


<div class="multi-select @(Row ? "row" : "")" @ref="multiSelectElement" @onclick:stopPropagation="true">
    @if (!String.IsNullOrEmpty(Label))
    {
        <label class="label">
            @Label
        </label>
    }
    <div class="select-container" >
        
        <div class="selectbox @(IsActive ? "active" : "")" @onclick="ToggleDropdown">
            <label class="display">
                <span class="display-title @(SelectedNames =="선택" ?"placeholder" : "")">
                    @SelectedNames
                </span>
            </label>
        </div>

        @if (IsActive)
        {
            <ul class="options">
                <li class="option-item" @onclick="() => OnAllCheckItem(!OnAllSync())">
                    <input type="checkbox"
                           @onchange="@((e) => OnAllCheckItem(e.Value.ToString() == " true"))"
                           checked="@OnAllSync()"
                           />
                    <span>전체</span>
                </li>
                @* @onchange="(e)=>OnAllCheckItem(e)" *@
                @foreach (FilterItem item in SelectItems)
                {
                    <li class="option-item" @onclick="() => OnCheckChanged(item, null)">
                        <input type="checkbox" 
                            @onchange="(e) => OnCheckChanged(item, e)" 
                            checked=@(item.IsChecked) />
                        <span>@item.Name</span>
                    </li>
                }
            </ul>
        }
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; }
    [Parameter] public bool Row { get; set; }
    [Parameter] public List<FilterItem> SelectItems { get; set; }
    [Parameter] public EventCallback<List<FilterItem>> OnSelectionChanged { get; set; }
    [Parameter] public List<FilterItem> CheckItems { get; set; }

    private ElementReference multiSelectElement;
    private DotNetObjectReference<MultiSelectDrop> objRef;

    public bool IsActive { get; set; } = false;
    private string defaultText = "선택";
    // 선택된 항목 이름을 출력하는 속성
    public string SelectedNames =>SelectItems.Any(x=>x.IsChecked) ? string.Join(", ", SelectItems.Where(x => x.IsChecked).Select(x => x.Name)) : "선택";
    private string componentId;

    protected override async Task OnParametersSetAsync()
    {
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                objRef = DotNetObjectReference.Create(this);
                componentId = await JS.InvokeAsync<string>("initializeClickOutside", objRef, multiSelectElement);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (objRef != null)
            {
                if (!string.IsNullOrEmpty(componentId))
                {
                    await JS.InvokeVoidAsync("removeClickOutside", componentId);
                }
                objRef.Dispose();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in DisposeAsync: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HandleClickOutside()
    {
        if (IsActive)
        {
            IsActive = false;
            StateHasChanged();
        }
    }

    private bool OnAllSync()
    {
        bool IsCheck = SelectItems.All(i => i.IsChecked);

        return IsCheck;
    }

    private void ToggleDropdown()
    {
        IsActive = !IsActive;
    }

    private async Task OnCheckChanged(FilterItem item, ChangeEventArgs e)
    {
        item.IsChecked = !item.IsChecked; // 체크 상태 토글
        if(e != null)
        {
            item.IsChecked = (bool)e.Value;
        }
        await OnSelectionChanged.InvokeAsync(SelectItems);
    }

    private async void OnAllCheckItem(bool isChecked)
    {
        
        foreach (var item in SelectItems)
        {
            item.IsChecked = isChecked;
        }
        
        
        StateHasChanged();
    }

}
