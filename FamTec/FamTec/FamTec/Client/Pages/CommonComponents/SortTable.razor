@typeparam T
@using System.Reflection
@using System.ComponentModel.DataAnnotations

<table class="table-container">
    <thead class="table-head">
        <tr class="thead-tr">
            @foreach (var property in typeof(T).GetProperties())
            {
                var displayAttribute = property.GetCustomAttribute<DisplayAttribute>();
                if (displayAttribute?.Name == null)
                {

                }
                else
                {
                    <th class="table-th">@displayAttribute?.Name</th>
                }

            }
        </tr>
    </thead>
    <tbody class="table-body">
        @if (DataList == null)
        {
            <p>Loading ....</p>
        }
        else
        {
            @foreach (var item in DataList)
            {
                <tr class="tbody-tr">
                    @foreach (var property in typeof(T).GetProperties())
                    {
                        if (property.Name != "IsSelect" && property.Name != "Id")
                        {
                            <td class="table-td">@property.GetValue(item)</td>
                        }

                        else if (property.Name == "Id")
                        {

                        }
                        else
                        {
                            var idValue = (int)item.GetType().GetProperty("Id").GetValue(item);
                            <td class="table-td">
                                <input type="checkbox"
                                       value="@idValue"
                                       @onchange="e=> InVokeCheckboxSelect(e,idValue, item)" />
                            </td>
                        }

                    }
                </tr>
            }
        }



    </tbody>
</table>

@code {
    [Parameter] public List<T> DataList { get; set; }
    [Parameter] public EventCallback<string> Search { get; set; }
    [Parameter] public EventCallback<(bool, int)> Select { get; set; }
    [Parameter] public EventCallback<(bool, object)> SelectItem { get; set; }
    [Parameter] public string ReturnType { get; set; }

    private async Task InVokeCheckboxSelect(ChangeEventArgs e, int id, T item)
    {
        bool isChecked = (bool)(e.Value ?? false);
        Console.WriteLine("체크 index값 : " + id);


        if (ReturnType == "object")
        {
            await SelectItem.InvokeAsync((isChecked, item));
        }
        else
        {
            await Select.InvokeAsync((isChecked, id));
        }
    }



}