@typeparam T

<div class="selectfield-container">
    <label class="selectfield-label">@Label</label>
    <ul class="selectfield-wrap">
        <li class="selectfield-display" @onclick="ToggleDropdown">
            @if (SelectedOptionName == null)
            {
                <text>선택</text>
            }
            else
            {
                <span>
                    @SelectedOptionName
                </span>
                
            }
        </li>
        <ul class="selectfield-select @DropdownClass @Reverse">
            @foreach (var option in SelectData)
            {
                <li class="selectfield-option " @onclick="() => SelectOption(option)">
                    @option.GetType().GetProperty("Name").GetValue(option)
                </li>
            }
        </ul>
    </ul>
</div>

@code {
    [Parameter] public List<T> SelectData { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public int SelectedValue { get; set; }
    [Parameter] public bool  IsReverse { get; set; }
    [Parameter] public EventCallback<int> SelectedValueChanged { get; set; }

    public string SelectedOptionName { get; set; }
    public bool IsDropdownOpen { get; set; }

    private string DropdownClass => IsDropdownOpen ? "show" : "";
    private string Reverse => IsReverse ? "reverse" : null;
    

    private void ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
    }

    private async void SelectOption(T option)
    {
        IsDropdownOpen = false;
        SelectedValue = (int)option.GetType().GetProperty("Id").GetValue(option);
        SelectedOptionName = option.GetType().GetProperty("Name").GetValue(option).ToString();

        await SelectedValueChanged.InvokeAsync(SelectedValue);
        
    }




}