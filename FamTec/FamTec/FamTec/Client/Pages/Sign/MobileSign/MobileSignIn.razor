
@layout MainLayout2
@page "/m/sign/{PlaceId:int}/{FacType}/{FacId:int}"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Msign
@using FamTec.Shared.Server.DTO
@* @using FamTec.Shared.Server.DTO.Login *@
@inject ILocalStorageService _localStorageService;

<div class="sign">
    <div class="form">
        <span class="title">
            LOGIN
        </span>
        <div class="input-wrap">
            <InputCol Label="아이디"
                      Placeholder="아이디"
                      @bind-Value=@user.UserId 
                      OnKeyPress="HandleKeyDown" />
            <InputCol Label="비밀번호"
                      Placeholder="비밀번호"
                      ValueType="password"
                      @bind-Value=@user.UserPassword 
                      OnKeyPress="HandleKeyDown" />
        </div>
        <Button Name="로그인" Type="0" OnClick="OnSignUp" />
    </div>
</div>

@code {
    [Parameter] public int PlaceId{ get; set; }
    [Parameter] public string FacType { get; set; }
    [Parameter] public int FacId { get; set; }

    QRLoginDTO user = new QRLoginDTO();

    protected override async Task OnInitializedAsync()
    {
        await _localStorageService.RemoveItemAsync("sworks-jwt-token");

        // 로그인 모드 정보 제거
        await _localStorageService.RemoveItemAsync("loginMode");

        // 인증 상태 제공자에게 인증 상태가 변경되었음을 알림
        (_authStateProvider as CustomAuthProvider).NotifyLogout();
    }

    private async Task OnSignUp()
    {
        try
        {
            // 아이디 비밀번호 공백 처리
            if (string.IsNullOrWhiteSpace(user.UserId) || string.IsNullOrWhiteSpace(user.UserPassword))
            {
                await JS.InvokeVoidAsync("alert", "아이디 또는 패스워드가 공백입니다.");
                user = new QRLoginDTO();
                return;
            }
            user.placeid = PlaceId;

            //로그인 요청
            ResponseUnit<string> response = await apiManager.PostAsync<string>("Login/QRLogin", user);
            if (response.code == 404)
            {
                await JS.InvokeVoidAsync("alert", "아이디 또는 패스워드가 일치하지 않습니다.");
                user = new QRLoginDTO();
                return;
            }
            else if (response.code != 200 && response.code != 201)
            {
                await JS.InvokeVoidAsync("alert", response.message);
                user = new QRLoginDTO();
                return;
            }
            string? token = response.data;
            await _localStorageService.SetItemAsync<string>("sworks-jwt-token", token);
            await _localStorageService.SetItemAsync<bool>("loginMode", false);
            (_authStateProvider as CustomAuthProvider).NotifyAuthState();

            Navigation.NavigateTo($"/m/facility/{PlaceId}/{FacType}/{FacId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("[SignUp][OnSignUp] 로그인 요청 에러" + ex);
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") // Enter 키가 눌렸는지 확인
        {
            await OnSignUp(); // 로그인 메서드 호출
        }
    }
}
