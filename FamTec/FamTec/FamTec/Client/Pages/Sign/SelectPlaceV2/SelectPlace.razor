@page "/select"
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Server.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Sign.SelectPlaceV2.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject ILocalStorageService _localStorageService
@inherits PermissionComponentBase

<div class="selectplace-container">
    <div class="wrap">
        <div class="header">
            <span class="title">
                사업장 목록
            </span>
        </div>
        <div class="content">
            @if(placeData.Count == 0)
            {
                <Empty/>
            }else if(placeData == null)
            {
                <Loading/>
            }
            else
            {
                <ul class="ul">
                    @foreach (PlaceTableDTO place in placeData)
                    {
                        <li class="li">
                            @place.Name
                            <input type="radio" name="place" value="@place.Id" @onclick="()=>HandlePlaceSelected(place.Id)" />
                        </li>
                    }
                </ul>
            }
        </div>
        <div class="btns">
            <Button Name="Enter" Type="0" OnClick="EnterPlace"/>
            <Button Name="Exit" Type="1" OnClick="OnExit" />
        </div>
        

    </div>
    
</div>

@code {
    [Parameter] public string token { get; set; }
    // [Parameter] public bool Admin { get; set; }
    List<PlaceTableDTO> placeData;
    int SelectPlaceId;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("여기옴");
        await base.OnInitializedAsync();
        Console.WriteLine("사업장 선택"+ISADMIN);
        if (!ISADMIN)
        {
            await OnExit();
            return;
        }
        await OnLoadPlaceList();

    }

    private async Task OnLoadPlaceList()
    {
        try
        {
            ResponseList<PlaceTableDTO> res = await apiManager.GetListAsync<PlaceTableDTO>($"Login/sign/AdminPlaceList");
            if (res.code != 200)
            {
                await JS.InvokeVoidAsync("alert", res.message);
            }
            if (res.data == null)
            {
                placeData = new List<PlaceTableDTO>();
            }
            placeData = res.data;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "사업장 조회 실패");
        }

    }

    private void HandlePlaceSelected(int selectedId)
    {
        SelectPlaceId = selectedId;
    }

    private async Task EnterPlace()
    {
        if (SelectPlaceId == 0)
        {
            await JS.InvokeVoidAsync("alert", "사업장을 선택해주세요.");
            return;
        }
        ResponseUnit<string> res = await apiManager.GetUnitAsync<string>($"Login/sign/SelectPlace?placeid={SelectPlaceId}");

        if (res.code != 200)
        {
            await JS.InvokeVoidAsync("alert", res.message);
            return;
        }
        await _localStorageService.SetItemAsync<string>("sworks-jwt-token", res.data);
        await (_authStateProvider as CustomAuthProvider).NotifyAuthState();
        await OnConnectionSocket();

        SelectPlaceId = 0;
        Navigation.NavigateTo("/basic/buildings");
    }

 

    private async Task OnExit()
    {
        try
        {
            await _localStorageService.RemoveItemAsync("sworks-jwt-token");
            // 로그인 모드 정보 제거
            await _localStorageService.RemoveItemAsync("loginMode");

            // 인증 상태 제공자에게 인증 상태가 변경되었음을 알림
            (_authStateProvider as CustomAuthProvider).NotifyLogout();

            Navigation.NavigateTo("/");
        }catch(Exception ex)
        {
            
        }
    }

    private async Task OnConnectionSocket()
    {
        //알람 권한
        bool isAlarm = await (_authStateProvider as CustomAuthProvider).GetAlarmYN();
        if (!isAlarm)
        {
            Console.WriteLine("알람 권한없음");
            return;
        }


        //사용자 voc권한
        int vocPerm = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Voc");

        if (vocPerm < 1)
        {
            Console.WriteLine("voc권한 없음");
            return;
        }

        int placeIdx = await (_authStateProvider as CustomAuthProvider).GetPlaceIdx();


        //소켓 방 명칭
        List<string> RoomName = new List<string>()
        {
            "_MachineRoom","_ElectricityRoom","_LiftRoom","_FireRoom","_ConstructRoom","_NetworkRoom","_BeautyRoom","_SecurityRoom","_DefaultRoom"
        };


        List<bool> VocPerms = new List<bool>();
        VocPerms = await (_authStateProvider as CustomAuthProvider).GetAllUserPerm();

        // VocPerms가 null인 경우 처리
        if (VocPerms == null || VocPerms.Count == 0)
        {
            Console.WriteLine("사용자 권한 정보가 없습니다.");
            return; // 더 이상 진행하지 않음
        }

        foreach (var perm in VocPerms.Select((value, idx) => (value, idx)))
        {
            if (perm.value)
            {
                Console.WriteLine($"가입할 방 {RoomName[perm.idx]}");
                await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{placeIdx}{RoomName[perm.idx]}");
                
            }
        }

    }
}
