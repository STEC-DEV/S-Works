@page "/login"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Server.DTO
@using FamTec.Shared.Server.DTO.Login
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using Newtonsoft.Json.Linq
@using System.Security.Claims
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@inject IJSRuntime IJSRuntime
@inject HttpClient HttpClient
@inject ILocalStorageService _localStorageService;
@* @inject AuthenticationStateProvider _authStateProvider; *@


<div class="signup-container">
    <div class="signup-wrap">
        <div class="signup-title">
            <span class="title">
                Login
            </span>
            <Toggle Title="관리자모드"
                    EditMode=true
                    @bind-Value="@LoginMode" />
        </div>
        <div class="signup-form">
            <InputField Label="ID"
                        EditMode=true
                        Placeholder="ID"
                        @bind-Value="@user.UserID" />
            <InputField Label="PW"
                        InputType="Password"
                        EditMode=true
                        Placeholder="Password"
                        @bind-Value="@user.UserPassword" />
        </div>
        <Button Name="Login" OnClick="OnSignUp" Type=0/>
    </div>
</div>

@code {
    LoginDTO user = new LoginDTO();
    bool LoginMode=false;



    protected async override Task OnInitializedAsync()
    {
        var jwtToken = await _localStorageService.GetItemAsync<string>("sworks-jwt-token");
        if (!String.IsNullOrEmpty(jwtToken))
        {
            await OnValidationUser();
        }

    }

    //로그인 유저 로그아웃시키기
    private async Task OnValidationUser()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            await _localStorageService.RemoveItemAsync("sworks-jwt-token");
            await _localStorageService.RemoveItemAsync("loginMode");
            (_authStateProvider as CustomAuthProvider).NotifyLogout();
        }
    }

    private async Task OnSignUp()
    {
        try
        {
            // 아이디 비밀번호 공백 처리
            if (string.IsNullOrWhiteSpace(user.UserID) || string.IsNullOrWhiteSpace(user.UserPassword))
            {
                await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 공백입니다.");
                user = new LoginDTO();
                return;
            }


            //관리자 모드 로그인 선택 유무
            string endpoint = (LoginMode) ? "Login/SettingLogin" : "Login/Login";

            //로그인 요청
            ResponseUnit<string> response = await apiManager.PostLoginAsync<string>(endpoint, user);

            Console.WriteLine(response.data);
            Console.WriteLine("");
            if (response.code == 404)
            {
                await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 일치하지 않습니다.");
                user = new LoginDTO();
                return;
            }
            if(response.code == 500)
            {
                await IJSRuntime.InvokeVoidAsync("alert", "로그인 에러");
                user = new LoginDTO();
                return;
            }
            string? token = response.data;

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            await (_authStateProvider as CustomAuthProvider).NotifyAuthState();
            // 페이지 전환 전 잠시 대기
            // await Task.Delay(100);

            if(response.code == 201)
            {
                // Navigation.NavigateTo($"/select/{token}");
                
                await _localStorageService.SetItemAsync<string>("sworks-jwt-token", token);
                await _localStorageService.SetItemAsync<bool>("loginMode", LoginMode);
                
                Navigation.NavigateTo($"/select");
                await (_authStateProvider as CustomAuthProvider).NotifyAuthState();
                return;
            }

            await _localStorageService.SetItemAsync<string>("sworks-jwt-token", token);
            await _localStorageService.SetItemAsync<bool>("loginMode", LoginMode);
            // await (_authStateProvider as CustomAuthProvider).NotifyAuthState();



            if (response.code == 200)
            {
                if (LoginMode)
                {
                    Navigation.NavigateTo("/admin/place",forceLoad: true);
                }
                else
                {
                    await OnConnectionSocket();

                    Navigation.NavigateTo($"/basic/buildings/", forceLoad: true);
                }

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("[SignUp][OnSignUp] 로그인 요청 에러" + ex);
        }
    }


    private async Task OnConnectionSocket()
    {
        //알람 권한
        bool isAlarm = await (_authStateProvider as CustomAuthProvider).GetAlarmYN();
        if (!isAlarm)
        {
            Console.WriteLine("알람 권한없음");
            return;
        }


        //사용자 voc권한
        int vocPerm = await (_authStateProvider as CustomAuthProvider).GetUserPermission("UserPerm_Voc");

        if(vocPerm < 1)
        {
            Console.WriteLine("voc권한 없음");
            return;
        }

        int placeIdx = await (_authStateProvider as CustomAuthProvider).GetPlaceIdx();


        //소켓 방 명칭
        List<string> RoomName = new List<string>()
        {
            "_MachineRoom","_ElectricityRoom","_LiftRoom","_FireRoom","_ConstructRoom","_NetworkRoom","_BeautyRoom","_SecurityRoom","_DefaultRoom"
        };


        List<bool> VocPerms = new List<bool>();
        VocPerms = await (_authStateProvider as CustomAuthProvider).GetAllUserPerm();

        foreach(var perm in VocPerms.Select((value, idx) => (value, idx)))
        {
            if (perm.value)
            {
                Console.WriteLine($"가입할 방 {RoomName[perm.idx]}");
                await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{placeIdx}{RoomName[perm.idx]}");
            }
        }

    }
}

@* 

  //소켓 연결
        // await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PLACEIDX}_BEAUTYRoom");





        // 권한 JOIN

        // JObject? UserPerm_Voc = new JObject(JObject.Parse(jobj["UserPerms"]!.ToString()));
        // string UserVoc = UserPerm_Voc["UserPerm_Voc"].ToString();

        // if (Int32.Parse(UserVoc) > 0 && jobj["PlacePerms"] is not null)
        // {
        //     JObject? VocPerms = new JObject(JObject.Parse(jobj["VocPerms"]!.ToString()));
        //     JObject? Place = new JObject(JObject.Parse(jobj["PlacePerms"]!.ToString()));

        //     string? PlaceIdx = Place["PlaceIdx"].ToString();

        //     // 기계 Voc 권한
        //     string? UserPerm_Machine = Convert.ToString(VocPerms["VocMachine"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Machine) && Int32.Parse(UserPerm_Machine) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_MachineRoom");

        //     // 전기 Voc 권한
        //     string? UserPerm_Elec = Convert.ToString(VocPerms["VocElec"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Elec) && Int32.Parse(UserPerm_Elec) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_ElectricityRoom");

        //     // 승강 Voc 권한
        //     string? UserPerm_Lift = Convert.ToString(VocPerms["VocLift"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Lift) && Int32.Parse(UserPerm_Lift) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_LiftRoom");

        //     // 소방 Voc 권한
        //     string? UserPerm_Fire = Convert.ToString(VocPerms["VocFire"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Fire) && Int32.Parse(UserPerm_Fire) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_FireRoom");

        //     // 건축 Voc 권한
        //     string? UserPerm_Construct = Convert.ToString(VocPerms["VocConstruct"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Construct) && Int32.Parse(UserPerm_Construct) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_ConstructRoom");

        //     // 통신 Voc 권한
        //     string? UserPerm_Network = Convert.ToString(VocPerms["VocNetwork"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Network) && Int32.Parse(UserPerm_Network) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_NetworkRoom");

        //     // 미화 Voc 권한
        //     string? UserPerm_Beauty = Convert.ToString(VocPerms["VocBeauty"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Beauty) && Int32.Parse(UserPerm_Beauty) > 0){
        //         //string room = $"{PlaceIdx}_BeautyRoom";

        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_BeautyRoom");
        //         Console.WriteLine("미화방 가입");
        //     }

        //     // 보안 Voc 권한
        //     string? UserPerm_Security = Convert.ToString(VocPerms["VocSecurity"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Security) && Int32.Parse(UserPerm_Security) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_SecurityRoom");

        //     // 기타 Voc 권한
        //     string? UserPerm_Default = Convert.ToString(VocPerms["VocDefault"]!);
        //     if (!String.IsNullOrWhiteSpace(UserPerm_Default) && Int32.Parse(UserPerm_Default) > 0)
        //         await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_DefaultRoom");
        // }
*@