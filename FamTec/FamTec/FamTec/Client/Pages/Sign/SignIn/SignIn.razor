@page "/login"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Server.DTO
@using FamTec.Shared.Server.DTO.Login
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.IdentityModel.Tokens
@using Newtonsoft.Json.Linq
@using System.Security.Claims
@using System.Text
@using System.IdentityModel.Tokens.Jwt
@inject IJSRuntime IJSRuntime
@inject HttpClient HttpClient


<div class="signup-container">
    <div class="signup-wrap">
        <div class="signup-title">
            <span class="title">
                Login
            </span>
            <Toggle Title="관리자모드"
                    EditMode=true
                    @bind-Value="@LoginMode" />
        </div>
        <div class="signup-form">
            <InputField Label="ID"
                        EditMode=true
                        Placeholder="ID"
                        @bind-Value="@user.UserID" />
            <InputField Label="PW"
                        InputType="Password"
                        EditMode=true
                        Placeholder="Password"
                        @bind-Value="@user.UserPassword" />
        </div>
        <Button Name="Login" OnClick="OnSignUp" Type=0/>
    </div>
</div>

@code {
    LoginDTO user = new LoginDTO();
    sbyte? LoginMode=0;

    protected async override Task OnInitializedAsync()
    {

    }

    private async Task OnSignUp()
    {
        try
        {
            // 아이디 비밀번호 공백 처리
            if (string.IsNullOrWhiteSpace(user.UserID) || string.IsNullOrWhiteSpace(user.UserPassword))
            {
                await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 공백입니다.");
                user = new LoginDTO();
                return;
            }



            //관리자 모드 로그인 선택 유무
            string endpoint = (LoginMode == 1) ? "Login/SettingLogin" : "Login/Login";

            //로그인 요청
            ResponseUnit<string> response = await apiManager.PostLoginAsync<string>(endpoint, user);

            if (response.code == 404)
            {
                await IJSRuntime.InvokeVoidAsync("alert", "아이디 또는 패스워드가 일치하지 않습니다.");
                user = new LoginDTO();
                return;
            }
            if(response.code == 500)
            {
                await IJSRuntime.InvokeVoidAsync("alert", "로그인 에러");
                user = new LoginDTO();
                return;
            }
            string? token = response.data;
            await sessionStorage.SetItemAsStringAsync("SWORKSSESSION", token);
            await sessionStorage.SetItemAsync("LoginMode", LoginMode);

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            /* SIGNAL R */
            /*
            var authSigningKey = Encoding.UTF8.GetBytes("DhftOS5uphK3vmCJQrexST1RsyjZBjXWRgJMFPU4");
            var tokenHandler = new JwtSecurityTokenHandler();
            tokenHandler.ValidateToken(token, new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(authSigningKey),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    // set clockskew to zero so tokens expire exactly at token expiration time (instead of 5 minutes later)
                    ClockSkew = TimeSpan.Zero
                }, out SecurityToken validatedToken);

            int split = validatedToken.ToString()!.IndexOf('.') + 1;

            string payload = validatedToken.ToString()!.Substring(split, validatedToken.ToString()!.Length - split);
            JObject? jobj = JObject.Parse(payload.ToString());



            // 권한 JOIN

            JObject? UserPerm_Voc = new JObject(JObject.Parse(jobj["UserPerms"]!.ToString()));
            string UserVoc = UserPerm_Voc["UserPerm_Voc"].ToString();

            if (Int32.Parse(UserVoc) > 0 && jobj["PlacePerms"] is not null)
            {
                JObject? VocPerms = new JObject(JObject.Parse(jobj["VocPerms"]!.ToString()));
                JObject? Place = new JObject(JObject.Parse(jobj["PlacePerms"]!.ToString()));

                string? PlaceIdx = Place["PlaceIdx"].ToString();

                // 기계 Voc 권한
                string? UserPerm_Machine = Convert.ToString(VocPerms["VocMachine"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Machine) && Int32.Parse(UserPerm_Machine) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_MachineRoom");

                // 전기 Voc 권한
                string? UserPerm_Elec = Convert.ToString(VocPerms["VocElec"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Elec) && Int32.Parse(UserPerm_Elec) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_ElectricityRoom");

                // 승강 Voc 권한
                string? UserPerm_Lift = Convert.ToString(VocPerms["VocLift"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Lift) && Int32.Parse(UserPerm_Lift) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_LiftRoom");

                // 소방 Voc 권한
                string? UserPerm_Fire = Convert.ToString(VocPerms["VocFire"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Fire) && Int32.Parse(UserPerm_Fire) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_FireRoom");

                // 건축 Voc 권한
                string? UserPerm_Construct = Convert.ToString(VocPerms["VocConstruct"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Construct) && Int32.Parse(UserPerm_Construct) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_ConstructRoom");

                // 통신 Voc 권한
                string? UserPerm_Network = Convert.ToString(VocPerms["VocNetwork"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Network) && Int32.Parse(UserPerm_Network) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_NetworkRoom");

                // 미화 Voc 권한
                string? UserPerm_Beauty = Convert.ToString(VocPerms["VocBeauty"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Beauty) && Int32.Parse(UserPerm_Beauty) > 0){
                    //string room = $"{PlaceIdx}_BeautyRoom";

                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_BeautyRoom");
                    Console.WriteLine("미화방 가입");
                }

                // 보안 Voc 권한
                string? UserPerm_Security = Convert.ToString(VocPerms["VocSecurity"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Security) && Int32.Parse(UserPerm_Security) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_SecurityRoom");

                // 기타 Voc 권한
                string? UserPerm_Default = Convert.ToString(VocPerms["VocDefault"]!);
                if (!String.IsNullOrWhiteSpace(UserPerm_Default) && Int32.Parse(UserPerm_Default) > 0)
                    await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PlaceIdx}_DefaultRoom");
            }
           */
            if(response.code == 201)
            {
                Navigation.NavigateTo("/select");
                return;
            }

            if (response.code == 200)
            {
                // 인증 상태 업데이트
                customStateProvider.NotifyUserAuthentication(token);
                Navigation.NavigateTo("/");
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("[SignUp][OnSignUp] 로그인 요청 에러" + ex);
        }
        Console.WriteLine(user.UserID);
        Console.WriteLine(user.UserPassword);
    }
}

