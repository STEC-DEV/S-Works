@* @page "/select" *@
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Server.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Sign.SelectPlace.Components
@inject ILocalStorageService _localStorageService

<div class="selectplace-container">
    <div class="selectplace-wrap">
        <div class="selectplace-title">
            <div class="selectplace-btns">
                <CircleButton color="0"/>
                <CircleButton color="1" />
                <CircleButton color="2" />
            </div>
            <span class="title">
                사업장 목록
            </span>
            <MacButton Name="Enter" OnClick="@EnterPlace" />
        </div>
        <div class="selectplace-list">
            <PlaceList ListData="@placeData" OnSelected="@HandlePlaceSelected" />
        </div>
        <div class="selectplace-btns">
            
        </div>
    </div>
    
</div>


@code {
    [Parameter] public string token { get; set; }
    // [Parameter] public bool Admin { get; set; }
    List<PlaceTableDTO> placeData;
    int SelectPlaceId;

    protected override async Task OnInitializedAsync()
    {
        await OnLoadPlaceList();
    }

    private async Task OnLoadPlaceList()
    {
        try
        {
            ResponseList<PlaceTableDTO> res = await apiManager.GetListAsync<PlaceTableDTO>($"Login/sign/AdminPlaceList");
            if (res.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "사업장 조회 실패");
            }
            if(res.data == null)
            {
                placeData = new List<PlaceTableDTO>();
            }

            placeData = res.data;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "사업장 조회 실패");
        }

    }

    private void HandlePlaceSelected(int selectedId)
    {
        SelectPlaceId = selectedId;
    }

    private async void EnterPlace()
    {
        if(SelectPlaceId == 0)
        {
            await JS.InvokeVoidAsync("alert", "사업장을 선택해주세요.");
            return;
        }
        ResponseUnit<string> res = await apiManager.GetUnitAsync<string>($"Login/sign/SelectPlace?placeid={SelectPlaceId}");

        if(res.code != 200)
        {
            await JS.InvokeVoidAsync("alert", res.message);
            return;
        }
        await _localStorageService.SetItemAsync<string>("sworks-jwt-token", res.data);
        SelectPlaceId = 0;
        Navigation.NavigateTo("/user");
        
    }
}
