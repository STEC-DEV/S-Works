@layout MainLayout2

@page "/test"

@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@implements IAsyncDisposable
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Stacked Bar Chart</h3>

<canvas id="myChart" style="width: 500px; height: 300px; border: 1px solid #000;" width="500" height="300"></canvas>
<button @onclick="UpdateChartData">Update Chart Data</button>

@code {
    private HubConnection? hubConnection;
  
    private string[] Labels = { "January", "February", "March", "April", "May" };
    //private int[] Dataset1 = { 10, 20, 30, 40, 50 };
    //private int[] Dataset2 = { 5, 15, 25, 35, 45 };
    private Random random = new Random();

    private double[] DataSet1 = new double[5];
    private double[] DataSet2 = new double[5];
    List<Datas> list = new List<Datas>();

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        // HuB 연결
        
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("http://123.2.156.148:5245/VocHub"), transports: Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets | Microsoft.AspNetCore.Http.Connections.HttpTransportType.ServerSentEvents | Microsoft.AspNetCore.Http.Connections.HttpTransportType.LongPolling)
        .Build();

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinRoomAsync", "3_VocCount");

        hubConnection.On<string>("ReceiveVocCount", (message) =>
        {
            Console.WriteLine(message);
            // 여기서 HTTP 호출 - Count 확인하는곳으로 ~

            StateHasChanged();
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            list.Add(new Datas
                {
                    Dates = DateTime.Now.AddDays(-1),
                    Num1 = 10,
                    Num2 = 50
                });
            list.Add(new Datas
                {
                    Dates = DateTime.Now.AddDays(-1),
                    Num1 = 30,
                    Num2 = 20
                });
            list.Add(new Datas
                {
                    Dates = DateTime.Now.AddDays(-1),
                    Num1 = 40,
                    Num2 = 30
                });
            list.Add(new Datas
                {
                    Dates = DateTime.Now.AddDays(-1),
                    Num1 = 100,
                    Num2 = 50
                });
            list.Add(new Datas
                {
                    Dates = DateTime.Now.AddDays(-1),
                    Num1 = 1000,
                    Num2 = 50
                });

            for (int i = 0; i < 5; i++)
            {
                //DataSet1[i] = list[i].Num1 / 100;
                //DataSet2[i] = list[i].Num2 / 100;
                DataSet1[i] = list[i].Num1;
                DataSet2[i] = list[i].Num2;
            }

            await JS.InvokeVoidAsync("createStackedBarChart", "myChart", Labels, DataSet1, DataSet2);
        }
    }

    private async Task UpdateChartData()
    {

        // 새로운 데이터를 생성하거나 기존 데이터를 수정
        //Dataset1 = new int[] { 20, 30, 40, 50, 60 };
        //Dataset2 = new int[] { 15, 25, 35, 45, 55 };

        // 랜덤한 데이터를 생성
        //Dataset1 = GenerateRandomData();
        //Dataset2 = GenerateRandomData();

        for (int i = 0; i < 5; i++)
        {
            //DataSet1[i] += (list[i].Num1 + 100) / 100;
            //DataSet2[i] += (list[i].Num2 + 100) / 100;
            DataSet1[i] += list[i].Num1 + 100;
            DataSet2[i] += list[i].Num2 + 100;
        }

        // JavaScript 함수를 호출하여 차트를 업데이트
        await JS.InvokeVoidAsync("updateChartData", DataSet1, DataSet2);
        StateHasChanged();
    }

    private int[] GenerateRandomData()
    {
        // 5개의 랜덤 값을 생성하여 배열로 반환
        return Enumerable.Range(0, 5).Select(_ => random.Next(0, 100)).ToArray();
    }

    public class Datas
    {
        public DateTime Dates { get; set; }
        public int Num1 { get; set; }
        public int Num2 { get; set; }
        // public int Num3 { get; set; }
        // public int Num4 { get; set; }
        // public int Num5 { get; set; }
    }
}

