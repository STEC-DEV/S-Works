@typeparam T

<table class="table">
    <thead class="thead">
        <tr class="<thead-tr">
            <th class="th">
                <span>
                    사업장 코드
                </span>
            </th>
            <th class="th">
                <span>
                    사업장명
                </span>
            </th>
            <th class="th">
                <span>
                    계약번호
                </span>
            </th>
            <th class="th">
                
            </th>
        </tr>
    </thead>
    <tbody class="tbody">
        @if(ListData == null)
        {
            <p>...Lodaing</p>
        }
        else
        {
             @foreach(var row in ListData)
            {
                var stringId = typeof(T).GetProperty("Id")?.GetValue(row)?.ToString();
                int Id = int.Parse(stringId);
                bool isChecked = SelectItems != null && SelectItems.Any(item => (int)typeof(T).GetProperty("Id")?.GetValue(item) == Id);

                <tr class="tbody-tr">
                    <td class="td">
                        @typeof(T).GetProperty("PlaceCd")?.GetValue(row)?.ToString()
                    </td>
                    <td class="td">
                        @typeof(T).GetProperty("Name")?.GetValue(row)?.ToString()
                    </td>
                    <td class="td">
                        @typeof(T).GetProperty("ContractNum")?.GetValue(row)?.ToString()
                    </td>
                    <td class="td">
                        <input type="checkbox" checked="@isChecked" @onchange=" e => onCheckItem(e,Id, row)" />
                    </td>
                </tr>
            }
        }
    </tbody>
</table>


@code {
    [Parameter] public List<T> ListData { get; set; }
    [Parameter] public List<T>? SelectedItems { get; set; }
    [Parameter] public List<T>? SelectItems { get; set; }
    [Parameter] public EventCallback<int> Count { get; set; }

    protected override async Task OnInitializedAsync()
    {
        OnSelectSync();
    }

    /*
     * 이미 선택된 아이템 동기화
     */
    private void OnSelectSync()
    {
        if (SelectedItems == null || SelectItems == null)
            return;

        SelectItems.Clear();
        foreach (var item in SelectedItems)
        {
            SelectItems.Add(item);
        }
    }


    private void onCheckItem(ChangeEventArgs e,int id, T row)
    {
        bool isChecked = (bool)e.Value;

        if (SelectItems == null)
        {
            SelectItems = new List<T>();
        }

        if (isChecked)
        {
            if (!SelectItems.Contains(row))
            {
                SelectItems.Add(row);
                Count.InvokeAsync(1);
            }
        }
        else
        {
            var itemToRemove = SelectItems.FirstOrDefault(item => (int)typeof(T).GetProperty("Id")?.GetValue(item) == id);
            if (itemToRemove != null)
            {
                SelectItems.Remove(itemToRemove);
                Count.InvokeAsync(-1);
            }
        }
    }

}
