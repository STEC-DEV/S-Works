@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Admin.Manager.ManagerSignup.Modal
@using FamTec.Shared.Client.DTO
﻿
@using FamTec.Shared.Client.DTO.Place
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO

@inject HttpClient HttpClient

<div class="placetable-container">
    <div class="placetable-title">
        <span class="title">
            사업장 목록
        </span>
        <div class="place-table-option">
            <Input Placeholder="search" ValueChanged="OnSearchTextChanged" />
            <Button Name="추가" Width=true OnClick="OnOpenModal" Type=0 />
            <Button Name="삭제" Width=true Type=1 OnClick="OnDelete" />
        </div>
    </div>
    <div class="placetable-table">
        <Table DataList="FilterPlaceList" Select="OnSelected"/>
    </div>
    <div class="placetable-count">
        <span>
            사업장 수 : @SelectCount
        </span>
    </div>
    @if (isOpen == true)
        {
            <ModalBackground >
                <ChildComponent>
                <PlaceModal OnClose="OnCloseModal" SelectedItems="@PlaceList" OnAdd="@OnAdd" />
                </ChildComponent>
            </ModalBackground>
        }
</div>

@code {
    [Parameter] public AddManagerPlaceDTO NewManagerPlace { get; set; }

    List<PlaceTableDTO> PlaceList = new List<PlaceTableDTO>(); //선택한 사업장 목록(보여주는거)
    List<int> SelectItemId = new List<int>();
    int SelectCount = 0;
    bool isOpen = false;

    //검색 변수
    List<PlaceTableDTO> FilterPlaceList = new List<PlaceTableDTO>();
    string searchText = string.Empty;


    protected async override Task OnInitializedAsync()
    {

    }

    /*
    * 선택
    */
    public void OnSelected((bool isCheck, int id) selection)
    {
        if (!selection.isCheck)
        {
            SelectItemId.Remove(selection.id);
        }
        else
        {
            SelectItemId.Add(selection.id);
        }
        foreach(var i in SelectItemId)
        {
            Console.WriteLine(i);
        }
    }

      /*
     * 검색 데이터 필터링
    */
    private void OnSearchTextChanged(string text)
    {
        searchText = text;
        FilterPlaceList = string.IsNullOrEmpty(searchText)
            ? new List<PlaceTableDTO>(PlaceList)
            : PlaceList.Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                                   p.PlaceCd.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                                   p.ContractNum.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                        .ToList();
    }

    /*
    * add 이벤트
    */
    private async void OnAdd(List<PlaceTableDTO> selectList)
    {

        PlaceList = selectList.ToList();

        SelectCount = PlaceList.Count;
        FilterPlaceList = new List<PlaceTableDTO>(PlaceList);
        isOpen = false;
    }

    /*
    * DELETE List Item
    */
    private void OnDelete()
    {
        if (SelectItemId != null && SelectItemId.Count > 0)
        {
            foreach (var id in SelectItemId.ToList()) // ToList()를 사용하여 반복 중 컬렉션 수정을 피함
            {
                var removeItem = PlaceList.FirstOrDefault(item => item.Id == id);
                if (removeItem != null)
                {
                    PlaceList.Remove(removeItem);
                }
            }
            SelectItemId.Clear(); // 선택된 아이템 ID 리스트 초기화
            SelectCount = PlaceList.Count; // 선택된 아이템 수 업데이트
            FilterPlaceList = new List<PlaceTableDTO>(PlaceList); // 새로운 List 인스턴스를 생성하여 할당
            StateHasChanged();
        }
    }


    /*
    * 사업장 추가 모달
    */
    private void OnOpenModal()
    {
        isOpen = true;
    }

    private void OnCloseModal()
    {
        isOpen = false;
        StateHasChanged();
    }

}
