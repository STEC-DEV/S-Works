@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Admin.Manager.ManagerMain.Components
@using FamTec.Shared.Client.DTO
﻿@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO

@inject HttpClient HttpClient

<div class="modaldepart-container yappear">
    <div class="modaldepart-wrap">
        <div class="modaldepart-title">
            <span>
                그룹 편집
            </span>
            <div class="modaldepart-btns">
                <Button 
                    Name="@(AddMode ? "취소" : "추가")" 
                    OnClick="OnAdd" 
                    Type=0 
                    Width=true
                    />
                <Button Name="삭제" OnClick="DeleteDepartment" Type=1 Width=true />
            </div>
        </div>
        <div class="modaldepart-body">
            <div class="modaldepart-list">
                <DepartmentList 
                    DataList="departmentList" 
                    Edit=true 
                    OnListSync="@OnListSync"
                    OnLoadDepartments="@OnLoadDepartments" 
                    AddMode=@AddMode
                    />
            </div>
            
        </div>
        <Button Name="확인" OnClick="@ModalClose" Type=0 />
    </div>

</div>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback OnListSync{ get; set; }
    public bool AddMode { get; set; } = false;


    // HttpClient httpClient = new HttpClient();
    List<DepartmentDTO> departmentList;
    AddDepartmentDTO newDepartment = new AddDepartmentDTO();
    List<int> deleteDepartment = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        await OnLoadDepartments();

    }

    /*
    * (GET) 부서 전체 조회
    */
    private async Task OnLoadDepartments()
    {
        try
        {
            ResponseList<DepartmentDTO> resDepartment = await apiManager.GetListAsync<DepartmentDTO>("Department/sign/GetDepartmentList");
            if (resDepartment.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDepartment.message);
                return;
            }

            departmentList = resDepartment.data;

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }

    }




    /*
    * (DELETE) 부서 삭제
    */
    private async Task DeleteDepartment()
    {
        try
        {
            // [4]
            //HttpResponseMessage resDelete = await HttpClient.PutAsJsonAsync("http://127.0.0.1:5245/api/Admin/deletedepartment", deleteDepartment);
            var resDelete = await HttpClient.PutAsJsonAsync("http://125.131.105.172:5245/api/Department/DeleteDepartmentList", deleteDepartment);
            if (resDelete.IsSuccessStatusCode)
            {
                ResponseUnit<bool> res = await resDelete.Content.ReadFromJsonAsync<ResponseUnit<bool>>();
                bool adminId = res.data;
                /*
                * res.code 별 예외 처리예정ㅊ
                 */

                await OnLoadDepartments();
                await OnListSync.InvokeAsync();
                deleteDepartment.Clear();
                newDepartment = new AddDepartmentDTO();
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine($"삭제 실패");

        }
    }


    /*
    * 모달 닫기
    */
    private Task ModalClose()
    {
        return OnClose.InvokeAsync(false);
    }

    /*
    * 부서 선택
    */
    public void OnSelected((bool isCheck, int id) selection)
    {

        if (!selection.isCheck)
        {
            deleteDepartment.Remove(selection.id);
        }
        else
        {
            deleteDepartment.Add(selection.id);
            
        }
    }

    /*
     * 부서추가 활성화 비활성화
     */
    private void OnAdd()
    {
        AddMode = !AddMode;
    }

}
