@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Server.DTO
@using FamTec.Shared.Server.DTO.Admin.Place

@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<div class="managerlist-container">
    <div class="managerlist-wrap">
        <div class="managerlist-header">
            <span class="title">
                매니저 목록
            </span>
            @if (UserType)
            {
                <div class="managerlist-btns">
                    <Button Name="등록" Type=0 OnClick="@OnSignUp" />
                    @if(deleteManagerList.Count > 0)
                    {
                        <Button Name="삭제" Type=1 OnClick="@OnDeleteManager" />
                    }

                </div>
            }
        </div>
        <div class="managerlist-list">
            <Table 
                ListData="@managerList" 
                OnCheck="OnSelected" 
                Detail="true" 
                CheckItems="@deleteManagerList"
                />
        </div>
    </div>
</div>

@code {
    [Parameter] public bool UserType { get; set; }

    List<ManagerDTO>? managerList;
    List<int>? deleteManagerList = new List<int>();

    private bool _editMode = false;

    protected async override Task OnInitializedAsync()
    {
        await OnLoadManagers();
    }

    private async Task OnLoadManagers()
    {
        try
        {
            // ResponseList<ManagerDTO>? resManager = await HttpClient.GetFromJsonAsync<ResponseList<ManagerDTO>>("http://123.2.156.148:5245/api/AdminPlace/sign/GetAllManagerList");
            ResponseList<ManagerDTO>? resManager = await apiManager.GetListAsync<ManagerDTO>("AdminPlace/sign/GetAllManagerList");
            if(resManager.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "매니저 조회 실패");
                return;
            }
            if(resManager.data == null)
            {
                managerList = new List<ManagerDTO>();
            }
            else
            {
                managerList = resManager.data;
            }

            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin][Department] 매니저 조회 에러\n{ex.Message}");
        }

    }



    private async Task ReloadManagers()
    {
        await OnLoadManagers();
    }


    /*
    * 
    */
    public void OnSelected((bool isCheck, ManagerDTO item) selection)
    {        
        if (selection.isCheck)
        {
            deleteManagerList.Add(selection.item.Id);
        }
        else
        {
            deleteManagerList.Remove(selection.item.Id);
        }

    }


    private async Task OnDeleteManager()
    {
        try
        {
            if(deleteManagerList.Count == 0)
            {
                Console.WriteLine("선택 매니저 없음");
            }
            else
            {
                ResponseUnit<bool> resDeleteManager = await apiManager.PutAsync<bool>("AdminUser/sign/DeleteManager", deleteManagerList);
                if (resDeleteManager.code != 200)
                {
                    await JS.InvokeVoidAsync("alert", resDeleteManager.message);
                    return;
                }
                deleteManagerList.Clear();
                await OnLoadManagers();
            }

        }
        catch(Exception ex)
        {
            Console.WriteLine($"[Admin][Department] 클라이언트  매니저 삭제 에러");
        }
    }


    private void OnEdit()
    {
        _editMode = !_editMode;
    }


    private void OnSignUp()
    {
        Navigation.NavigateTo("/admin/manager/signup");
    }

}
