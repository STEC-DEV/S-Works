@using FamTec.Client.Pages.Admin.Manager.ManagerMain.Modal
@using FamTec.Shared.Client.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Server.DTO

<ul class="depart-list">
    @if(DataList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (Edit)
        {
            <li class="depart-add-form">
                <div class="add-form">
                    <Input Type="text" Placeholder="그룹명" @bind-Value=@newDepartment.Name />
                    <Button Name="추가" OnClick="@AddDepartment" />
                </div>
                @* <Toggle Title="사업장 관리부서"
                        @bind-Value=@newDepartment.ManagerYN
                        IsChecked="@newDepartment.ManagerYN"
                        EditMode=true /> *@
            </li>
        }

        @foreach (var item in DataList)
        {

            <li class="depart-item @(Edit ? "" : "hover" ) @(selectedDepartment==item.Name ?"active":"")" @onclick="@(Edit ?  null : (()=>OnSelect(item.Name)))">
                <span class="item-title" >
                    @item.Name
                </span>
                @* @onclick=@(() => OnModal(item.Id)) *@
                @if (Edit)
                {
                    <div class="btns">
                        <EditButton OnClick="@(()=>OnModal(item.Id))" />
                        <XButton OnClick="@(()=>OnDel(item.Id))"/>
                    </div>
                }
            </li>
            @if ( Edit && openModalId == item.Id)
            {
                <ModalBackground>
                    <ChildComponent>
                        <EditDepartment 
                            DepartmentId="openModalId" 
                            OnCancel="CloseModal" 
                            OnLoadManager="OnLoadManager"
                            OnLoadDepartment="OnLoadDepartments"
                            Data="item" />
                    </ChildComponent>
                </ModalBackground>
            }
        }

        
    }
    
</ul>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnCancel="OnDelClose" OnConfirm="OnDelDepartments" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    [Parameter] public List<DepartmentDTO> DataList { get; set; }
    [Parameter] public bool Edit { get; set; }
    // [Parameter] public EventCallback<(bool ,int)> Select { get; set; }
    [Parameter] public EventCallback OnLoadDepartments { get; set; }
    [Parameter] public EventCallback OnLoadManager{ get; set; }
    [Parameter] public EventCallback OnListSync { get; set; }
    [Parameter] public bool AddMode {get; set;}
    [Parameter] public List<int> CheckItems { get; set; }
    [Parameter] public EventCallback<string> OnSelectedDepartment { get; set; }

    private Dictionary<int, bool> editStates = new Dictionary<int, bool>();
    AddDepartmentDTO newDepartment = new AddDepartmentDTO();

    public bool InputEdit { get; set; } = false;
    private int? openModalId = null;
    private string selectedDepartment = "";

    List<int> DelList = new List<int>();
    bool isDel = false;

    // private async Task InVokeCheckboxSelect(ChangeEventArgs e, int id)
    // {
    //     bool isChecked = (bool)(e.Value ?? false);
    //     // await Select.InvokeAsync((isChecked, id));
    // }


    /*
    * (POST)부서 추가
    */
    private async Task AddDepartment()
    {
        try
        {
            Console.WriteLine(newDepartment.Name == null);
            if (string.IsNullOrEmpty(newDepartment.Name))
            {
                await JS.InvokeVoidAsync("alert", "그룹명을 입력해 주세요.");
                Console.WriteLine("입력된 값이 없습니다.");
                return;
            }
            ResponseUnit<AddDepartmentDTO> resDepartment = await apiManager.PostAsync<AddDepartmentDTO>("Department/sign/AddDepartment", newDepartment);
            if (resDepartment.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "그룹 추가 실패.");
                newDepartment = new AddDepartmentDTO();
                return;
            }

            await OnLoadDepartments.InvokeAsync();
            await OnListSync.InvokeAsync();
            StateHasChanged();
            newDepartment = new AddDepartmentDTO();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin][ModalDepartment] 그룹 추가 에러 : {ex.Message}");
        }
    }

    //부서삭제
    private async Task OnDelDepartments()
    {
        try
        {
            if (DelList.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제할 부서를 선택해주세요.");
                return;
            }
            ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>("Department/sign/DeleteDepartment", DelList);
            if (resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoadDepartments.InvokeAsync();
            await OnListSync.InvokeAsync();
            DelList.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin][Department] 클라이언트 부서 삭제 에러");
        }
    }

    private async void OnSelect(string name)
    {
        if(selectedDepartment== name)
        {
            selectedDepartment = "";
        }
        else
        {
            selectedDepartment = name;
        }

        await OnSelectedDepartment.InvokeAsync(name);
    }

    private void OnModal(int id)
    {
        if (!Edit)
        {
            return;
        }
        openModalId = id;
    }

    private void CloseModal()
    {
        openModalId = 0;
    }


    private void OnDel(int data)
    {
        DelList.Clear();
        isDel = true;
        DelList.Add(data);
    }

    private void OnDelClose()
    {
        isDel = false;
        DelList.Clear();
    }

}
