@using FamTec.Shared.Client.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Server.DTO

<ul class="depart-list">
    @if(DataList == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @if (AddMode)
        {
            <li class="depart-add-form">
                <Input Type="text" Placeholder="부서명" @bind-Value=@newDepartment.Name />
                <Button Name="추가" OnClick="@AddDepartment" />
            </li>
        }

        @foreach (var item in DataList)
        {

            <li class="depart-item @(InputEdit ? "edit": "" ) ">
                @if (!Edit)
                {
                    <NavLink>
                        <span class="item-title">
                            @item.Name
                        </span>
                    </NavLink>
                }
                else
                {
                    
                    <input class="item-title item-input " type="text" @bind-value="@item.Name" disabled=@(!(editStates.ContainsKey(item.Id) && editStates[item.Id]))  />
                    <div class="item-option">
                        @if (editStates.ContainsKey(item.Id) && editStates[item.Id])
                        {
                            <button class="edit-btn btn-submit" @onclick="()=>OnSubmitEdit(item.Id) " />
                    

                        }
                        else
                        {
                            <button class="edit-btn" @onclick="()=>OnInputEdit(item.Id)" />

                        }

                        <input class="depart-select"
                               type="checkbox"
                               value="@item.Id"
                               @onchange="(e)=>InVokeCheckboxSelect(e, item.Id)" />
                    </div>
                }
            </li>
        }
    }
    
</ul>
@code {
    [Parameter] public List<DepartmentDTO> DataList { get; set; }
    [Parameter] public bool Edit { get; set; }
    [Parameter] public EventCallback<(bool ,int)> Select { get; set; }
    [Parameter] public EventCallback OnLoadDepartments { get; set; }
    [Parameter] public EventCallback OnListSync { get; set; }
    [Parameter] public bool AddMode {get; set;}


    private Dictionary<int, bool> editStates = new Dictionary<int, bool>();
    AddDepartmentDTO newDepartment = new AddDepartmentDTO();

    public bool InputEdit { get; set; } = false;


    private async Task InVokeCheckboxSelect(ChangeEventArgs e, int id)
    {
        bool isChecked = (bool)(e.Value ?? false);
        await Select.InvokeAsync((isChecked, id));
    }

    private void OnInputEdit(int id)
    {
        Console.WriteLine("부서편집");
        if (!editStates.ContainsKey(id))
        {
            editStates[id] = false;
            Console.WriteLine(editStates[id]);
        }

        editStates[id] = true;



    }

    private async Task OnSubmitEdit(int id)
    {
        var updateDepartment = DataList.FirstOrDefault(d => d.Id ==id);
        Console.WriteLine(updateDepartment.Name + updateDepartment.Id);
        if (updateDepartment != null)
        {
            try
            {
                ResponseUnit<DepartmentDTO> resUpdate = await apiManager.PutAsync<DepartmentDTO>("Department/sign/UpdateDepartment", updateDepartment);
                Console.WriteLine(resUpdate);
                if (resUpdate.code == 200)
                {
                    Console.WriteLine($"수정된 값: {updateDepartment.Name}");
                    await OnLoadDepartments.InvokeAsync();
                    await OnListSync.InvokeAsync();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "부서 수정 실패.");
                }
            }
            catch(Exception ex)
            {
                
            }
        }







        if (editStates.ContainsKey(id))
        {
            editStates[id] = false;
        }
    }


    /*
    * (POST)부서 추가
    */
    private async Task AddDepartment()
    {
        try
        {
            Console.WriteLine(newDepartment.Name == null);
            if (string.IsNullOrEmpty(newDepartment.Name))
            {
                await JS.InvokeVoidAsync("alert", "부서명을 입력해 주세요.");
                Console.WriteLine("입력된 값이 없습니다.");
                return;
            }
            ResponseUnit<AddDepartmentDTO> resDepartment = await apiManager.PostAsync<AddDepartmentDTO>("Department/sign/AddDepartment", newDepartment);
            if (resDepartment.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "부서 추가 실패.");
                newDepartment = new AddDepartmentDTO();
                return;
            }

            await OnLoadDepartments.InvokeAsync();
            await OnListSync.InvokeAsync();
            newDepartment = new AddDepartmentDTO();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin][ModalDepartment] 부서 추가 에러 : {ex.Message}");
        }
    }

    /*
    * (Put)부서 편집
    */
    private async Task OnUpdateDepartment()
    {
        try
        {
            Console.WriteLine();
        }
        catch
        {
            
        }
    }

    
}
