@page "/admin/manager/signup"

@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Admin.Manager.ManagerSignupV2.Components
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Client.DTO.Place
@using FamTec.Shared.DTO
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO
@using System.IdentityModel.Tokens.Jwt

@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="admin-signup-container yappear">
    <div class="admin-signup-wrap">
        <div class="form">
            <SignForm 
                NewManager="newManager" 
                DepartmentList="departmetnList" 
                EditMode=EditMode
                ManagerType="@UserType"
                @bind-Valid="@validationCheck"
                />
        </div>
        <div class="place">
            <PlaceSelectTable NewManagerPlace="managerPlace" />
        </div>

    </div>
    <div class="btns">
        @if (!validationCheck)
        {
            <Button Name="등록" Width="true" Type=0 Valid=true />
        }
        else
        {
            <Button Name="등록" Width="true" Type=0 OnClick="Submit" />
        }

        <Button Name="취소" Width="true" Type=1 />
    </div>
    
</div>

@code {
    AddManagerDTO newManager = new AddManagerDTO();
    AddManagerPlaceDTO managerPlace = new AddManagerPlaceDTO(); // 추가할 사업장 목록(선택 리스트)
    List<DepartmentDTO> departmetnList = new List<DepartmentDTO>();
    bool EditMode = true;
    string? EncryptSession;
    string? UserType;

    bool validationCheck = false;


    protected async override Task OnInitializedAsync()
    {
        await OnLoadDepartments();
        newManager = new();
    }

    private void HandleFormValidityChanged(bool isValid)
    {
        // Do something with the form validity state
        Console.WriteLine($"Form is valid: {isValid}");
    }


    /*
    * 부서 조회
    */
    private async Task OnLoadDepartments()
    {
        try
        {
            ResponseList<DepartmentDTO> resDepartment = await apiManager.GetListAsync<DepartmentDTO>("Department/sign/GetDepartmentList");
            if(resDepartment.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "부서 조회 실패");
                return;
            }
            // ResponseList<DepartmentDTO> resDepartment = await HttpClient.GetFromJsonAsync<ResponseList<DepartmentDTO>>("http://123.2.156.148:5245/api/DePartment/GetDepartmentList");
            departmetnList = resDepartment.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Admin][ManagerSignUp] 부서 조회 에러" + ex);
        }

    }



    /*
    * (POST)매니저 등록
    */
    private async Task Submit()
    {
        try
        {
            Console.WriteLine("매니저 등록 시작");
            Console.WriteLine("아이디" +newManager.UserId);
            Console.WriteLine("비밀번호" +newManager.Password);
            Console.WriteLine("부서" +newManager.DepartmentId);
            foreach (var i in managerPlace.PlaceList)
            {
                Console.WriteLine("사업장"+i);
            }
            Console.WriteLine("매니저 등록 끝");
            ResponseUnit<int> resManager = await apiManager.PostWithFilesAsync<int>("AdminUser/sign/AddManager", newManager);
            if(resManager.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "관리자 정보 등록 실패");
                //롤백 코드 추가 예정
                return;
            }
            int adminId = resManager.data;
            managerPlace.AdminId = adminId;
            ResponseUnit<bool> resManagerPlace = await apiManager.PostAsync<bool>("AdminUser/sign/AddManagerWorks", managerPlace);
            if (resManagerPlace.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "관리자 사업장 등록 실패");
                //롤백 코드 추가 예정
                return;
            }
            Navigation.NavigateTo("/admin/manager");


        }
        catch(Exception ex)
        {
            Console.WriteLine($"[Admin][Manager] 매니저 등록 에러" + ex);
            await JS.InvokeVoidAsync("alert", "[Admin][Manager] 매니저 등록 에러");
        }

       
    }

}
