@page "/admin/manager/signup"

@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Admin.Manager.ManagerSignupV2.Components
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Client.DTO.Place
@* @using FamTec.Shared.DTO *@
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO
@using System.IdentityModel.Tokens.Jwt

@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="admin-signup-container yappear">
    <div class="admin-signup-wrap">
        <div class="form">
            <SignForm 
                NewManager="newManager" 
                DepartmentList="departmetnList" 
                EditMode=EditMode
                ManagerType="@UserType"
                ReturnSuccess="OnValid"
                @bind-Valid="@validationCheck"
                />
        </div>
        <div class="place">
            <PlaceSelectTable NewManagerPlace="managerPlace" />
        </div>

    </div>
    <div class="btns">
        
        <Button Name="등록" Width="true" Type=0 OnClick="Submit" />
        
    </div>
    
</div>

@code {
    AddManagerDTO newManager = new AddManagerDTO();
    AddManagerPlaceDTO managerPlace = new AddManagerPlaceDTO(); // 추가할 사업장 목록(선택 리스트)
    List<DepartmentDTO> departmetnList = new List<DepartmentDTO>();
    bool EditMode = true;
    string? EncryptSession;
    string? UserType;

    bool validationCheck = false;

    //validation check
    List<int> valid = new List<int> { 0, 0, 0, 0, 0 };

    private async void OnValid((int value, int index) data)
    {
        valid[data.index] = data.value;
    }


    protected async override Task OnInitializedAsync()
    {
        await OnLoadDepartments();
        newManager = new();
    }

    private void HandleFormValidityChanged(bool isValid)
    {
        // Do something with the form validity state
        // Console.WriteLine($"Form is valid: {isValid}");
    }


    /*
    * 부서 조회
    */
    private async Task OnLoadDepartments()
    {
        try
        {
            ResponseList<DepartmentDTO> resDepartment = await apiManager.GetListAsync<DepartmentDTO>("Department/sign/GetDepartmentList");
            if(resDepartment.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDepartment.message);
                return;
            }
            // ResponseList<DepartmentDTO> resDepartment = await HttpClient.GetFromJsonAsync<ResponseList<DepartmentDTO>>("http://123.2.156.148:5245/api/DePartment/GetDepartmentList");
            departmetnList = resDepartment.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert","조회 실패");
        }

    }



    /*
    * (POST)매니저 등록
    */
    private async Task Submit()
    {
        try
        {
            int sum = 0;
            foreach (int v in valid)
            {
                sum += v;
            }


            if (sum != 5)
            {
                await JS.InvokeVoidAsync("alert", "입력 조건을 확인해주세요.");
                return;
            }
            if (string.IsNullOrEmpty(newManager.UserId) || 
            string.IsNullOrEmpty(newManager.Password) || 
            string.IsNullOrEmpty(newManager.Email) ||
            string.IsNullOrEmpty(newManager.Name))
            {
                await JS.InvokeVoidAsync("alert", "필수값 * 을 확인해주세요.");
                return;
            }
            ResponseUnit<int> resManager = await apiManager.PostWithFilesAsync<int>("AdminUser/sign/AddManager", newManager);
            if(resManager.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resManager.message);
                //롤백 코드 추가 예정
                return;
            }
            int adminId = resManager.data;
            managerPlace.AdminId = adminId;
            ResponseUnit<bool> resManagerPlace = await apiManager.PostAsync<bool>("AdminUser/sign/AddManagerWorks", managerPlace);
            if (resManagerPlace.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resManager.message);
                //롤백 코드 추가 예정
                return;
            }
            Navigation.NavigateTo("/admin/manager");


        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "등록 실패");
        }

       
    }

}
