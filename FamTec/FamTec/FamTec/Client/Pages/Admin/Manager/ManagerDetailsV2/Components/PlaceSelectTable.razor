@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Admin.Manager.ManagerDetailsV2.Modal
@using FamTec.Shared.Client.DTO
﻿
@using FamTec.Shared.Client.DTO.Place
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO
@using FamTec.Shared.Server.DTO.Admin

@inject HttpClient HttpClient

<div class="placetable-container">
    <div class="placetable-title">
        <span class="title">
            사업장 목록
        </span>
        <div class="place-table-option">
            <Input 
                Placeholder="search" 
                Value="@_searchText"
                ValueChanged="OnSearchTextChanged" />
            @if (EditMode)
            {
                <Button Name="추가" Width=true OnClick="OnModal" Type=0 />
                @if (FilterPlace.Count != 0)
                {
                    <Button Name="삭제" Width=true Type=1 OnClick="OnDelete" />
                }
            }
            
            
        </div>
    </div>
    <div class="placetable-table">
        <SignUpPlaceTable ListData="FilterPlace" OnCheck="OnSelected" EditMode=EditMode />
    </div>
    <div class="placetable-count">
        <span>
            사업장 수 : @SelectCount
        </span>
    </div>
    @if (EditMode && isOpen)
        {
            <ModalBackground >
                <ChildComponent>
                <PlaceModal 
                    OnClose="OnModal"
                    SelectPlace="@OriginalPlace" 
                    OnAdd="@OnAdd" />
                </ChildComponent>
            </ModalBackground>
        }
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public List<AdminPlaceDTO> PlaceList { get; set; }
    [Parameter] public bool EditMode {get;set;}

    List<AdminPlaceDTO> OriginalPlace = new List<AdminPlaceDTO>();
    List<AdminPlaceDTO> FilterPlace = new List<AdminPlaceDTO>();


    /// <summary>
    /// //////////////////
    /// </summary>


    List<AdminPlaceDTO> DelPlace = new List<AdminPlaceDTO>();
    int SelectCount = 0;
    bool isOpen = false;

    //검색 변수
    List<PlaceTableDTO> FilterPlaceList = new List<PlaceTableDTO>();
    //원본 리스트
    List<PlaceTableDTO> OriginalPlaceList = new List<PlaceTableDTO>();


    string _searchText = string.Empty;


    protected async override Task OnInitializedAsync()
    {
        await OnLoadManagerPlace();

    }

    protected override async Task OnParametersSetAsync()
    {
        if (!EditMode)
        {
            Console.WriteLine("여기탐");
            DelPlace.Clear();
            await OnLoadManagerPlace();
            StateHasChanged();
        }
    }

    /*
    * 매니저 사업장 조회
    */
    private async Task OnLoadManagerPlace()
    {
        try
        {
            ResponseList<AdminPlaceDTO> resManagerPlace = await apiManager.GetListAsync<AdminPlaceDTO>($"AdminPlace/sign/MyWorks/?adminid={Id}");
            if (resManagerPlace.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "매니저 사업장 조회 실패");
                //이전페이지로 되돌릴지 말지 선택
                return;
            }
            PlaceList = resManagerPlace.data;
            OriginalPlace = resManagerPlace.data;
            FilterPlace = OriginalPlace;
            SelectCount = OriginalPlace.Count;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "매니저 사업장 조회 실패");
            Console.WriteLine("[Admin][Manager] 매니저 사업장 조회 실패 \n" + ex);
            return;
        }
    }

    /*
    * 선택 --
    */
    public void OnSelected((bool isCheck, AdminPlaceDTO place) selection)
    {
        if (selection.isCheck)
        {
            DelPlace.Add(selection.place);
        }
        else
        {
            DelPlace.Remove(selection.place);
        }
    }

      /*
     * 검색 데이터 필터링 --
    */
    private async void OnSearchTextChanged(string text)
    {
        _searchText = text;

        FilterPlace = OriginalPlace
        .Where(p => String.IsNullOrEmpty(_searchText) ||
                    (p.PlaceCd?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.ContractNum?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList();

        await InvokeAsync(StateHasChanged);
    }


    /*
    * add 이벤트
    */
    private async void OnAdd(List<AdminPlaceDTO> selectList)
    {

        Console.WriteLine(selectList.Count);

        foreach(var select in selectList)
        {
            if (!PlaceList.Any(m => m.Id == select.Id))
            {
                PlaceList.Add(select);
                FilterPlace.Add(select);
            }

            // FilterPlace.Add(i);
            // PlaceList.Add(i);
        }

        SelectCount += selectList.Count;
    }

    /*
    * DELETE List Item
    */
    private async void OnDelete()
    {
        if (DelPlace == null || DelPlace.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "선택된 사업장이 없습니다.");
            return;
        }


        foreach (var i in DelPlace) // ToList()를 사용하여 반복 중 컬렉션 수정을 피함
        {
            PlaceList.Remove(i);
            OriginalPlace.Remove(i);
            FilterPlace.Remove(i);
        }
        SelectCount -= DelPlace.Count;
        DelPlace.Clear();
         // 선택된 아이템 수 업데이트
        // FilterPlaceList = new List<PlaceTableDTO>(PlaceList); // 새로운 List 인스턴스를 생성하여 할당
        StateHasChanged();
        await InvokeAsync(StateHasChanged); // UI 업데이트
    }


    /*
    * 사업장 추가 모달
    */
    private void OnModal()
    {
        isOpen = !isOpen;
    }


}
