
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Manager
@inherits PermissionComponentBase

<div class="form-container">
    <div class="form-title">
        <span class="title">매니저 정보</span>
    </div>
    <div class="content">
        <div class="img-area">
            <PreviewBox ImageUrls="@ImageUrl" />
            @if(EditMode)
            {
                <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
            }
            
        </div>
        <div class="form-input">
            @if (EditMode)
            {
                <ValidationInput Label="아이디"
                                 Placeholder="아이디"
                                 ValueType="text"
                                 @bind-Value=@Manager.UserId
                                 Type="USERID" />
                <ValidationInput Label="비밀번호"
                                 Placeholder="비밀번호"
                                 ValueType="password"
                                 @bind-Value=@Manager.Password
                                 ValidChanged="@(isValid => UpdateValidState("Password", isValid))"
                                 Type="PW" />

                <ValidationInput Label="비밀번호 확인"
                                 Placeholder="비밀번호 확인"
                                 ValueType="password"
                                 PasswordCheck="@Manager.Password"
                                 ValidChanged="@(isValid => UpdateValidState("PasswordCheck", isValid))"
                                 Type="PWCHECK" />

                <ValidationInput Label="이름"
                                 Placeholder="이름"
                                 ValueType="text"
                                 @bind-Value=Manager.Name />

                <ValidationInput Label="전화번호"
                                 Placeholder="전화번호"
                                 ValueType="text"
                                 @bind-Value=@Manager.Phone
                                 Type="Phone" />

                <ValidationInput Label="이메일"
                                 Placeholder="이메일"
                                 ValueType="text"
                                 @bind-Value=@Manager.Email
                                 ValidChanged="@(isValid => UpdateValidState("Email", isValid))"
                                 Type="EMAIL" />

                <SelectField Label="부서"
                             SelectData="DepartmentList"
                             @bind-Value=@Manager.DepartmentId
                             EditMode=true />
                <TextField2 Label="직급"
                            Value="@Manager.Type" 
                            Color=true/>

            }else{
                <TextField2 Label="아이디"
                            Value="@Manager.UserId"
                            Color=true />
                <TextField2 Label="이름"
                            Value="@Manager.Name"
                            Color=true />
                <TextField2 Label="부서"
                            Value="@Manager.Department"
                            Color=true />
                <TextField2 Label="전화번호"
                            Value="@Manager.Phone"
                            Color=true />
                <TextField2 Label="이메일"
                            Value="@Manager.Email"
                            Color=true />
                <TextField2 Label="직급"
                            Value="@Manager.Type"
                            Color=true />
            }
           
        </div>
    </div>
   
    
</div>

@code {
    // [Parameter] public AddManagerDTO NewManager { get; set; }
    [Parameter] public List<DepartmentDTO> DepartmentList { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public string? ManagerType { get; set; }
    [Parameter] public bool? Valid { get; set; }
    [Parameter] public EventCallback<bool> ValidChanged { get; set; }


    //매니저 디테일
    [Parameter] public DManagerDTO Manager { get; set; }


    private byte[] imageData;
    private string job;

    private List<string> ImageUrl = new List<string>();
    private Dictionary<string, bool> validationStates = new Dictionary<string, bool>();


    private void OnSelectDepartment(int value)
    {
        Manager.DepartmentId = value;

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine(ADMINJOB);
        job = ADMINJOB switch
        {
            "SystemMaster" => "마스터",
            "Master" => "매니저",
            _ => "없음"
    };
        
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
  
        StateHasChanged();
    }




    private async void OnUploadImage(List<ImageFile> images)
    {
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            Manager.Image = image.Image;
            Manager.ImageName = image.Name;
            ImageUrl.Add(image.ImageUrl);
        }
        StateHasChanged();
    }

    private async Task UpdateValidState(string field, bool isValid)
    {
        validationStates[field] = isValid;
        bool overallValid = validationStates.All(v => v.Value);
        if (Valid != overallValid)
        {
            Valid = overallValid;
            await ValidChanged.InvokeAsync(overallValid);
        }
    }
}
