@page "/admin/place"

@inherits PermissionComponentBase
@using FamTec.Client.Pages.Admin.Place.PlaceMain.Components
@using FamTec.Client.Pages.Admin.Place.PlaceMain.Modal
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Server
@using FamTec.Shared.Server.DTO
@using Newtonsoft.Json
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using FamTec.Client.Pages.CommonComponents
@using System.Security.Claims
@inject HttpClient HttpClient

<div class="place-container yappear">
    <div class="place-wrap">
        <div class="place-header">
            <span class="place-title">
                사업장 목록
            </span>
            <div class="table-header-option">
                <Input Placeholder="search" Type="text" Value="@searchText" ValueChanged="OnSearchTextChanged" />

                @if (ADMINEDIT)
                {
                    <Button Name="등록"
                            Width="true"
                            Type=0
                            OnClick = "@OnAddPage" />
                    @if (CheckedItems.Count > 0)
                    {
                        <Button Name="삭제"
                            Width="true"
                            Type=1
                            OnClick="@OnDeletePlace" />
                    }

                }

            </div>
        </div>
        <div class="place-table">
            <PlaceTable 
                ListData="FilterPlaceList" 
                Select="@OnSelected" 
                CheckedItems="@CheckedItems" />
        </div>
        @if (is_openModal)
        {
            @* <AddModal2 Title="사업장 등록" OnClose="@OnModalClose"/> *@
            <AddModal Title="사업장 등록" OnClose="@OnModalClose" LoadPlace="LoadPlace" />
        }
    </div>
</div>

@code {
     /*
     * 테이블 데이터
    */
    List<PlaceTableDTO> PlaceList;
    // List<PlaceTableDTO> SelecList = new List<PlaceTableDTO>();
    List<PlaceTableDTO> FilterPlaceList = new List<PlaceTableDTO>();
    // DeleteDTO DeletePlace = new DeleteDTO();
    List<int> DeletePlace = new List<int>();
    // HashSet<int> CheckedItems = new HashSet<int>();
    HashSet<int> CheckedItems = new HashSet<int>();

    string searchText = string.Empty;
    private string? _Role;
    private bool LoginMode;



    // public HttpClient httpClient = new HttpClient();

    bool is_openModal = false;

    protected override async Task OnInitializedAsync()
    {
        //관리자 권한 검사
        await base.OnInitializedAsync();

        await LoadPlace();
    }


    /*
    * 사업장 데이터 조회
    */
    private async Task LoadPlace()
    {
        try
        {
            Console.WriteLine("[관리자 모드][사업장 조회]");
            ResponseList<PlaceTableDTO> res = await apiManager.GetListAsync<PlaceTableDTO>("AdminPlace/sign/GetAllWorksList");
            if(res.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "사업장 조회 실패");
                return;
            }
            PlaceList = res.data ?? new List<PlaceTableDTO>();
            FilterPlaceList = PlaceList;

            // UI 갱신
            await InvokeAsync(StateHasChanged);
        }
        catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "[관리자 모드][사업장 조회] 실패\n"+ex);
            Console.WriteLine("[관리자 모드][사업장 조회] 실패");
            throw ex;

        }
    }


    /*
    * 검색 데이터 필터링
    */
    private async void OnSearchTextChanged(string text)
    {
        searchText = text;
        FilterPlaceList = String.IsNullOrEmpty(searchText) 
                                    ? PlaceList
                                    : PlaceList.Where(p => (p.PlaceCd?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                    (p.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                    (p.ContractNum?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                            ).ToList();



        await InvokeAsync(StateHasChanged);
    }

    /*
    * 사업장 체크
    */
    public void OnSelected((bool isCheck, int id) selection)
    {
        if (!selection.isCheck)
        {
            CheckedItems.Remove(selection.id);
        }
        else
        {
            CheckedItems.Add(selection.id);
        }
        foreach(var i in CheckedItems)
        {
            Console.WriteLine("check"+i);
        }

    }


    /*
    * 사업장 삭제
    */
    private async Task OnDeletePlace()
    {
        try
        {
            if (CheckedItems == null)
            {
                Console.WriteLine("삭제 데이터 없음");
                await JS.InvokeVoidAsync("alert", "삭데 데이터가 존재하지 않습니다.");
            }
            else
            {
                ResponseUnit<bool> resDel = await apiManager.DeletePlaceAsync<bool>("AdminPlace/sign/DeleteWorks", CheckedItems);
                if (resDel.code == 200)
                {

                    Console.WriteLine(resDel.message);
                    CheckedItems.Clear();
                    await LoadPlace();
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", $"{resDel.message}");
                    Console.WriteLine(resDel.message);
                    CheckedItems.Clear();
                    await LoadPlace();
                }
                searchText = "";

            }
        }
        catch(Exception ex)
        {
            Console.WriteLine("삭제 에러");
        }
    }



    /*
    * click add
    */
    private void onAddPlace()
    {
        is_openModal = true;
    }

    /*
    * 모달 활성화
    */
    private void OnModalClose()
    {
        is_openModal = false;
        StateHasChanged();
    }

    /*
    * 사업장 등록 페이지 이동
    */
    private void OnAddPage()
    {
        Navigation.NavigateTo("/admin/place/add");
    }
}













