@using FamTec.Client.Pages.Admin.Place.PlaceDetailv2.Modal
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO
@using FamTec.Shared.Client.DTO.Place
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="manager yappear">
    <div class="header">
        <span class="title">
            사업장 관리자
        </span>
        <div class="options">
            @if (ADMINEDIT)
            {
                @if (_editmode)
                {
                    <Button Name="추가" Width=true Type="0" OnClick="OnModal" />
                    @if (_selectDelList.Count > 0)
                    {
                        <Button Name="삭제" Width=true Type="1" OnClick="OnDelManager" />
                    }
                    <Button Name="닫기" Width=true Type="2" OnClick="OnEdit" />
                }
                else
                {
                    <Button Name="수정" Width=true Type="0" OnClick="OnEdit" />
                }
                
                
            }
            
        </div>
    </div>
    <div class="content">
        <ManagerTable 
            ListData="@SelectList" 
            OnChecked="OnChecked" 
            EditMode=_editmode 
            CheckedItem="@_selectDelList"
            />
    </div>
    @if (_isModal && _editmode)
    {
        <ModalBackground>
            <ChildComponent>
                <ManagerModal 
                    SelectManagerList="@SelectList" 
                    OnCancel="OnModal" 
                    OnAddManager="OnSelected"
                    Id=@Id
                    />
            </ChildComponent>
        </ModalBackground>
    }
</div>

@code {
    [Parameter] public List<ManagerDTO>? SelectList { get; set; }
    [Parameter] public bool EditMode{ get; set; }
    [Parameter] public EventCallback<List<ManagerDTO>> OnSelect{ get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback OnLoadManager{ get; set; }

    private bool _editmode = false;
    private bool _isModal = false;
    private List<ManagerDTO> _selectDelList = new List<ManagerDTO>();
    private DeletePlaceManagerDTO deleteManager = new DeletePlaceManagerDTO();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void OnSelected(List<ManagerDTO> data)
    {
        SelectList = data;
    }

    //목록에 담긴애들 중 체크
    private void OnChecked((bool isCheck, ManagerDTO manager) data)
    {

        //매니저 추가
        if (data.isCheck)
        {
            _selectDelList.Add(data.manager);
        }
        //매니저 삭제
        else
        {
            _selectDelList.Remove(data.manager);
        }
    }

    private async void OnDelManager()
    {
        Console.WriteLine("id"+Id);
        if(_selectDelList.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "삭제할 매니저를 선택해주세요.");
            return;
        }

        deleteManager.PlaceId = Id;
        deleteManager.PlaceManager = _selectDelList;

        ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>("AdminPlace/sign/DeletePlaceManager", deleteManager);
        if(resDel.code != 200)
        {
            await JS.InvokeVoidAsync("alert", resDel.message);
            return;
        }

        await JS.InvokeVoidAsync("alert", "매니저 수정 완료");
        _selectDelList.Clear();
        await OnLoadManager.InvokeAsync();
        StateHasChanged();
    }

    private void OnModal()
    {
        _isModal = !_isModal;
    }

    private void OnEdit()
    {
        _editmode = !_editmode;
        _selectDelList.Clear();
    }
}
