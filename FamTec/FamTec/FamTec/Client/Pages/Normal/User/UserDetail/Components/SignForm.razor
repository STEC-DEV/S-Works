@inherits PermissionComponentBase
@using FamTec.Client.Pages.Admin.Place.PlaceMain.Components
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Users
@using FamTec.Client.Pages.CommonComponents


<div class="form-container yappear">
    <div class="form-title">
        <span class="title">사용자 정보</span>
        @if (USER)
        {
            <div class="btns">
                @if (!EditMode)
                {
                    <Button Name="수정" Width=true Type="0" OnClick="OnEdited" />
                }
                else
                {
                    <div class="btns">
                        <Button Name="저장" Width=true Type="0" OnClick="OnSaved" />
                        <Button Name="취소" Width=true Type="1" OnClick="OnEdited" />
                    </div>
                }

            </div>
        }
    </div>
    @if(UserInfo == null)
    {
        <Loading/>
    }
    else
    {
        <div class="form-area">
            <div class="img-wrap">
                @* <PreviewBox ImageUrls="@(EditMode ? updateImageUrl :ImageUrl)" /> *@
                <ImageSlider Label="프로필 사진" Images="@ImageUrl" />
                @if (USEREDIT && EditMode)
                {
                    <div class="img-btn">
                        <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                        @if (UserInfo.Image != null)
                        {
                            <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                        }
                    </div>
                }

            </div>
            <div class="form-input">
                @if (EditMode)
                {
                    @* <ValidationInput ValueType="text"
            Placeholder="아이디"
            @bind-Value="@UserInfo.UserId"
            Label="아이디"/> *@
                    <TextField2 Label="아이디"
                                Value="@UserInfo.UserId"
                                Color=true />
                    <ValidationInput ValueType="password"
                                     Required="true"
                                     Type="PW"
                                     Placeholder="비밀번호"
                                     @bind-Value="@UserInfo.Password"
                                     ReturnSuccess="ReturnSuccess"
                                     Label="비밀번호" />
                    <ValidationInput ValueType="password"
                                     Type="PWCHECK"
                                     Placeholder="비밀번호 확인"
                                     PasswordCheck="@UserInfo.Password"
                                     ReturnSuccess="ReturnSuccess"
                                     Label="비밀번호 확인" />
                    <ValidationInput ValueType="text"
                                     Placeholder="이름"
                                     @bind-Value="@UserInfo.Name"
                                     Label="이름" />
                    <ValidationInput ValueType="text"
                                     Placeholder="전화번호"
                                     @bind-Value="@UserInfo.Phone"
                                     Label="전화번호" />
                    <ValidationInput ValueType="text"
                                     Placeholder="이메일"
                                     Type="EMAIL"
                                     @bind-Value="@UserInfo.Email"
                                     ReturnSuccess="ReturnSuccess"
                                     Label="이메일" />
                    <ValidationInput ValueType="text"
                                     Placeholder="직책"
                                     @bind-Value="@UserInfo.Job"
                                     Label="직책" />
                    <SelectField Label="상태"
                                 SelectData="@_userState"
                                 @bind-Value="@UserInfo.Status"
                                 EditMode=true />

                    <Toggle Title="알람 수신"
                            @bind-Value="@UserInfo.AlarmYN"
                            IsChecked="@UserInfo.AlarmYN"
                            EditMode=EditMode />
                }
                else
                {
                    <TextField2 Label="아이디"
                                Value="@UserInfo.UserId"
                                Color=true />
                    <TextField2 Label="이름"
                                Value="@UserInfo.Name"
                                Color=true />
                    <TextField2 Label="전화번호"
                                Value="@UserInfo.Phone"
                                Color=true />
                    <TextField2 Label="이메일"
                                Value="@UserInfo.Email"
                                Color=true />
                    <TextField2 Label="직책"
                                Value="@UserInfo.Job"
                                Color=true />
                    <TextField2 Label="상태"
                                Value="@(UserInfo.Status == 1? "휴직" :"재직" )"
                                Color=true />
                    <Toggle Title="알람 수신"
                            @bind-Value="@UserInfo.AlarmYN"
                            IsChecked="@UserInfo.AlarmYN"
                            EditMode=EditMode />
                }
            </div>

        </div>
    }
    
    
</div>

@code {
    [Parameter] public UserInfoDTO UserInfo { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback OnEdit{get;set;}
    [Parameter] public EventCallback OnSave{get;set;}
    [Parameter] public EventCallback<(int, int)> ReturnSuccess { get; set; }


    private byte[] imageData;
    // private List<string> ImageUrl = new List<string>(); //이미지 프리뷰
    private List<string> updateImageUrl = new List<string>(); //이미지 프리뷰


    List<byte[]> ImageUrl = new List<byte[]>();

    List<object> _userState = new List<object>
    {
        new
        {
            Id = 1,
            Name = "휴직"
        },
        new
        {
            Id = 2,
            Name = "재직"
        },
    };


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async void OnParametersSet()
    {
        if(UserInfo != null)
        {
            await ImgConvert();
        }
        
    }

    /*
    * 이미지 변환
    */
    private async Task ImgConvert()
    {
        ImageUrl.Clear();
        if (UserInfo.Image != null &&
            !string.IsNullOrEmpty(UserInfo.ImageName) &&
            !ImageUrl.Any(i => i.SequenceEqual(UserInfo.Image))
        )
        {

            ImageUrl.Add(UserInfo.Image);
        }
    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        updateImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);
        }
        if (ImageUrl.Count == 0)
        {

            ImageUrl.Add(temp[0]);
        }
        else
        {

            ImageUrl[0] = temp[0];
        }
        UserInfo.Image = temp[0];
        UserInfo.ImageName = names[0];
        StateHasChanged();
    }

    private void OnDelImg()
    {
        UserInfo.Image = null;
        UserInfo.ImageName = null;
        ImageUrl.Clear();
        StateHasChanged();
    }


    private async void OnEdited()
    {
        await OnEdit.InvokeAsync();
    }

    private async void OnSaved()
    {
        await OnSave.InvokeAsync();
    }
}
