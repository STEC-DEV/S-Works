@using FamTec.Shared.Client.DTO.Normal.Users
@using System.ComponentModel.DataAnnotations
<table class="table">
    <thead class="thead">
        <tr class="th-tr">
            <th class="th" rowspan="3">
                <span>
                    권한
                </span>
            </th>
            <th class="th" rowspan="2">
                <span>
                    기본정보 관리
                </span>
            </th>
            <th class="th" colspan="@EquipmentSubHeaders.Count">
                <span>
                    설비유지 관리
                </span>
            </th>
            <th class="th" rowspan="2">
                <span>
                    자재관리
                </span>
            </th>
            <th class="th" rowspan="2">
                <span>
                    에너지 관리
                </span>
            </th>
            <th class="th" rowspan="2">
                <span>
                    사용자 관리
                </span>
            </th>
            <th class="th" rowspan="2">
                <span>
                    민원 관리
                </span>
            </th>
        </tr>
        <tr class="th-tr">
            @foreach (var subHeader in EquipmentSubHeaders)
            {
                <th>
                    <span class="sub-head">
                        @subHeader
                    </span
                ></th>
            }
        </tr>
    </thead>
    <tbody class="tbody">
        <tr class="tbody-tr">
            <td class="td">
                <div>읽기</div>
            </td>
            @foreach (var prop in typeof(UserPermDTO).GetProperties())
            {
                var value = (int)prop.GetValue(UserPerm);
                var readChecked = value > 0;

                <td class="td">
                    <input type="checkbox" checked="@readChecked" @onchange="(e) => OnPermissionChange(e, prop.Name, true)" disabled="@(!EditMode)" />
                </td>
            }
        </tr>
        <tr class="tbody-tr">
            <td class="td">
                <div>쓰기</div>
            </td>
            @foreach (var prop in typeof(UserPermDTO).GetProperties())
            {
                var value = (int)prop.GetValue(UserPerm);
                var readChecked = value > 0;
                var writeChecked = value == 2;

                <td class="td">
                    <input type="checkbox" checked="@writeChecked" @onchange="(e) => OnPermissionChange(e, prop.Name, false)" />
                    @* disabled="@(!EditMode || !readChecked)" *@
                </td>
            }
        </tr>
    </tbody>
</table>

@code {
    [Parameter] public UserPermDTO UserPerm { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback<UserPermDTO> OnVocActive { get; set; }

    private List<string> EquipmentSubHeaders = new List<string> { "기계", "전기", "승강", "소방", "건축", "통신", "미화", "보안" };



    private bool IsFirstCheckboxChecked(int value)
    {
        return !(value > 0);
    }


    private void OnFirstCheckBox(ChangeEventArgs e, string propertyName)
    {
        //첫번째 input에 따라 0 or 1
        int permValue = (bool)e.Value ? 1 : 0;
        typeof(UserPermDTO).GetProperty(propertyName).SetValue(UserPerm, permValue);

        if(propertyName == "VocPerm")
        {
            Console.WriteLine("voc");
            OnVocActive.InvokeAsync(UserPerm);
        }
        // Console.WriteLine(typeof(UserPermDTO).GetProperty(propertyName).GetValue(UserPerm));

    }

    private void OnSecondCheckbox(ChangeEventArgs e, string propertyName)
    {
        var propertyInfo = typeof(UserPermDTO).GetProperty(propertyName);
        int currentValue = (int)propertyInfo.GetValue(UserPerm);

        if ((bool)e.Value)
        {
            propertyInfo.SetValue(UserPerm, 2);
        }
        else
        {
            propertyInfo.SetValue(UserPerm, 1);
        }

        
        // Console.WriteLine(currentValue);
        // Console.WriteLine(propertyInfo.GetValue(UserPerm));



    }

    private void OnPermissionChange(ChangeEventArgs e, string propertyName, bool isRead)
    {
        var prop = typeof(UserPermDTO).GetProperty(propertyName);
        int currentValue = (int)prop.GetValue(UserPerm);
        bool isChecked = (bool)e.Value;

        if (isRead)
        {
            if (isChecked)
                prop.SetValue(UserPerm, currentValue == 0 ? 1 : 2);
            else
                prop.SetValue(UserPerm, 0);
        }
        else // Write permission
        {
            prop.SetValue(UserPerm, isChecked ? 2 : 1);
        }

        if (propertyName == "VocPerm")
        {
            OnVocActive.InvokeAsync(UserPerm);
        }

        StateHasChanged();
    }

}
