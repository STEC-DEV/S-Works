@using FamTec.Client.Pages.Admin.Place.PlaceMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Users
@using FamTec.Client.Pages.CommonComponents


<div class="form-container yappear">
    <div class="form-title">
        <span class="title">사용자 정보</span>
    </div>
    <div class="form-area">
        <div class="img-wrap">
            @* <PreviewBox ImageUrls="@ImageUrl" /> *@
            <ImageSlider Label="프로필 사진" Images="ImageUrl" />
            <div class="img-btn">
                <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                @if(UserInfo.Image != null)
                {
                    <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                }
            </div>
            
        </div>
        <div class="form-input">
            <ValidationInput ValueType="text"
                            Placeholder="아이디"
                            @bind-Value="@UserInfo.UserId"
                            Label="아이디"
                            Required="true"
                            Type="USERID"
                            ReturnSuccess="ReturnSuccess"
                            />
            <ValidationInput ValueType="password"
                            Placeholder="비밀번호"
                            Type="PW"
                            @bind-Value="@UserInfo.Password"
                            Label="비밀번호"
                            Required="true"
                            ReturnSuccess="ReturnSuccess"
                             />
            <ValidationInput ValueType="password"
                              Placeholder="비밀번호 확인"
                              PasswordCheck="@UserInfo.Password"
                              Type="PWCHECK"
                              Label="비밀번호 확인"
                             ReturnSuccess="ReturnSuccess" />
            <ValidationInput ValueType="text"
                            Placeholder="이름"
                            @bind-Value="@UserInfo.Name"
                            Label="이름"
                            Required="true"
                            ReturnSuccess="ReturnSuccess"
                                />
            <ValidationInput ValueType="text"
                            Placeholder="전화번호"
                            @bind-Value="@UserInfo.Phone"
                            Label="전화번호"
                             />
            <ValidationInput ValueType="text"
                            Placeholder="이메일"
                            Type="EMAIL"
                            @bind-Value="@UserInfo.Email"
                            Label="이메일"
                            ReturnSuccess="ReturnSuccess"
                             />
            <ValidationInput ValueType="text"
                            Placeholder="직책"
                            @bind-Value="@UserInfo.Job"
                            Label="직책"
                             />
            <Toggle Title="알람 수신"
                    Col=true
                    @bind-Value="@UserInfo.AlarmYN"
                    EditMode=EditMode />
        </div>
        
    </div>
    
</div>

@code {
    [Parameter] public UserInfoDTO UserInfo { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public EventCallback<(int, int)> ReturnSuccess { get; set; }
    private byte[] imageData;
    // private List<string> ImageUrl = new List<string>(); //이미지 프리뷰
    private List<byte[]> ImageUrl = new List<byte[]>(); //이미지 프리뷰

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        var allowedExtensions = new[] { ".png", ".jpg", ".jpeg", ".gif" };

        // 파일 확장자 추출
        var extension = Path.GetExtension(e.File.Name).ToLowerInvariant();

        // 확장자 검사
        if (!allowedExtensions.Contains(extension))
        {
            await JS.InvokeVoidAsync("alert", "허용되지 않은 파일 형식입니다. PNG, JPG, JPEG, GIF 파일만 업로드 가능합니다.");
            return;
        }


        var buffer = new byte[e.File.Size];
        await using var stream = e.File.OpenReadStream(maxAllowedSize: 1024 * 1024 * 10);
        await stream.ReadAsync(buffer);
        imageData = buffer;
        UserInfo.Image = buffer;
        UserInfo.ImageName = e.File.Name;
    }


    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);

        }
        UserInfo.Image = temp[0];
        UserInfo.ImageName = names[0];
        ImageUrl.Add(temp[0]);
        StateHasChanged();
    }

    private void OnDelImg()
    {
        UserInfo.Image = null;
        UserInfo.ImageName = null;
        ImageUrl.Clear();
        StateHasChanged();
    }
}
