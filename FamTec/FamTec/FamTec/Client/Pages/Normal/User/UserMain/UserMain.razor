@page "/users"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Shared.Client.DTO.Normal.Users
@using FamTec.Client.Pages.Normal.User.UserMain.Components
@using FamTec.Shared.Server.DTO
@inject NavigationManager Navigation

<div class="user-container yappear">
    <div class="user-wrap">
        <div class="user-title">
            <span class="title">
                사용자 목록
            </span>
            
            <div class="user-options">
                <Input Placeholder="목록에서 검색"
                       Type="text" 
                    Value="@_searchText"
                    ValueChanged="OnSearchTextChanged" />
                @if (USER)
                {
                    <Button Name="등록" Width=true OnClick=AddUser Type=0 />
                    @if(CheckItems.Count > 0)
                    {
                        <Button Name="삭제" Width=true Type=1 OnClick="OnIsDel" />
                    }

                }
                @if (usersData.Count > 0)
                {
                    <ExportButton OnClick="Export" />
                }
            </div>
            
            
        </div>
        <div class="user-content">
            @if (FilterData == null)
            {
                <Loading/>
            }
            else
            {
                <UserTable Data=@FilterData Checkitem="@CheckItems" Select="@OnSelected" />
            }

        </div>
    </div>
</div>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDelUser" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    private string SearchText = string.Empty;
    private string _searchText = "";


    List<ListUser> usersData;
    List<ListUser> FilterData;
    HashSet<int> CheckItems = new HashSet<int>();

    bool isDel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadUsers();
    }


    /*
    * 사용자 추가화면 이동
    */
    private void AddUser()
    {
        Navigation.NavigateTo("/users/add");
    }


    private async Task OnLoadUsers()
    {
        try
        {
            ResponseList<ListUser> resUsers = await apiManager.GetListAsync<ListUser>("user/sign/GetPlaceUsers");
            if (object.ReferenceEquals(null, resUsers) || resUsers.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resUsers.message);
                return;
            }
            usersData = resUsers.data;
            FilterData = usersData;
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    /*
    * 검색 데이터 필터링 --
    */
    private async void OnSearchTextChanged(string text)
    {
        _searchText = text;

        FilterData = usersData
        .Where(p => String.IsNullOrEmpty(_searchText) ||
                    (p.UserId?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Type?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList();

        await InvokeAsync(StateHasChanged);
    }



    /*
    * 사용자 체크
    */
    public void OnSelected((bool isCheck, int id) selection)
    {
        if (!selection.isCheck)
        {
            CheckItems.Remove(selection.id);
        }
        else
        {
            CheckItems.Add(selection.id);
        }

    }

     /*
     * 사용자 삭제
    */
    private async Task OnDelUser()
    {
        try
        {
            ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>("User/sign/DeleteUser",CheckItems);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            CheckItems.Clear();
            await OnLoadUsers();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }


    private void OnIsDel()
    {
        isDel = !isDel;
    }



    private async Task Export()
    {
        if (usersData.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        List<string> colName = new List<string>
        {
            "이름",
            "아이디",
            "직책",
            "이메일",
            "생성일자",
            "상태",
        };
        var excel = ExcelService.getInstance(JS);
        string date = DateTime.Now.ToString("yyyyMMdd");
        string title = $"사용자목록_{date}";
        await excel.ExportUser(usersData, colName, title);
    }
}
