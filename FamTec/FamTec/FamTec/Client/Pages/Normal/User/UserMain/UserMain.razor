@page "/users"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Users
@using FamTec.Client.Pages.Normal.User.UserMain.Components
@using FamTec.Shared.Server.DTO
@inject NavigationManager Navigation

<div class="user-container yappear">
    <div class="user-wrap">
        <div class="user-title">
            <span class="title">
                사용자 목록
            </span>
            
            <div class="user-options">
                <Input 
                    Placeholder="search" 
                    Type="text" 
                    Value="@_searchText"
                    ValueChanged="OnSearchTextChanged" />
                @if (USEREDIT)
                {
                    <Button Name="추가" Width=true OnClick=AddUser Type=0 />
                    <Button Name="삭제" Width=true Type=1 OnClick="OnDelUser" />
                }
            </div>
            
            
        </div>
        <div class="user-content">
            <UserTable Data=@FilterData Checkitem="@CheckItems" Select="@OnSelected" />
        </div>
    </div>
</div>

@code {
    private string SearchText = string.Empty;
    private string _searchText = "";


    List<ListUser> usersData;
    List<ListUser> FilterData;
    HashSet<int> CheckItems = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadTsetData();
    }


    /*
    * 사용자 추가화면 이동
    */
    private void AddUser()
    {
        Navigation.NavigateTo("/users/add");
    }


    private async Task OnLoadTsetData()
    {
        ResponseList<ListUser> resUsers = await apiManager.GetListAsync<ListUser>("user/sign/GetPlaceUsers");
        if(object.ReferenceEquals(null,resUsers) || resUsers.code != 200)
        {
            await JS.InvokeVoidAsync("alert", "사용자 목록 조회 실패");
            return;
        }
        usersData = resUsers.data;
        FilterData = usersData;

    }

    /*
    * 검색 데이터 필터링 --
    */
    private async void OnSearchTextChanged(string text)
    {
        _searchText = text;

        FilterData = usersData
        .Where(p => String.IsNullOrEmpty(_searchText) ||
                    (p.UserId?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (p.Type?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false))
        .ToList();

        await InvokeAsync(StateHasChanged);
    }



    /*
    * 사용자 체크
    */
    public void OnSelected((bool isCheck, int id) selection)
    {
        if (!selection.isCheck)
        {
            CheckItems.Remove(selection.id);
        }
        else
        {
            CheckItems.Add(selection.id);
        }
        foreach (var i in CheckItems)
        {
            Console.WriteLine("check" + i);
        }

    }

    /*
     * 사용자 삭제
     */
    private async Task OnDelUser()
    {
        try
        {
            ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>("User/sign/DeleteUser",CheckItems);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }

            await OnLoadTsetData();
        }catch(Exception ex)
        {
            
        }
    }


}
