@page "/basic/buildings"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Building.BuildingMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Buildings
@using FamTec.Shared.Server.DTO


<div class="building-container yappear">
    <div class="building-wrap">
        <div class="building-header">
            <span class="title">
                건물 목록
            </span>
            
                <div class="btns">
                @if (BASIC)
                {
                    <Button Name="등록" Width=true Type=0 OnClick="@OnMoveAdd" />
                    @if (DelList.Count > 0)
                    {
                        <Button Name="삭제" Width=true Type=1 OnClick="OnIsDel" />
                    }

                }
                @if (BuildingList !=null &&BuildingList.Count > 0)
                {
                    <ExportButton OnClick="Export" />
                }
                </div>
            
            
            
        </div>
        <div class="building-contents">
            @if (BuildingList == null)
            {
                <Loading/>
            }
            else
            {
                <BuildingTable 
                               ListData="@BuildingList"
                               OnCheck="OnCheckBuilding" />
            }
            @* @ref="@buildingTable" *@
        </div>
    </div>
</div>


@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDeleteBuilding" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    List<BuildingListDTO> BuildingList;
    List<int> DelList = new List<int>();
    private BuildingTable buildingTable;

    bool isDel = false;

    // private bool USEREDIT = false;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadBuilding();

    }

    private async Task OnLoadBuilding()
    {
        try
        {
            ResponseList<BuildingListDTO> resGet = await apiManager.GetListAsync<BuildingListDTO>("Building/sign/MyBuildings");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "건물 조회 실패");
                return;
            }

            if (resGet.data == null)
            {
                BuildingList = new List<BuildingListDTO>();
            }
            else
            {
                BuildingList = new List<BuildingListDTO>(resGet.data);
            }
            
            DelList.Clear();
            // buildingTable.ResetChecks();
        }catch(Exception ex)
        {
            Console.WriteLine(ex);
        }

    }


    private void OnMoveAdd()
    {
        Navigation.NavigateTo("/basic/buildings/add");
    }


    private async Task OnDeleteBuilding()
    {
        try
        {
            if(DelList.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제 항목이 없습니다.");
                return;
            }
            //Put으로 변경해야함
            ResponseUnit<bool> resDelete = await apiManager.PutAsync<bool>("Building/sign/DeleteBuilding", DelList);
            if(resDelete.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDelete.message);
                return;
            }
            await OnLoadBuilding();

        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert","삭제실패");
        }
    }


    //리스트 체크 반환
    private void OnCheckBuilding((bool isCheck, int buildingId)data)
    {
        if (data.isCheck)
        {
            DelList.Add(data.buildingId);
        }
        else
        {
            DelList.Remove(data.buildingId);
        }
    }

    private void OnIsDel()
    {
        isDel = !isDel;
    }


    private async Task Export()
    {
        if (BuildingList.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        List<string> colName = new List<string>
        {
            "건물이름",
            "건물주소",
            "전화번호",
            "건물층",
            "준공년월",
            "등록일자",
        };
        string date = DateTime.Now.ToString("yyyyMMdd");
        var excel = ExcelService.getInstance(JS);
        string title = $"건물목록_{date}";
        await excel.ExportBuilding(BuildingList, colName, title);
    }
}
