@page "/basic/buildings/{id:int}"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.Normal.Building.BuildingDetail.Components
@using FamTec.Shared.Client.DTO.Normal.Buildings
@using FamTec.Shared.Client.DTO.Normal.Buildings.Group
@using FamTec.Shared.Server.DTO
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Building.BuildingDetail.Modal

<div class="container">
    <BuildingInfo 
        Building="Building" 
        OnLoad="@OnLoadBuilding" 

        />
    @if (BASIC)
    {
        <label class="sub-btn" @onclick=@OnModal title="그룹 추가">
            +
        </label>
    }
    @if (Group == null)
    {
        <Loading />
    }
    else
    {
        <div class="group yappear">
            @foreach (var group in Group)
            {
                <Group GroupData="@group" LoadGroup="OnLoadGroup" />

            }
        </div>
    }

    
    @if (IsModal && BASIC)
    {
        <ModalBackground>
            <ChildComponent>
                <SubGroupModal Id="@Id" CloseModal="OnModal" LoadGroup="OnLoadGroup" />
            </ChildComponent>
        </ModalBackground>
    }

</div>

@code {
    [Parameter] public int Id { get; set; }
    BuildingDTO Building;
    List<GroupDTO> Group;
    bool IsModal = false;
    bool EditMode = false;

    protected override async Task OnInitializedAsync()
    {
        //권한 조회
        await base.OnInitializedAsync();

        await OnLoadBuilding();
        await OnLoadGroup();
    }

    private async Task OnLoadBuilding()
    {
        try
        {
            ResponseUnit<BuildingDTO> resDetail = await apiManager.GetUnitAsync<BuildingDTO>($"Building/sign/DetailBuilding?buildingid={Id}");
            if (resDetail.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDetail.message);
                return;
            }
            Building = resDetail.data;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private async Task OnLoadGroup()
    {
        try
        {
            ResponseList<GroupDTO> resGroup = await apiManager.GetListAsync<GroupDTO>($"BuildingGroup/sign/GetBuildingGroup?buildingid={Id}");
            if(resGroup.code != 200)
            {
                await JS.InvokeVoidAsync("alert","그룹 조회 실패");
                return;
            }
            if(resGroup.data == null)
            {
                List<GroupDTO> Group = new List<GroupDTO>();
            }
            else
            {
                Group = resGroup.data;
            }

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private void OnModal()
    {
        IsModal = !IsModal;
    }

    private void OnEditMode()
    {
        EditMode = !EditMode;
    }

  
}
