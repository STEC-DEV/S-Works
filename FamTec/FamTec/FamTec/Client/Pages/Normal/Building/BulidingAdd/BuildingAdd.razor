@page "/basic/buildings/add"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Building.BulidingAdd.Components
@using FamTec.Client.Pages.Normal.Building.BulidingAdd.Modal
@using FamTec.Shared.Client.DTO.Normal.Buildings
@using System.Reflection
@using FamTec.Shared.Client.DTO.Normal.Buildings.GroupList
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

@if (BASIC)
{
    <div class="buildingadd-container yappear">
        <div class="buildingadd-info">
            <CascadingValue Value="@Building">
                <ChildContent>
                    <BuildingInfo OnAdd="OnAdd" />
                </ChildContent>
            </CascadingValue>

        </div>
        <label class="sub-btn" @onclick=@OnModal title="그룹 추가">
            +
        </label>
        <div class="group yappear">
            @if (GroupList.Count > 0)
            {
                foreach (AddGroupListDTO group in GroupList)
                {
                    <Group GroupData="group" OnDelGroup="OnDeleteGroup" />
                }
            }
        </div>

        <div class="buildingadd-btns">
            <Button Name="등록" Width=true Type=0 OnClick="@OnAdd" />
            @* <Button Name="취소" Width=true Type=1 /> *@
        </div>
    </div>
}

@if (IsModal)
{
    <ModalBackground>
        <ChildComponent>
            <SubGroupModal CloseModal="OnModal" OnAdd="OnAddGroup" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    AddBuildingDTO Building;
    List<string> BuildingProperties;

    List<AddGroupListDTO> GroupList = new List<AddGroupListDTO>();

    protected override async Task OnInitializedAsync()
    {
        Building = new AddBuildingDTO();
        await base.OnInitializedAsync();
        await OnCheckPerm();
    }
    bool IsModal = false;
    private async void OnAdd()
    {
        try
        {
            if (string.IsNullOrEmpty(Building.Name))
            {
                await JS.InvokeVoidAsync("alert", "필수값 * 을 확인해 주세요.");
                return;
            }
            ResponseUnit<AddBuildingDTO> ResAdd = await apiManager.PostWithFilesAsync<AddBuildingDTO>("building/sign/addbuilding", Building);
            if (ResAdd.code != 200)
            {
                await JS.InvokeVoidAsync("alert", ResAdd.message);
                Navigation.NavigateTo("/basic/buildings");
                return;
            }

            foreach (AddGroupListDTO g in GroupList)
            {
                g.BuildingIdx = ResAdd.data.Id;
            }

            ResponseUnit<bool> resAdd = await apiManager.PostAsync<bool>("BuildingGroup/sign/AddBuildingGroup", GroupList);
            if (resAdd.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resAdd.message);
            }
            Navigation.NavigateTo("/basic/buildings");
            return;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "등록 에러");
        }

    }

    private async Task OnCheckPerm()
    {
        if (!BASIC)
        {
            await JS.InvokeVoidAsync("history.back");
            await JS.InvokeVoidAsync("alert", "접근 권한이 없습니다.");
            return;
        }
    }

    private async void OnDeleteGroup(AddGroupListDTO group)
    {
        GroupList.Remove(group);
    }

    private void OnAddGroup(AddGroupListDTO newGroup)
    {
        GroupList.Add(newGroup);
    }


    private void OnModal()
    {
        IsModal = !IsModal;
    }
}
