@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Buildings
@using System.Reflection
@using Microsoft.AspNetCore.Http
<div class="buildinginfo">
    <di class="buildinginfo-title">
        <span class="title">
            건물 정보
        </span>
    </di
    <div class="buildinginfo-contents">
        <div class="building-img">
            @* <PreviewBox ImageUrls="@ImageUrl" /> *@
            <ImageSlider Images="@ImageUrl" Label="대표 이미지"/>
            <div class="img-btn">
                <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                @if(Building.Image != null)
                {
                    <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                }

            </div>
            
        </div>
        
            <div class="infosection-1">
                <InputCol Label="건물이름" Placeholder="건물이름" ValueType="text" @bind-Value=@Building.Name Required=true/>
                <InputCol Label="건물주소" Placeholder="건물주소" ValueType="text" @bind-Value=@Building.Address />
                <InputCol Label="대표전화" Placeholder="대표전화 ( - 제외)" ValueType="number" @bind-Value=@Building.Tel />
                <DateInput Label="준공년월" Placeholder="YYYYMMDD" @bind-Date=@Building.CompletionDT />
                <InputCol Label="건물구조" Placeholder="건물구조" ValueType="text" @bind-Value=@Building.BuildingStruct />
                <InputCol Label="건물용도" Placeholder="건물용도" ValueType="text" @bind-Value=@Building.Usage />
                <InputCol Label="시공업체" Placeholder="시공업체" ValueType="text" @bind-Value=@Building.ConstCompany />
                <InputCol Label="지붕구조" Placeholder="지붕구조" ValueType="text" @bind-Value=@Building.RoofStruct />
                <InputCol Label="소방등급" Placeholder="소방등급" ValueType="text" @bind-Value=@Building.FireRating />
                <InputCol Label="정화조용량" Placeholder="정화조용량" ValueType="text" @bind-Value=@Building.SepticTankCapacity />
            </div>
    </div>
    <div class="infosection-2">
        <GroupField Title="면적"
                    Sub1="연면적"
                    Sub2="대지면적"
                    Sub3="건축면적"
                    Unit="㎡"
                    Type="number"
                    @bind-Data1="@Building.GrossFloorArea"
                    @bind-Data2="@Building.LandArea"
                    @bind-Data3="@Building.BuildingArea" />
        <GroupField Title="건물층수" Sub1="전체" Sub2="지상" Sub3="지하" Unit="층"
                    Type="number"
                    @bind-Data1="@Building.FloorNum"
                    @bind-Data2="@Building.GroundFloorNum"
                    @bind-Data3="@Building.BasementFloorNum" />
        <GroupField Title="건물높이" Sub1="전체" Sub2="지상" Sub3="지하" Unit="M"
                    Type="number"
                    @bind-Data1="@Building.BuildingHeight"
                    @bind-Data2="@Building.GroundHeight"
                    @bind-Data3="@Building.BasementHeight" />

        <GroupField Title="주차" Sub1="전체" Sub2="옥내" Sub3="옥외" Unit="대"
                    Type="number"
                    @bind-Data1="@Building.ParkingNum"
                    @bind-Data2="@Building.InnerParkingNum"
                    @bind-Data3="@Building.OuterParkingNum" />
        <GroupField Title="전기용량" Sub1="전체" Sub2="수전" Sub3="발전" Unit="kw"
                    Type="number"
                    @bind-Data1="@Building.ElecCapacity"
                    @bind-Data2="@Building.FaucetCapacity"
                    @bind-Data3="@Building.GenerationCapacity" />

        <GroupField Title="급수용량" Sub1="전체" Sub2="고가수조" Sub3="저수조" Unit="Ton"
                    Type="number"
                    @bind-Data1="@Building.WaterCapacity"
                    @bind-Data2="@Building.ElevWaterCapacity"
                    @bind-Data3="@Building.WaterTank" />
        <GroupField Title="가스용량" Sub1="전체" Sub2="보일러" Sub3="냉온수기" Unit="N㎥"
                    Type="number"
                    @bind-Data1="@Building.GasCapacity"
                    @bind-Data2="@Building.Boiler"
                    @bind-Data3="@Building.WaterDispenser" />
        <GroupField Title="승강기" Sub1="전체" Sub2="인승용" Sub3="화물용" Unit="대"
                    Type="number"
                    @bind-Data1="@Building.LiftNum"
                    @bind-Data2="@Building.PeopleLiftNum"
                    @bind-Data3="@Building.CargoLiftNum" />
        <GroupField Title="냉난방용량" Sub1="전체" Sub2="난방용량" Sub3="냉방용량" Unit="㎡"
                    Type="number"
                    @bind-Data1="@Building.CoolHeatCapacity"
                    @bind-Data2="@Building.HeatCapacity"
                    @bind-Data3="@Building.CoolCapacity" />
        <GroupField Title="조경면적" Sub1="전체" Sub2="지상" Sub3="옥상" Unit="㎡"
                    Type="number"
                    @bind-Data1="@Building.LandScapeArea"
                    @bind-Data2="@Building.GroundArea"
                    @bind-Data3="@Building.RoofTopArea" />
        <GroupField Title="화장실" Sub1="전체" Sub2="남자" Sub3="여자" Unit="개소"
                    Type="number"
                    @bind-Data1="@Building.ToiletNum"
                    @bind-Data2="@Building.MenToiletNum"
                    @bind-Data3="@Building.WomenToiletNum" />
    </div>

        
</div>

@code {
    [CascadingParameter] public AddBuildingDTO Building { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }
    // private List<string> ImageUrl = new List<string>();

    private List<byte[]> ImageUrl = new List<byte[]>();

    bool EditMode= true;



    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear(); //단일 이미지라 초기화
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        // foreach (var image in images)
        // {
        //     Building.Image = image.Image;
        //     Building.ImageName = image.Name;
        //     ImageUrl.Add(image.ImageUrl);
        // }
        foreach(var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);
        }

        Building.Image = temp[0];
        Building.ImageName = names[0];

        ImageUrl.Add(temp[0]);

        StateHasChanged();
    }

    private async Task OnDelImg()
    {
        if (Building.Image == null || string.IsNullOrEmpty(Building.ImageName) || ImageUrl.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "삭제할 이미지가 존재하지 않습니다.");
            return;
        }
        Building.Image = null;
        Building.ImageName = null;
        ImageUrl.Clear();
    }

}
