@using FamTec.Client.Pages.CommonComponents
@using System.IdentityModel.Tokens.Jwt
@using FamTec.Client.Pages.Voc.Add.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Voc
@using FamTec.Shared.Server.DTO


<div class="addmodal">
    <div class="header">
        <span class="title">
             처리 내용
        </span>
    </div>
    <div class="content"> 
        <TextField2 Label="작업자" Color=true Value="@WriterName"/>
        <div class="col">
            <InputSelectField 
                Label="처리 상태" 
                SelectData="@status" 
                FlexColumn=true 
                SelectedValue="@Comment.Status"
                SelectedValueChanged="HandleSelectedValueChange"
                />
                
        </div>
        <VocInput Label="처리 내용"
                  @bind-Value=@Comment.Content
                  Placeholder="내용"
                  TextArea=true
                  Height=true />
        @if (image.Count > 0)
        {
            <ImageSlider Label="첨부 이미지" Images="@image" />
            <ul class="ul">
                @foreach (string i in _imageName)
                {
                    <li class="li">
                        <span class="img-title">
                            @i
                        </span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red"
                             class="bi bi-x xicon" viewBox="0 0 16 16"
                             @onclick="()=>OnDelImg(i)">
                            <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                        </svg>
                    </li>
                }
            </ul>
        }
        <InputImages MaxFilesNum="3" OnChange="OnUploadImage" />
    </div>
    <div class="btns">
        <Button Name="등록" Type="0" OnClick="@OnAdd" />
        <Button Name="취소" Type="1" OnClick="@OnCloseModal" />
    </div>
    
</div>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public EventCallback CloseModal { get; set; }
    [Parameter] public EventCallback OnChanged { get; set; }

    AddCommentDTO Comment;
    List<byte[]> image = new List<byte[]>();
    List<string> _imageName = new List<string>();
    // List<string> _imageName = new List<string>();
    // List<int> emptyIdx = new List<int>();

    string text;
    string WriterName;
    List<object> status = new List<object>
    {
        // new { Name = "미처리", Id = 0},
        new { Name = "처리중", Id = 1},
        new { Name = "처리완료", Id= 2},
    };

    protected override async Task OnInitializedAsync()
    {
        WriterName = await (_authStateProvider as CustomAuthProvider).GetUserName();
        Comment = new AddCommentDTO();
       
    }


    private void OnCloseModal()
    {
        CloseModal.InvokeAsync();
    }


    private async void OnAdd()
    {
        try
        {
            Comment.VocTbId = Id;
            ResponseUnit<AddCommentDTO> resAdd = await apiManager.PostWithFilesAsync<AddCommentDTO>("VocComment/sign/AddVocComment", Comment);
            if(resAdd.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resAdd.message);
            }
            await OnChanged.InvokeAsync();
            OnCloseModal();
            
        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "등록 실패");
        }
    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        if (Comment.Images == null)
        {
            Comment.Images = new List<byte[]>();
            Comment.ImageName = new List<string>();
        }

        foreach (var newImage in images)
        {
            if (Comment.Images.Count < 3)
            {
                Comment.Images.Add(newImage.Image);
                Comment.ImageName.Add(newImage.Name);
                image.Add(newImage.Image);
                _imageName.Add(newImage.Name);
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "최대 3개의 이미지만 등록 가능합니다.");
                break;
            }
        }

        StateHasChanged();
    }

    private void HandleSelectedValueChange(int value)
    {
        Comment.Status = value;

    }


    private async void OnDelImg(string name)
    {
        int index = _imageName.IndexOf(name);
        if (index != -1)
        {
            image.RemoveAt(index);
            _imageName.RemoveAt(index);
            Comment.Images.RemoveAt(index);
            Comment.ImageName.RemoveAt(index);
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }
    
}
