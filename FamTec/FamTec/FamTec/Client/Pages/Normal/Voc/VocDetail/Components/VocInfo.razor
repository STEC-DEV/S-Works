@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.DTO.Normal.Voc
@using FamTec.Client.Pages.Normal.Voc.Components
@using FamTec.Shared.Server.DTO

<div class="vocinfo-container">
    <div class="vocinfo-wrap">
        <div class="vocinfo-title">
            <span class="title">
                민원 내용
            </span>
            <div class="option">
                <StatusCard Status=@Data.Status.ToString() />
                @if (EditPerm)
                {
                    @if (EditMode)
                    {
                        <Button Name="저장" Width=true Type="0" OnClick="OnUpdateType" />
                        <Button Name="취소" Width=true Type="1" OnClick="OnEdit" />
                    }
                    else
                    {
                        <Button Name="편집" Width=true Type="0" OnClick="OnEdit" />
                    }
                }
            </div>
            
        </div>
        <div class="vocinfo-content">
            <div class="content-grid">
                <TextField2 Label="접수 번호" Value=@Data.Code Color=true/>
                <TextField2 Label="발생 시각" Value=@Data.CreateDT Color=true />
                <TextField2 Label="위치" Value=@Data.BuildingName Color=true />
                @if (EditMode)
                {
                   <SelectField 
                        Key="department" 
                        SelectData="@Departments" 
                        @bind-Value="SelectedDepartment" 
                        OnChange="OnChangeType" 
                        Label="건물"
                        EditMode="true" />
                }
                else
                {
                    <TextField2 Label="담당 부서" Value=@SelectDepartmentName Color=true />
                }
                <TextField2 Label="작성자" Value=@Data.CreateUser Color=true />
                <TextField2 Label="전화번호" Value=@Data.Phone Color=true />
            </div>
            <TextField2 Label="제목" Value=@Data.Title Color=true />
            <TextField Label="내용" Context=@Data.Contents Type="textarea" />
            @if(images.Count != 0 )
            {
                <ImageSlider Images="@images" Label="첨부파일" />
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public DetailVocDTO Data { get; set; }
    [Parameter] public bool EditPerm {get;set;}
    [Parameter] public EventCallback OnLoad { get; set; }

    bool EditMode = false;
    List<byte[]> images = new List<byte[]>();
    List<int> nullIndex = new List<int>();
    int SelectedDepartment = 0;
    string SelectDepartmentName;
    // UpdateVocTypeDTO type

    UpdateVocTypeDTO updateType = new UpdateVocTypeDTO();

    protected override async Task OnInitializedAsync()
    {


    }




    List<object> Departments = new List<object>()
    {
        new
        {
            Name = "미분류",
            Id = 0,
        },
        new
        {
            Name = "기계",
            Id = 1,
        },
        new
        {
            Name = "전기",
            Id = 2,
        },
        new
        {
            Name = "승강",
            Id = 3,
        },
        new
        {
            Name = "소방",
            Id = 4,
        },
        new
        {
            Name = "건축",
            Id = 5,
        },
        new
        {
            Name = "통신",
            Id = 6,
        },
        new
        {
            Name = "미화",
            Id = 7,
        },
        new
        {
            Name = "보안",
            Id = 8,
        },
    };





    protected override async Task OnParametersSetAsync()
    {
        await OnIMGConvert();
        if (Data != null && Data.Type.HasValue)
        {
            SelectedDepartment = Data.Type.Value;
            OnConvertType();
        }else
        {
            // 처리할 수 없는 값일 경우 예외 처리
            SelectedDepartment = -1; // 또는 기본값 할당
        }

    }

    private async Task OnConvertType()
    {
        SelectDepartmentName = Data.Type switch
        {
            0 => "미분류",
            1 => "기계",
            2 => "전기",
            3 => "승강",
            4 => "소방",
            5 => "건축",
            6 => "통신",
            7 => "미화",
            8 => "보안",
            _ => "Unknown"
        };
        StateHasChanged();
    }

    private async Task OnIMGConvert()
    {
        images = new List<byte[]>();
        foreach (var data in Data.Images.Select((value, idx) => (value, idx)))
        {
            if (data.value == null)
            {
                nullIndex.Add(data.idx);
                return;
            }
            images.Add(data.value);
        }

        StateHasChanged();
    }

    //타입 변경 이벤트
    private void OnChangeType(int typeid)
    {
        SelectedDepartment = typeid;
        updateType.Type = typeid;
    }

    //서버 전송
    private async Task OnUpdateType()
    {
        try
        {
            if(Data.Type == updateType.Type)
            {
                await JS.InvokeVoidAsync("alert", "동일한 부서입니다.");
                return;
            }
            updateType.VocId = Data.Id.Value;
            ResponseUnit<bool> resUpdate = await apiManager.PutAsync<bool>("Voc/sign/UpdateVocType",updateType);
            if(resUpdate.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resUpdate.message);
                return;
            }
            await OnLoad.InvokeAsync();
            StateHasChanged();
            OnEdit();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "만원 타입 변경 에러");
        }
    }

    private void OnEdit()
    {
        EditMode = !EditMode;
    }
}
