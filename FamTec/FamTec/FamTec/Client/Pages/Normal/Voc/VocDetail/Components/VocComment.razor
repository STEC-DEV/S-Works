@using FamTec.Client.Pages.CommonComponents
@using System.IdentityModel.Tokens.Jwt
@using FamTec.Client.Pages.Normal.Voc.VocDetail.Modal
@using FamTec.Shared.Client.DTO.Normal.Voc

<div class="voccomment-container">
    <div class="voccomment-title">
        <span class="title">
            처리 내역
        </span>
        <div class="option">
            @if (EditMode)
            {
                <Button Name="추가" Width=true Type=0 OnClick="@OnAddMode" />
            }
            
        </div>
    </div>
    <div class="voccomment-content">
        <div class="voccomment-overflow">
            @* @if(AddComment)
            {
                <div class="yappear">
                    <ProcessCard  />
                </div>
                
            } *@
            @foreach(var comment in ListData)
            {
                <ProcessCard Status="0" Data="@comment" />
            }
            @* <ProcessCard Status="0" />
            <ProcessCard Status="1" />
            <ProcessCard Status="1" /> *@
            
        </div>
    </div>
    @if (AddMode)
    {
        <ModalBackground>
            <ChildComponent>
                <AddModal CloseModal="@OnAddMode" />
            </ChildComponent>
        </ModalBackground>
    }

</div>

@code {
    [Parameter] public List<VocCommentListDTO> ListData { get; set; } 
    [Parameter] public bool EditMode { get; set; }
    bool AddMode = false;
    bool AddComment = false;
    string WriterName;


    protected override Task OnInitializedAsync()
    {
        Console.WriteLine("ss"+EditMode);
        return base.OnInitializedAsync();
    }




    /*
       * Session 조회
       */
    private async Task LoadsessionData()
    {
        var handler = new JwtSecurityTokenHandler();

        string encryptedSession = await customStateProvider.GetTokenAsync();
        Console.WriteLine("Encrypted Session: " + encryptedSession);

        if (handler.CanReadToken(encryptedSession))
        {
            var jwtSecurityToken = handler.ReadToken(encryptedSession) as JwtSecurityToken;

            WriterName = jwtSecurityToken.Claims.FirstOrDefault(C => C.Type == "Name")?.Value.ToString();

        }

    }

    private void OnChangeEditMode()
    {
        EditMode = !EditMode;
    }

    private void OnAddComment()
    {
        AddComment = !AddComment;
    }


    private void OnAddMode()
    {
        AddMode = !AddMode;
    }
}
