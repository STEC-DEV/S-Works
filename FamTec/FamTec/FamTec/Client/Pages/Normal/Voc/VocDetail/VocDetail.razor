@page "/voc/{Id:int}"
@using FamTec.Client.Pages.Normal.Voc.VocDetail.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Voc
@using System.IdentityModel.Tokens.Jwt
@using FamTec.Shared.Server.DTO
@using System.Text.Json
@inject AuthenticationStateProvider _authStateProvider
@inherits PermissionComponentBase

<div class="vocdetail-container">
    <div class="vocdetail-wrap">
        <div class="vocdetail-info">
            <VocInfo 
                Data="VocData" 
                EditPerm=VOCEDIT 
                OnLoad="OnLoadVocDetail" />
        </div>
        <div class="vocdetail-comment">
            <VocComment 
                Id="Id" 
                ListData="@VocCommentData" 
                EditMode=@VOCEDIT
                OnLoadComment="OnLoadVocComment"
                OnLoadInfo="OnLoadVocDetail"
                />
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    DetailVocDTO VocData = new DetailVocDTO();
    List<VocCommentListDTO> VocCommentData = new List<VocCommentListDTO>();


    bool VOCEDIT = false;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadVocDetail();
        await OnLoadVocComment();
        // await OnPermCheck();

    }

    protected override async Task OnParametersSetAsync()
    {
        await OnUserPermCheck();
        Console.WriteLine("민원 권한 : "+ VOCEDIT);
    }


    private async Task OnLoadVocDetail()
    {
        try
        {
            ResponseUnit<DetailVocDTO> resGet = await apiManager.GetUnitAsync<DetailVocDTO>($"Voc/sign/VocInfo?VocId={Id}");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            VocData = resGet.data;
            await OnUserPermCheck();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }

    }


    private async Task OnLoadVocComment()
    {
        try
        {
            ResponseList<VocCommentListDTO> resGet = await apiManager.GetListAsync<VocCommentListDTO>($"VocComment/sign/GetVocCommentList?VOCID={Id}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
            }
            VocCommentData = resGet.data;
            await OnUserPermCheck();

        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("조회 실패");
        }
    }


    private async Task OnUserPermCheck()
    {
        //수정권한 없는경우 리턴
        if (!VOC)
        {
            VOCEDIT = false;
            return;
        }

        if (VocData.Type == 0)
        {
            VOCEDIT = true;
            return;
        }

        string checkVocType = VocData.Type switch
        {
            0 => "",
            1 => "VocMachine",
            2 => "VocElec",
            3 => "VocLift",
            4 => "VocFire",
            5 => "VocConstruct",
            6 => "VocNetwork",
            7 => "VocBeauty",
            8 => "VocSecurity",
            _ => "",
        };

        bool vocPerm = await (_authStateProvider as CustomAuthProvider).GetUserVocPermission(checkVocType);
        VOCEDIT = vocPerm;

    }
}
