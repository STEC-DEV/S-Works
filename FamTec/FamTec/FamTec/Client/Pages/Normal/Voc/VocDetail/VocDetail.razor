@page "/voc/{Id:int}"
@using FamTec.Client.Pages.Normal.Voc.VocDetail.Components
@using FamTec.Shared.Client.DTO.Normal.Voc
@using System.IdentityModel.Tokens.Jwt
@using FamTec.Shared.Server.DTO
@using System.Text.Json
@inject AuthenticationStateProvider _authStateProvider

<div class="vocdetail-container">
    <div class="vocdetail-wrap">
        <div class="vocdetail-info">
            <VocInfo Data="VocData" EditPerm=IsEditPerm/>
        </div>
        <div class="vocdetail-comment">
            <VocComment ListData="@VocCommentData" EditMode=@IsEditCommnet/>
        </div>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    DetailVocDTO VocData = new DetailVocDTO();
    List<VocCommentListDTO> VocCommentData = new List<VocCommentListDTO>();
    bool IsEditPerm = false;
    bool IsEditCommnet = false;

    protected async override Task OnInitializedAsync()
    {
        await OnLoadVocDetail();
        await OnLoadVocComment();
        await OnPermCheck();
    }


    private async Task OnLoadVocDetail()
    {
        ResponseUnit<DetailVocDTO> resGet = await apiManager.GetUnitAsync<DetailVocDTO>($"Voc/sign/VocInfo?VocId={Id}");
        if(resGet.code != 200)
        {
            await JS.InvokeVoidAsync("alert", "민원 상세조회 실패");
            return;
        }
        VocData = resGet.data;
        Console.WriteLine(resGet.data.Phone);
        // Console.WriteLine(VocData.Code);
        // Console.WriteLine(VocData.Phone);
    }


    private async Task OnLoadVocComment()
    {
        try
        {
            ResponseList<VocCommentListDTO> resGet = await apiManager.GetListAsync<VocCommentListDTO>($"VocComment/sign/GetVocCommentList?VOCID={Id}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("민원 처리내역 조회 실패");
            }
            VocCommentData = resGet.data;


        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("민원 처리내역 조회 실패");
        }
    }



    //사용자 권한 체크
    private async Task OnPermCheck()
    {
        Console.WriteLine("hello");
        var auth = await _authStateProvider.GetAuthenticationStateAsync();
        var user = auth.User;
        var userType = user.Claims.FirstOrDefault(c => c.Type == "UserType")?.Value;
        var userPerm = user.Claims.FirstOrDefault(c => c.Type == "UserPerms")?.Value;
        var userVocPerm = user.Claims.FirstOrDefault(c => c.Type == "VocPerms")?.Value;
        string checkVocType = VocData.Type switch
        {
            "미분류" => "",
            "기계민원" => "VocMacine",
            "전기민원" => "VocElec",
            "승강민원" => "VocLift",
            "소방민원" => "VocFire",
            "건축민원" => "VocConstruct",
            "통신민원" => "VocNetwork",
            "미화민원" => "VocBeauty",
            "보안민원" => "VocSecurity",
            _ => "",
        };
        Console.WriteLine(checkVocType);

        //관리자면 전체 권한 분류 미
        if(userType == "ADMIN")
        {
            IsEditPerm = true;
            IsEditCommnet = true;
        }

        //사용자 기본권한 Voc 읽기 및 쓰기 권한 확인 => 쓰기 true시 분류 가능
        if (!string.IsNullOrEmpty(userPerm))
        {
            try
            {
                var jsonPerm = JsonSerializer.Deserialize<Dictionary<string, string>>(userPerm);
                if (jsonPerm.TryGetValue("UserPerm_Voc", out string vocPermValue))
                {
                    IsEditPerm = vocPermValue == "2";
                    Console.WriteLine("voc 읽기/쓰기 권한"+ vocPermValue);
                };
            }catch(Exception ex)
            {
                JS.InvokeVoidAsync("alert", "json parse 에러");
            }
        }

        //Voc에서 부서별 권환을 통해서 코멘트 작성 가능
        if (!string.IsNullOrEmpty(userVocPerm))
        {
            try
            {
                var jsonPerm = JsonSerializer.Deserialize<Dictionary<string, string>>(userVocPerm);
                Console.WriteLine(jsonPerm);
                if (!string.IsNullOrEmpty(checkVocType) && jsonPerm.TryGetValue(checkVocType, out string permValue))
                {
                    IsEditCommnet = permValue.Equals("True", StringComparison.OrdinalIgnoreCase);
                    Console.WriteLine(checkVocType +IsEditCommnet);
                    Console.WriteLine(IsEditCommnet);
                }
            }
            catch (Exception ex)
            {
                JS.InvokeVoidAsync("alert", "voc json parse 에러");
            }
        }

    }
}
