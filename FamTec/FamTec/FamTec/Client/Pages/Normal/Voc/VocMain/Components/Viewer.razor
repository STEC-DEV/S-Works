
<div class="viewer" @onclick=OnActive>
    <label class="label @(IsShow ? "focus" : "") pointer">
        @CurrentViewNum
    </label>
    <ul class="ul @(IsShow ? "show" : "")">
        @foreach(var i in viewer)
        {
            <li class="li pointer" @onclick="()=>OnChangedValue(i) " @onclick:stopPropagation="true">
                @i.Name
            </li>
        }
    </ul>
</div>

@code {
    [Parameter] public EventCallback<int> OnChanged{ get; set; }
    private DotNetObjectReference<Viewer> objRef;

    string CurrentViewNum = "25개";
    bool IsShow = false;

    class ViewItem
    {
        public int Value { get; set; }
        public string Name { get; set; }
    };

    List<ViewItem> viewer = new List<ViewItem>
    {
        new ViewItem
        {
            Value = 25,
            Name = "25개"
        },
        new ViewItem
        {
            Value = 50,
            Name = "50개"
        },
        new ViewItem
        {
            Value = 75,
            Name = "75개"
        },
        new ViewItem
        {
            Value = 100,
            Name = "100개"
        },


    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("addOutsideClickListener.addClickListener", DotNetObjectReference.Create(this));
        }
    }

    private async Task OnChangedValue(ViewItem value)
    {        
        CurrentViewNum = value.Name;
        await OnChanged.InvokeAsync(value.Value);
        IsShow = false; // 리스트 항목 선택 시 닫기
    }

    private void OnActive()
    {
        IsShow = !IsShow;
    }

    // IDisposable 구현을 통해 정리 작업 수행
    public async ValueTask DisposeAsync()
    {
        try
        {
            if (objRef != null)
            {
                await JS.InvokeVoidAsync("addOutsideClickListener.removeClickListener");
                objRef.Dispose();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Dispose error: {ex.Message}");
        }
    }

    [JSInvokable]
    public void HideDropdown()
    {
        IsShow = false;
        InvokeAsync(StateHasChanged);
    }
}
