@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Voc
<div class="vochistory-container">
    <div class="vochistory-wrap">
        <div class="vochistory-title">
            <span class="title">
                민원 내역
            </span>
        </div>
        <div class="option">
            @if (FilterOption ==0)
            {
                <div class="vochistory-slider @(FilterOption == 1 ? "date-none" : "")">
                    <DateSlider CreateDate="createdate" OnChanged="OnSelectDate" />
                </div>
            }
            
            <div class="option-page">
                <Viewer OnChanged="OnChangeViewNum" />
                @if(totalPage > 1)
                {
                    <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
                }
            </div>
            
        </div>
        <div class="vochistory-content">
            <VocTable ListData="filterData"/>
        </div>
    </div>
</div>

@code {
    [Parameter] public List<ListVocDTO> ListData { get; set; }
    [Parameter] public List<MonthVocListDTO> MonthListData { get; set; }
    [Parameter] public int DefaultOption { get; set; }
    [Parameter] public bool IsLoading { get; set;  }
    //사업장 생성일자 필요함
    public DateTime createdate = new DateTime(2023, 11, 4, 12, 0, 0, 0, 0);

    List<ListVocDTO> listvoc = new List<ListVocDTO>();
    List<ListVocDTO> originalData = new List<ListVocDTO>();
    List<ListVocDTO> filterData = new List<ListVocDTO>();
    string curDate;
    int viewNum;
    private int currentPage = 1;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;
    private bool _isLoading;



    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine("이니셜 옵션값"+DefaultOption);
        DateTime date = DateTime.Now;
        curDate = date.ToString("yyyy-M");
        viewNum = 25;
        FilterOption = DefaultOption;

    }

    protected override async Task OnParametersSetAsync()
    {

        Console.WriteLine("로딩 여부" + IsLoading);
        totalPage = 0;
        FilterOption = DefaultOption;
        _isLoading = IsLoading;
        Console.WriteLine("로딩 여부" + _isLoading);
        if (FilterOption == 0)
        {
            Console.WriteLine("파라미터셋 월간조회");
            await MonthDecideData();
        }
        else
        {
            Console.WriteLine("파라미터셋 기간조회");
            originalData = ListData;
            filterData = ListData;
            await Paging();
        }
        StateHasChanged();


    }


    //페이지 필터링
    private async Task Paging()
    {

        Console.WriteLine("============페이징 실행============");
        Console.WriteLine("토탈 페이지" + totalPage);
        if (filterData == null ||  string.IsNullOrEmpty(curDate))
        {
            // filterData.Clear();
            return;
        }
        totalPage = (int)Math.Ceiling((double)originalData.Count / viewNum);
        int skip = (currentPage -1) * viewNum;
        filterData = originalData.Skip(skip).Take(viewNum).ToList();

        Console.WriteLine("[페이징]데이터 수 : "+filterData.Count);
        Console.WriteLine("[페이징]볼 데이터 수 : " + viewNum);
        Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }




    //월별 필더링
    private async Task MonthDecideData()
    {
        Console.WriteLine("월 분할 함수 실행됨");
        if (MonthListData == null || string.IsNullOrEmpty(curDate))
        {
            filterData.Clear();
            originalData.Clear();
            return;
        }

        // curDate 값을 DateTime 형식으로 변환
        int year = int.Parse(curDate.Substring(0, 4));
        int month = int.Parse(curDate.Substring(4, 2));
        DateTime selectedDate = new DateTime(year, month, 1);

        var selectedMonth = MonthListData.FirstOrDefault(m => m.Dates == selectedDate.ToString("yyyy-M"));
        if (selectedMonth != null)
        {
            filterData = selectedMonth.VocList;
            originalData = selectedMonth.VocList;
        }
        else
        {
            filterData.Clear();
            originalData.Clear();
        }
        currentPage = 1;
        StateHasChanged();
        await Paging();
    }

    //현재 선택한 년월
    private async Task OnSelectDate(string date)
    {
        Console.WriteLine("현재 선택 년월 함수");
       
        curDate = date;
        await MonthDecideData();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        Console.WriteLine(value);
        viewNum = value;
        currentPage = 1;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
        {
            currentPage += 1;

        }
        else if(num == -1)
        {
            currentPage += num;
        }
        else
        {
            currentPage = num;
        }
        Console.WriteLine("현재 페이지"+currentPage);
        await Paging();
        StateHasChanged();
    }

}