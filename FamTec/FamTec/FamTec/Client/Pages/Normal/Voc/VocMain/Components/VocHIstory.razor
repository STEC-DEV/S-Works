@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Voc.VocMain.Modal
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Voc
@inherits PermissionComponentBase

<div class="vochistory-container yappear">
    <div class="vochistory-wrap">
        <div class="vochistory-title">
            <span class="title">
                민원 내역
            </span>
            <div class="options">
                <Input Placeholder="목록에서 검색"
                       Type="text"
                       ValueChanged="OnSearch" />
                       @* 민원 쓰기권한만 체크 *@
                @if(VOC)
                {
                    <Button Name="등록" Width=true Type="0" OnClick="OnAddVoc" />
                }
@*                 <div class="icon" @onclick=ExportMonth>
                    <ExportIcon />
                </div> *@
            </div>
        </div>
        <div class="option @(DefaultOption !=0 ? "flex-end":null)">
            @if (DefaultOption == 0)
            {
                <div class="vochistory-slider @(DefaultOption == 1 ? "date-none" : "")">
                    <DateSlider CreateDate="@createdate" OnChanged="OnSelectDate" CurDate="@CurrentDate" />
                </div>
            }
            
            <div class="option-page">
                
                @if(totalPage > 1)
                {
                    <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
                }
                <Viewer OnChanged="OnChangeViewNum" />
            </div>
            
        </div>
        <div class="vochistory-content">
            @if(filterData == null)
            {
                <Loading/>
            }
            else
            {
            <VocTable ListData="filterData" />
            }

        </div>
    </div>
</div>

@if (addVoc)
{
    <ModalBackground>
        <ChildComponent>
            <VocAdd OnCancel="OnAddVoc" OnLoadVoc=OnLoadVoc />
        </ChildComponent>
    </ModalBackground>
}

@code {
    [Parameter] public List<ListVocDTO> ListData { get; set; }
    // [Parameter] public List<MonthVocListDTO> MonthListData { get; set; }
    [Parameter] public int DefaultOption { get; set; }
    [Parameter] public bool IsLoading { get; set;  }
    [Parameter] public EventCallback OnLoadVoc { get; set; }
    [Parameter] public EventCallback<DateOnly> OnDateChange { get; set; }
    [Parameter] public String CurrentMonth { get; set; }
    [Parameter] public DateTime CurrentDate { get; set; }
    [Parameter] public List<FilterItem> Bulildings { get; set; }
    //사업장 생성일자 필요함
    public DateTime createdate;

    List<ListVocDTO> listvoc = new List<ListVocDTO>();
    List<ListVocDTO> originalData = new List<ListVocDTO>();
    // List<ListVocDTO> filterData = new List<ListVocDTO>();
    List<ListVocDTO> filterData;
    string curDate;
    int viewNum = 25;
    private int currentPage = 1;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;

    //전화 민원 등록
    bool addVoc = false;

    DateTime date = DateTime.Now;
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        createdate = await (_authStateProvider as CustomAuthProvider).GetPlaceCreate();

        // FilterOption = DefaultOption;
        StateHasChanged();

    }


    protected override async Task OnParametersSetAsync()
    {
        

        if(ListData != null)
        {
            originalData = new List<ListVocDTO>(ListData);
            await Paging();
        }


        StateHasChanged();
    }


    //페이지 필터링
    private async Task Paging()
    {
       
        // Console.WriteLine("============페이징 실행============");
        // if (filterData == null || string.IsNullOrEmpty(CurrentMonth))
        // {
        //     Console.WriteLine("new");
        //     filterData = new List<ListVocDTO>();
        //     totalPage = 0;
        //     currentPage = 1;
        //     return;
        // }

        totalPage = (int)Math.Ceiling((double)originalData.Count / viewNum);
        currentPage = Math.Min(currentPage, totalPage);
        int skip = (currentPage -1) * viewNum;
        filterData = originalData.Skip(skip).Take(viewNum).ToList();
        // originalData = originalData.Skip(skip).Take(viewNum).ToList();

        // Console.WriteLine($"[페이징] 전체 데이터 수: {originalData?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }



    //현재 선택한 년월
    private async Task OnSelectDate(DateOnly date)
    {

        await OnDateChange.InvokeAsync(date);
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        Console.WriteLine($": {currentPage}");
        await Paging();
    }


    //검색
    private string _searchText = "";
    private async Task OnSearch(string text)
    {
        _searchText = text;
        filterData = String.IsNullOrEmpty(_searchText)
                                ? ListData
                                : ListData.Where(m => (m.Phone?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)||
                                (m.CreateUser?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                (m.Title?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                ).ToList();
        
        await InvokeAsync(StateHasChanged);
    }


    private async Task ExportMonth()
    {
        List<string> colName = new List<string>
        {
            "위치",
            "구분",
            "제목",
            "발생일시",
            "처리일시",
            "민원처리시간",
            "상태",
        };
        var excel = ExcelService.getInstance(JS);
        // await excel.ExportVocData(MonthListData, colName);
    }


    private void OnAddVoc()
    {
        addVoc = !addVoc;
    }
}

        

@*     //월별 필더링
    // private async Task MonthDecideData()
    // {
    //     Console.WriteLine("월 분할 함수 : " +curDate);
    //     if (MonthListData == null || string.IsNullOrEmpty(curDate))
    //     {
    //         originalData = new List<ListVocDTO>();
    //         return;
    //     }
    //     else
    //     {
    //         // DateTime selectedDate = DateTime.ParseExact(curDate, "yyyy-MM", null);
    //         var selectedMonth = MonthListData.FirstOrDefault(m => m.Dates == curDate);
    //         originalData = selectedMonth?.VocList ?? new List<ListVocDTO>();
    //     }
    //     StateHasChanged();
    //     await Paging();
    // }
 *@