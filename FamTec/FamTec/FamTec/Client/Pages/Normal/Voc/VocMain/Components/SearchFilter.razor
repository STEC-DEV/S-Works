@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Voc
@using FamTec.Shared.Server.DTO
@using System.Web


<div class="filter">
    <div class="filter-wrap">
        <div class="header">
            <span class="title">
                조회 조건
            </span>
            <Button Name="조회" Width=true Type="0" OnClick="OnSearch" />
        </div>
        <div class="content">
            <div class="filter-date">
                <span class="filter-date-title">
                    조회기간
                </span>
                <div class="filter-date-content">
                    <div class="filter-date-item">
                        <div class="item-group">
                            <input type="radio" name="date" value=0 @onchange=OnDateOptionChanged checked="@(selectDefaultOption==0)">
                            <span class="label">월간</span>
                        </div>
                    </div>
                    <div class="filter-date-item">
                        <div class="item-group">
                            <input type="radio" name="date" value=1 @onchange=OnDateOptionChanged checked="@(selectDefaultOption==1)">
                            <span class="label">기간 설정</span>
                        </div>
                        <div class="@(selectDefaultOption != 1 ? "none" : "width") ">
                            <InputDuration 
                                Row="true"
                                StartDT="@startDt" 
                                EndDT="@endDt" 
                                StartDTChanged="@(newDate => startDt = newDate)"
                                EndDTChanged="@(newDate => endDt = newDate)"
                                />
                        </div>
                    </div>
                </div>
                
            </div>

            <MultiSelectDrop Row=true Label="민원구분" SelectItems="@Divisionv2" OnSelectionChanged="HandleSelectionChange" />
            @if (Bulildingsv2 != null)
            {
                <MultiSelectDrop Row=true Label="민원위치" SelectItems="@Bulildingsv2" OnSelectionChanged="HandleSelectionChange" />
            }
            
            <MultiSelectDrop Row=true Label="민원유형" SelectItems="@Typev2" OnSelectionChanged="HandleSelectionChange" />
            <MultiSelectDrop Row=true Label="민원상태" SelectItems="@Statusv2" OnSelectionChanged="HandleSelectionChange" />

        </div>
    </div>
</div>

@code {
    [Parameter] public int DefaultOption { get; set; }
    [Parameter] public EventCallback OnSearchClicked { get; set; } // 검색 버튼 이벤트

    // [Parameter] public List<FilterItem> Bulildings { get; set; }
    //---------------------------------------------------------------
    [Parameter] public List<FilterItem> Bulildingsv2 { get; set; }
    [Parameter] public List<FilterItem> Typev2 { get; set; }
    [Parameter] public List<FilterItem> Statusv2 { get; set; }
    [Parameter] public List<FilterItem> Divisionv2 { get; set; }
    
    private int selectDefaultOption = 0;
    private DateTime startDt = DateTime.Now;
    private DateTime endDt = DateTime.Now;

    List<int> types = new List<int>();
    List<int> status = new List<int>();
    List<int> location = new List<int>();
    List<int> divisions = new List<int>();
    List<FilterItem> locations = new List<FilterItem>();


    string SearchParams = "";

    //민원 유형 객체
    List<FilterItem> type = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "미분류", IsChecked = false },
        new FilterItem { Id = 1, Name = "기계", IsChecked = false },
        new FilterItem { Id = 2, Name = "전기", IsChecked = false },
        new FilterItem { Id = 3, Name = "승강", IsChecked = false },
        new FilterItem { Id = 4, Name = "소방", IsChecked = false },
        new FilterItem { Id = 5, Name = "건축", IsChecked = false },
        new FilterItem { Id = 6, Name = "통신", IsChecked = false },
        new FilterItem { Id = 7, Name = "미화", IsChecked = false },
        new FilterItem { Id = 8, Name = "보안", IsChecked = false },
    };

    //민원 상태 객체
    List<FilterItem> state = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "미처리", IsChecked = false },
        new FilterItem { Id = 1, Name = "처리중", IsChecked = false },
        new FilterItem { Id = 2, Name = "처리완료", IsChecked = false }
    };

    //민원 상태 객체
    List<FilterItem> division = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "모바일", IsChecked = false },
        new FilterItem { Id = 1, Name = "수기입력", IsChecked = false }
    };

    protected override async Task OnInitializedAsync()
    {
        await OnLoadBuilding();
    }

    //건물조회 형태는 id, Name,
    private async Task OnLoadBuilding()
    {
        try
        {
            ResponseList<FilterItem> resGet = await apiManager.GetListAsync<FilterItem>("Building/sign/GetPlaceBuilding");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "건물 조회실패");
                return;
            }
            locations = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "건물 조회 실패");
        }
    }


    //조회 기간
    private void OnDateOptionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            selectDefaultOption = value;

        }
    }



    //체크된 요소 id 리스트 반환
    private List<int> CheckDate(List<FilterItem> items)
    {
        List<int> data = items.Where(i => i.IsChecked == true).Select(i => i.Id).ToList();

        return data;
    }


    private async Task OnSearch()
    {
        try
        {
            var parameters = HttpUtility.ParseQueryString(string.Empty);
            types = CheckDate(Typev2);
            status = CheckDate(Statusv2);
            location = CheckDate(Bulildingsv2);
            divisions = CheckDate(Divisionv2);
            // location = CheckDate(Bulildings);

            // //조건 선택안한 경우
            if (Typev2.Count == 0 || Statusv2.Count == 0 || Bulildingsv2.Count == 0 || Divisionv2.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "조건을 선택해 주세요");
                return;
            }

            parameters["searchType"] = selectDefaultOption.ToString();
            if (selectDefaultOption == 1)
            {
                parameters["startDate"] = startDt.ToString("yyyy-MM-dd");
                parameters["endDate"] = endDt.ToString("yyyy-MM-dd");
            }
            parameters["types"] = string.Join(",", types);
            parameters["status"] = string.Join(",", status);
            parameters["locations"] = string.Join(",", location);
            parameters["divisions"] = string.Join(",", divisions);


            Navigation.NavigateTo($"/voc/{parameters}",false);


        }catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

   

    private void HandleSelectionChange(List<FilterItem> selectedItems)
    {
        var selectedNames = string.Join(", ", selectedItems.Where(x => x.IsChecked).Select(x => x.Name));
        Console.WriteLine($"Selected items: {selectedNames}");
    }
}
      