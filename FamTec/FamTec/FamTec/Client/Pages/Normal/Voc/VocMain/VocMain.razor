@page "/voc"
@page "/voc/{SearchParams}"
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Voc
@using FamTec.Shared.Server.DTO
@using System.Web

<div class="voc-container yappear">
    <div class="condition-container">

        <SearchFilter 
            DefaultOption="@DefaultOptionv2"
            OnSearchClicked="OnSearch"
            
            Bulildingsv2="@buildingv2"
            Statusv2="@statev2"
            Typev2="@typev2"
            Divisionv2="@divisionv2"
            />
    </div>
    @* MonthListData="MonthVocData" *@
    <div class="content-container">
            <VocHIstory 
                ListData="VocData" 
                CurrentMonth="@curMonth"
                DefaultOption=@DefaultOptionv2 
                IsLoading=@IsLoading
                CurrentDate="@curDate"
                OnDateChange=HandleDateChanged
                OnLoadVoc = "OnRequestVocV2"
                />
        </div>
</div>

@code {
    [Parameter]
    public string SearchParams { get; set; }


    List<ListVocDTO> VocData;

    bool IsSearch = false;
    bool IsLoading = false;

    string startDt = null;
    string endDt = null;
    DateTime curDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {

        //파라미터가 있는 경우에 민원 데이터 조회
        await OnLoadBuildingv2();
        DateTime date = DateTime.Now;
        curMonth = date.ToString("yyyy-MM");
        await OnRequestVocV2();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {


        await OnRequestVocV2();
    }



    private async Task OnSearch()
    {
        curDate = DateTime.Now;
        curMonth = curDate.ToString("yyyy-MM");
        await OnRequestVocV2();
        StateHasChanged();
    }

    //민원 유형 객체
    List<FilterItem> typev2 = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "미분류", IsChecked = true },
        new FilterItem { Id = 1, Name = "기계", IsChecked = true },
        new FilterItem { Id = 2, Name = "전기", IsChecked = true },
        new FilterItem { Id = 3, Name = "승강", IsChecked = true },
        new FilterItem { Id = 4, Name = "소방", IsChecked = true },
        new FilterItem { Id = 5, Name = "건축", IsChecked = true },
        new FilterItem { Id = 6, Name = "통신", IsChecked = true },
        new FilterItem { Id = 7, Name = "미화", IsChecked = true},
        new FilterItem { Id = 8, Name = "보안", IsChecked = true },
    };

    //민원 상태 객체
    List<FilterItem> statev2 = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "미처리", IsChecked = true },
        new FilterItem { Id = 1, Name = "처리중", IsChecked = true },
        new FilterItem { Id = 2, Name = "처리완료", IsChecked = true }
    };

    //민원 상태 객체
    List<FilterItem> divisionv2 = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "모바일", IsChecked = true },
        new FilterItem { Id = 1, Name = "수기입력", IsChecked = true }
    };
    //건물 조회
    List<FilterItem> buildingv2;

    //res 데이터
    List<ListVocDTO> vocv2 = new List<ListVocDTO>();

    //기본값 0 / 0 월간 조회 /1 기간조회
    int DefaultOptionv2 = 0;


    List<int> typesparam = new List<int>();
    List<int> stateparam = new List<int>();
    List<int> buildingparam = new List<int>();
    List<int> divisionparam = new List<int>();


    private bool buildingDataLoaded = false;

    //초기 년월
    string curMonth="";

    //건물조회 형태는 id, Name,
    private async Task OnLoadBuildingv2()
    {
        try
        {
            ResponseList<FilterItem> resGet = await apiManager.GetListAsync<FilterItem>("Building/sign/GetPlaceBuilding");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if(resGet.data == null)
            {
                buildingv2 = new List<FilterItem>();
            }
            else
            {
                buildingv2 = new List<FilterItem>(resGet.data);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    //민원 데이터 GET
    private async Task OnRequestVocV2()
    {
        try
        {
            Console.WriteLine(SearchParams);
            if (!string.IsNullOrEmpty(SearchParams))
            {                
                OnParseQueryStringv2();
            }
            else
            {
                typesparam = CheckDate(typev2);
                stateparam = CheckDate(statev2);
                buildingparam = CheckDate(buildingv2);
                divisionparam = CheckDate(divisionv2);
            }



            string typesQueryString = string.Join("&type=", typesparam);
            string statusQueryString = string.Join("&status=", stateparam);
            string locationQueryString = string.Join("&buildingid=", buildingparam);
            string divisionQueryString = string.Join("&division=", divisionparam);

            // searchdate = "2024-10";
            // //월간 조회 시 기간 변수 null
            if (DefaultOptionv2 == 0)
            {
                startDt = "";
                endDt = "";
                if (string.IsNullOrEmpty(curMonth))
                {
                    curMonth = curDate.ToString("yyyy-MM");
                }
            }
            else
            {
                curMonth = "";
            }
            //기간 조회 시 month year 변수 null

            ResponseList<ListVocDTO> resGet = await apiManager.GetListAsync<ListVocDTO>($"Voc/sign/GetVocSearchList?searchType={DefaultOptionv2}&StartDate={startDt}&EndDate={endDt}&searchdate={curMonth}&type={typesQueryString}&status={statusQueryString}&buildingid={locationQueryString}&division={divisionQueryString}");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if(resGet.data == null)
            {
                VocData = new List<ListVocDTO>();
            }
            else
            {
                VocData = resGet.data;
            }

            IsSearch = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    // private async void HandleDateChanged(string value)
    // {
    //     curMonth = value;
        
    //     await OnRequestVocV2();
    // }
    private async void HandleDateChanged(DateOnly newDate)
    {
        curDate = newDate.ToDateTime(TimeOnly.MinValue);
        curMonth = curDate.ToString("yyyy-MM");
        await OnRequestVocV2();
    }

    //체크된 요소 id 리스트 반환
    private List<int> CheckDate(List<FilterItem> items)
    {
        List<int> data = items.Where(i => i.IsChecked == true).Select(i => i.Id).ToList();

        return data;
    }

    private void OnParseQueryStringv2()
    {
        var parameters = HttpUtility.ParseQueryString(SearchParams);
        typesparam = ParseIntList(parameters["types"]);
        stateparam = ParseIntList(parameters["status"]);
        buildingparam = ParseIntList(parameters["locations"]);
        divisionparam = ParseIntList(parameters["divisions"]);

        startDt = parameters["startDate"];
        endDt = parameters["endDate"];
        DefaultOptionv2 = int.Parse(parameters["searchType"]);
    }


    //쉼표 구분
    private List<int> ParseIntList(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<int>();

        return value.Split(',')
                    .Select(s => int.TryParse(s, out int result) ? result : (int?)null)
                    .Where(n => n.HasValue)
                    .Select(n => n.Value)
                    .ToList();
    }

}