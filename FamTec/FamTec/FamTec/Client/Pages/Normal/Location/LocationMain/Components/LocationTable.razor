@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Location


<table class="location-table">
    <thead class="thead">
        <tr class="th-tr">
            <th class="th text-left">
                <span>
                    No.
                </span>
            </th>
            <th class="th">
                <span>
                    위치명
                </span>
            </th>
            <th class="th">
                <span>
                    건물명
                </span>
            </th>
            <th class="th">
                <span>
                    층
                </span>
            </th>
            <th class="th">
                <span>
                    
                </span>
            </th>
        </tr>
    </thead>
    <tbody class="tbody">
        @if (isAddingRow)
        {
            Console.WriteLine("aa");
            <tr class="tbody-tr">
                <td class="td text-left">
                    @(@BuildingFloor.Count + 1)
                </td>
                <td class="td">
                    <input type="text" @bind="@AddObject.Name" />
                </td> 
                <td class="td">
                    <SelectField 
                        SelectData=@BuildingFloor 
                        OnChange="@OnSetBuilding" 
                        EditMode=true
                        />
                </td> 
                <td class="td">
                    <SelectField SelectData=@Floor OnChange="@OnSetFloor" EditMode="@(Floor != null ? true : false)" />
                </td>
                <td class="td text-right">
                    <Button Name="등록" Width=true OnClick="@SaveRow" />
                </td>
            </tr>
        }
        @foreach (var location in ListData.Select((value, idx) => (value, idx)))
        {
            <tr class="tbody-tr">
                <td class="td text-left">@(location.idx+1)</td>
                <td class="td">@location.value.RoomName</td>
                <td class="td">@location.value.BuildingName</td>
                <td class="td">@location.value.FloorName</td>
                <td class="td text-right">
                    <input type="checkbox" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public List<LocationDTO> Locations {get; set;}
    [Parameter] public List<RoomListDTO> ListData { get; set; }
    [Parameter] public List<BuildingFloorListDTO> BuildingFloor { get; set; }
    [Parameter] public AddLoactionDTO AddObject { get; set; }
    [Parameter] public bool isAddingRow { get; set; }
    [Parameter] public EventCallback AddMode { get; set; }
    [Parameter] public EventCallback OnAdd { get; set; }


    List<BuildingFloor> Floor;

    protected override Task OnInitializedAsync()
    {
        Console.WriteLine(Floor == null);
        return base.OnInitializedAsync();
    }

    private async void OnAddRow()
    {
        isAddingRow = true;

    }


    private void OnSetBuilding(int id)
    {
        if (id == 0)
        {
            Floor = null;
            return;
        }
        var selectBuliding = BuildingFloor.FirstOrDefault(f => f.BuildingId == id);
        if(selectBuliding == null)
        {
            return;
        }
        AddObject.BuildingId = id;
        Floor = selectBuliding.FloorList;
    }

    private void OnSetFloor(int id)
    {
        AddObject.BuildingId = id;   
    }

    private void SaveRow()
    {
        // if (string.IsNullOrWhiteSpace(newRoom.RoomName) ||
        //     string.IsNullOrWhiteSpace(newRoom.BuildingName) ||
        //     int?.IsNullOrWhiteSpace(newRoom.FloorID))
        // {
        //     JS.InvokeVoidAsync("alert","값이 비어있습니다.");
        // }
        // else
        // {
        //     Locations.Add(newLocation);
        // }
        // newLocation = new LocationDTO();
        // AddMode.InvokeAsync();
    }
    
}
