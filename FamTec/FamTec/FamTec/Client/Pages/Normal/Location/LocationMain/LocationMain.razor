@page "/basic/locations"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO

<div class="location-container">
    <div class="location-floor">
        <Floor ListData="@BuildingList" />
    </div>
    <div class="location-location">
        <Location BuildingFloor="@BuildingList" />
    </div>
</div>

@code {


    List<BuildingFloorListDTO> BuildingList;

    protected override async Task OnInitializedAsync()
    {
        await OnLoadBuilding();
    }

    private async Task OnLoadBuilding()
    {
    try
        {
            ResponseList<BuildingFloorListDTO> resGet = await apiManager.GetListAsync<BuildingFloorListDTO>("Building/sign/PlaceBuildingList");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "건물 조회 실패");
                return;
            }
            BuildingList = resGet.data;

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "건물 조회 실패");
            Console.WriteLine("[Basic][Location] 건물 조회 에러!" + ex);
        }

    }
}












@* 


 @using System.Collections.Generic

@code {
    public class TableData
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    }


    private List<TableData> tableDataList = new List<TableData>
    {
        new TableData { Id = 1, Name = "Item1", Value = "Value1" },
        new TableData { Id = 2, Name = "Item2", Value = "Value2" },
        new TableData { Id = 3, Name = "Item3", Value = "Value3" }
    };

    private TableData newTableData = new TableData();
    private bool isAddingRow = false;

    private void AddRow()
    {
        isAddingRow = true;
        newTableData = new TableData { Id = tableDataList.Count + 1 };
    }

    private void SaveRow()
    {
        tableDataList.Add(newTableData);
        isAddingRow = false;
    }

    private void CancelAddRow()
    {
        isAddingRow = false;
    }

    private void RemoveRow(TableData data)
    {
        tableDataList.Remove(data);
    }
}

<h3>Dynamic Table</h3>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Value</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var data in tableDataList)
        {
            <tr>
                <td>@data.Id</td>
                <td>@data.Name</td>
                <td>@data.Value</td>
                <td>
                    <button class="btn btn-danger" @onclick="() => RemoveRow(data)">Remove</button>
                </td>
            </tr>
        }
        @if (isAddingRow)
        {
            <tr>
                <td>@newTableData.Id</td>
                <td><input type="text" @bind="newTableData.Name" class="form-control" /></td>
                <td><input type="text" @bind="newTableData.Value" class="form-control" /></td>
                <td>
                    <button class="btn btn-primary" @onclick="SaveRow">Save</button>
                    <button class="btn btn-secondary" @onclick="CancelAddRow">Cancel</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-primary" @onclick="AddRow" disabled="@(isAddingRow)">Add Row</button> *@