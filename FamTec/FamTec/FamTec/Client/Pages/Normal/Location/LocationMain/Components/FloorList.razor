@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Modal
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO


<ul class="floor-ul">
    @if (Buildings == null)
    {
        <Loading/>
    }
    else
    {
        @foreach (var building in Buildings.Select((value, idx) => (value, idx)))
        {
            <li class="floor-li" tabindex="@building.idx">
                <div class="li-wrap">
                    <span class="title">@building.value.Name</span>
                    @if (EditMode)
                    {
                        <div class="center">
                            <PlusButton OnClick="@(()=> OnAddModal(building.value.Id.Value, building.value.Name))" />
                        </div>

                    }

                </div>

                <ul class="floor-inner-ul">
                    @foreach (var floor in building.value.FloorList.Select((v, idx) => (v, idx)))
                    {
                        <li class="floor-inner-li" tabindex="@floor.idx">
                            @* @onclick="@(EditMode ? () => OnUpdateModal(floor.v.Id.Value, floor.v.Name) : null)" *@
                            <span class="inner-title">
                                @floor.v.Name
                            </span>
                            @if (EditMode)
                            {
                                <div class="btns">
                                    <EditButton OnClick="@(()=>OnUpdateModal(floor.v.Id.Value , floor.v.Name) )" />
                                    <XButton OnClick="()=>OnDelMode(floor.v.Id.Value)" />
                                </div>
                                @* <input type="checkbox" @onchange="(e)=>OnChecked(e,floor.v.Id.Value)" /> *@

                            }
                        </li>
                    }
                </ul>

            </li>
        }
    }
    
</ul>
@* 추가 모달 *@
@if (EditMode && _addModal)
{
    <ModalBackground>
        <ChildComponent>
            <AddFloor
                BuildingId="@_addBuildingId"
                BuildingName="@_addBuildingName"
                OnLoadFloor=OnLoadFloor
                OnClose="OnCancle"
                />
        </ChildComponent>
    </ModalBackground>
}

@* 수정모달 *@
@if (EditMode && _updateModal)
{
    <ModalBackground>
        <ChildComponent>
            <UpdateFloor FloorId="@_updateFloorId"
                      FloorName="@_updateFloorName"
                      OnLoadFloor=OnLoadFloor
                        OnClose="OnCancleUpdateModal" />
        </ChildComponent>
    </ModalBackground>
}

@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDelete" OnCancel="OnDelClose" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    [Parameter] public List<BuildingFloorListDTO> Buildings { get; set; }
    [Parameter] public EventCallback OnLoadFloor { get; set; }
    [Parameter] public bool EditMode { get; set; }

    //층 추가 정보 변수
    private bool _addModal = false;
    private int _addBuildingId;
    private string _addBuildingName;

    //층 수정 정보 변수
    private bool _updateModal = false;
    private int _updateFloorId;
    private string _updateFloorName;

    //삭제 변수
    List<int> DelList = new List<int>();
    bool isDel = false;

    //층 추가 모달 활성화
    private void OnAddModal(int id, string name)
    {
        _addModal = true;
        _addBuildingId = id;
        _addBuildingName = name;
    }

    //층 수정 모달 활성화
    private void OnUpdateModal(int floorid, string floorname)
    {
        _updateModal = true;
        _updateFloorId = floorid;
        _updateFloorName = floorname;
    }



    private async void OnDelete()
    {
        try
        {
            Console.WriteLine(DelList[0]);
            ResponseUnit<bool?> resDel = await apiManager.PostAsync<bool?>("Floor/sign/DeleteFloor", DelList);
            if (resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoadFloor.InvokeAsync();
            DelList.Clear();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "[위치][층] 삭제 에러!");
        }
    }

    private void OnCancleUpdateModal()
    {
        _updateModal = false;
    }


    //층 추가 모달 캔슬
    private void OnCancle()
    {
        _addModal = false;
    }

    private void OnDelMode(int floorId)
    {
        DelList.Clear();
        isDel = true;
        DelList.Add(floorId);
    }

    private void OnDelClose()
    {
        isDel = false ;
    }
}
