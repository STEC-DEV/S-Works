@typeparam T


<ul class="selectbox @(EditMode ? "" : "none")">
    <label 
        class="display @(IsActive ? "active" : "")" 
        @onclick=OnActive
    >
        @if(SelectName == null)
        {
            <span class="display-title">Select</span>
        }
        else
        {
            <span class="display-title">
                @SelectName
            </span>
        }
    </label>
    <ul class="options @(IsActive && SelectData != null? "active" : "")">
        <li class="option-item" @onclick="() => OnSelectRow(null)">
            Select
        </li>
        @if (SelectData != null && SelectData.Any())
        {
            @foreach (var selectRow in SelectData)
            {
                try
                {

                    <li class="option-item" @onclick="() => OnSelectRow(selectRow)">
                        @selectRow.GetType().GetProperty("Name").GetValue(selectRow)
                    </li>
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing row: {ex.Message}");
                }
            }
        }
    </ul>
</ul>

@code {
    [Parameter] public string Key { get; set; }
    [Parameter] public List<T> SelectData { get; set; }
    [Parameter] public int Value{ get; set; }
    [Parameter] public EventCallback<int> OnChange { get; set; } //선택 값 반환 이벤트
    [Parameter] public bool EditMode {get;set;}


    public string SelectName = "Select";
    public bool IsActive { get; set; } = false;


    protected override Task OnParametersSetAsync()
    {        

        return base.OnParametersSetAsync();
    }

    public void Reset()
    {
        SelectName = "Select";
        StateHasChanged();
    }

    //선택 값id를 리턴해줘야함 나중에 DTO 전체 ID로 변경
    public void OnSelectRow(object row)
    {
        
        if(row == null)
        {
            SelectName = "Select";
            OnChange.InvokeAsync(0);
            OnActive();
            return;
        }
        int id = (int)row.GetType().GetProperty("Id").GetValue(row);
        SelectName = row.GetType().GetProperty("Name").GetValue(row).ToString();

        OnChange.InvokeAsync(id);
        OnActive();
        StateHasChanged();
    }

    public void OnActive()
    {
        IsActive = !IsActive;
    }

}
