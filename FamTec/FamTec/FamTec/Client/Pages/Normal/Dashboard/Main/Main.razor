@page "/dashboard"
@using System.Globalization
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Dashboard.Main.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Dashboard
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="grid padding">
    @if(placeVocPerm){

        <ColumnBarChart Title="민원처리현황(최근 7일)" Data="vocWeekData" PropertyName="vocWeekPropery" PropertyTrans="vocWeekProperyDic" />        
        <DonutChart Title="민원발생현황" Data="vocCurrentData" PropertyName="vocWeekPropery" />
        <RowBarChart Title="유형별 민원발생현황" Data="vocByTypeDayData" PropertyName="vocTypeProperty" />
        <LineChart Title="유형별 민원발생추이(최근 7일)" Data="vocByTypeWeekData" PropertyName="vocTypeProperty" PropertyTrans="vocTypePropertyDic" />
    }
    @if(placeMaterialPerm){
        <ListDonutChart Title="품목별 재고" Data="inventoryAmount" />
    }
    @if (placeMachinePerm || placeElecPerm || placeLiftPerm || placeFirePerm ||
    placeConstructPerm || placeNetworkPerm || placeBeautyPerm || placeSecurityPerm)
    {
        <LineChart Title="유지보수건수(최근 7일)" Data="maintenanceWeekData" PropertyName="maintenaceTypeProperty" PropertyTrans="maintenaceTypePropertyDic" />
        <StackBarChart Title="유지보수비용추이(1년)" Data="maintenanceYearPriceData" PropertyName="maintenaceTypeProperty" PropertyTrans="maintenaceTypePropertyDic" />
    }

</div>


@code {
    //민원처리현황 -바
    List<VocWeekStatusCountDTO> vocWeekData;
    //민원발생현황 -도넛
    VocDaysStatusCountDTO vocCurrentData;
    //유형별 민원발생추이
    List<VocWeekCountDTO> vocByTypeWeekData;
    //유형별 민원발생현황
    VocDaysCountDTO vocByTypeDayData;


    //품목별 재고
    List<InventoryAmountDTO> inventoryAmount;

    //유지보수건수
    List<MaintenanceWeekCountDTO> maintenanceWeekData;
    //유지보수비용(1년)
    List<MaintenanceYearPriceDTO> maintenanceYearPriceData;

    List<string> vocWeekPropery = new List<string>{
        "Total",
        "UnProcessed",
        "Processing",
        "Completed"
    };
    Dictionary<string, string> vocWeekProperyDic = new Dictionary<string, string>()
    {
        {"Total","전체"},
        {"UnProcessed","미처리"},
        { "Processing","처리중"},
        {"Completed","처리완료"},
    };
    List<string> vocTypeProperty = new List<string>{
        "DefaultType",
        "MachineType",
        "ElecType",
        "liftType",
        "FireType",
        "ConstructType",
        "NetWorkType",
        "BeautyType",
        "SecurityType",
    };
    Dictionary<string, string> vocTypePropertyDic = new Dictionary<string, string>()
    {
        {"DefaultType","미분류"},
        {"MachineType","기계"},
        { "ElecType","전기"},
        {"liftType","승강"},
        {"FireType","소방"},
        {"ConstructType","건축"},
        {"NetWorkType","통신"},
        {"BeautyType","미화"},
        {"SecurityType","보안"},
    };
    List<string> maintenaceTypeProperty = new List<string>{
        "MachineType",
        "ElecType",
        "liftType",
        "FireType",
        "ConstructType",
        "NetWorkType",
        "BeautyType",
        "SecurityType",
    };
    Dictionary<string, string> maintenaceTypePropertyDic = new Dictionary<string, string>();


    bool showDataLabels = false;

    bool placeVocPerm = false;
    bool placeMaterialPerm = false;
    bool placeMachinePerm = false;
    bool placeElecPerm = false;
    bool placeLiftPerm = false;
    bool placeFirePerm = false;
    bool placeConstructPerm = false;
    bool placeNetworkPerm = false;
    bool placeBeautyPerm = false;
    bool placeSecurityPerm = false;




    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        placeVocPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Voc");
        placeMaterialPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Material");
        placeMachinePerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Machine");
        placeElecPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Elec");
        placeLiftPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Lift");
        placeFirePerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Fire");
        placeConstructPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Construct");
        placeNetworkPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Network");
        placeBeautyPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Beauty");
        placeSecurityPerm = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Security");

        await OnPropertyFacility();
        // await OnLoadVocWeekData();
        // await OnLoadCurrentVoc();
        OnMockupVocDay();
        OnMockupVocWeek();
        await OnLoadVocByType();
        await OnLoadVocByTypeDay();
        await OnLoadInventorybyMaterial();
        await OnLoadMaintenaceCountWeek();
        await OnLoadMaintenaceYaerPrice();
        /**/

        /* 병렬작업 [선택]
        await base.OnInitializedAsync();

        var permissionTasks = new[]
        {
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Voc"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Material"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Machine"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Elec"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Lift"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Fire"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Construct"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Network"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Beauty"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Security")
        };

        OnMockupVocDay();
        OnMockupVocWeek();

        var remainingTasks = permissionTasks.ToList();
        while (remainingTasks.Any())
        {
            var completedTask = await Task.WhenAny(remainingTasks);
            remainingTasks.Remove(completedTask);

            var result = await completedTask;
            if (completedTask == permissionTasks[0]) placeVocPerm = result;
            else if (completedTask == permissionTasks[1]) placeMaterialPerm = result;
            else if (completedTask == permissionTasks[2]) placeMachinePerm = result;
            else if (completedTask == permissionTasks[3]) placeElecPerm = result;
            else if (completedTask == permissionTasks[4]) placeLiftPerm = result;
            else if (completedTask == permissionTasks[5]) placeFirePerm = result;
            else if (completedTask == permissionTasks[6]) placeConstructPerm = result;
            else if (completedTask == permissionTasks[7]) placeNetworkPerm = result;
            else if (completedTask == permissionTasks[8]) placeBeautyPerm = result;
            else if (completedTask == permissionTasks[9]) placeSecurityPerm = result;
        }

        var otherTasks = new[]
        {
            OnPropertyFacility(),
            OnLoadVocByType(),
            OnLoadVocByTypeDay(),
            OnLoadInventorybyMaterial(),
            OnLoadMaintenaceCountWeek(),
            OnLoadMaintenaceYaerPrice()
        };

        foreach (var task in otherTasks)
        {
            await task;
            StateHasChanged();
        }
        */
    }

    //권한에 따라 property 설정(설비)
    private async Task OnPropertyFacility()
    {
        // 권한에 따라 동적으로 항목을 추가할 Dictionary
        // 권한이 true일 경우 Dictionary에 Key/Value를 추가
        if (placeMachinePerm)
            maintenaceTypePropertyDic.Add("MachineType", "기계");

        if (placeElecPerm)
            maintenaceTypePropertyDic.Add("ElecType", "전기");

        if (placeLiftPerm)
            maintenaceTypePropertyDic.Add("liftType", "승강");

        if (placeFirePerm)
            maintenaceTypePropertyDic.Add("FireType", "소방");

        if (placeConstructPerm)
            maintenaceTypePropertyDic.Add("ConstructType", "건축");

        if (placeNetworkPerm)
            maintenaceTypePropertyDic.Add("NetWorkType", "통신");

        if (placeBeautyPerm)
            maintenaceTypePropertyDic.Add("BeautyType", "미화");

        if (placeSecurityPerm)
            maintenaceTypePropertyDic.Add("SecurityType", "보안");
    }


    //민원처리현황 데이터 조회
    private async Task OnLoadVocWeekData(){
        try{
            ResponseList<VocWeekStatusCountDTO> resGet = await apiManager.GetListAsync<VocWeekStatusCountDTO>("Voc/sign/v2/GetVocWeeksStatusCount");
            if(resGet.code != 200){
                await JS.InvokeVoidAsync("alert", "민원 1주일 데이터 조회 실패");
                return;
            }
            if(resGet.data == null) {
                vocWeekData = new List<VocWeekStatusCountDTO>();
                return;
            }
            vocWeekData = resGet.data;


        }catch(Exception ex){
            Console.WriteLine("민원처리현황 : "+ex);
        }
    }

    //민원발생현황 데이터
    private async Task OnLoadCurrentVoc(){
        try{
            ResponseUnit<VocDaysStatusCountDTO> resGet = await apiManager.GetUnitAsync<VocDaysStatusCountDTO>("Voc/sign/v2/GetVocDaysStatusCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocCurrentData = new VocDaysStatusCountDTO();
                return;
            }
            vocCurrentData = resGet.data;
        }catch(Exception ex){
            Console.WriteLine("민원발생현황 : " + ex);
        }
    }

    //유형별 민원발생현황(최근7일)
    private async Task OnLoadVocByType(){
        try
        {
            ResponseList<VocWeekCountDTO> resGet = await apiManager.GetListAsync<VocWeekCountDTO>("Voc/sign/v2/GetVocWeekCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocByTypeWeekData = new List<VocWeekCountDTO>();
                return;
            }
            vocByTypeWeekData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유형별 민원발생현황(7) : " + ex);
        }
    }

    //유형별 민원발생현황
    private async Task OnLoadVocByTypeDay()
    {
        try
        {
            ResponseUnit<VocDaysCountDTO> resGet = await apiManager.GetUnitAsync<VocDaysCountDTO>("Voc/sign/v2/GetVocDaysCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocByTypeDayData = new VocDaysCountDTO();
                return;
            }
            vocByTypeDayData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유형별 민원발생현황 : " + ex);
        }
    }


    //==============================================
    // 자재

    //품목별 재고
    private async Task OnLoadInventorybyMaterial(){
        try
        {
            ResponseList<InventoryAmountDTO> resGet = await apiManager.GetListAsync<InventoryAmountDTO>("Store/sign/v2/GetInventoryAmount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "품목별 재고 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                inventoryAmount = new List<InventoryAmountDTO>();
                return;
            }
            inventoryAmount = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("품목별 재고 실패: " + ex);
        }
    }

    //================================================
    //유지보수
    
    //유지보수 건수
    private async Task OnLoadMaintenaceCountWeek()
    {
        try
        {
            ResponseList<MaintenanceWeekCountDTO> resGet = await apiManager.GetListAsync<MaintenanceWeekCountDTO>("Maintenance/sign/v2/GetMaintenanceCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "유지보수건수 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                maintenanceWeekData = new List<MaintenanceWeekCountDTO>();
                return;
            }
            maintenanceWeekData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유지보수건수 조회 실패: " + ex);
        }
    }
    //유지보수 비용 (1년)
    private async Task OnLoadMaintenaceYaerPrice()
    {
        try
        {
            ResponseList<MaintenanceYearPriceDTO> resGet = await apiManager.GetListAsync<MaintenanceYearPriceDTO>("Maintenance/sign/v2/GetMaintenanceYearPrice");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "유지보수비용추이 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                maintenanceYearPriceData = new List<MaintenanceYearPriceDTO>();
                return;
            }
            maintenanceYearPriceData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유지보수비용추이 조회 실패: " + ex);
        }
    }



    private void OnMockupVocDay(){
        vocCurrentData = new VocDaysStatusCountDTO
            {
                Total = 16,
                UnProcessed = 5,
                Processing = 3,
                Completed = 8,
            };
    }

    private void OnMockupVocWeek()
    {
        vocWeekData = new List<VocWeekStatusCountDTO>
   {
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 7).ToString("MM.dd"),
           Total = 16,
           UnProcessed = 5,
           Processing = 3,
           Completed = 8,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 8).ToString("MM.dd"),
           Total = 23,
           UnProcessed = 7,
           Processing = 4,
           Completed = 12,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 9).ToString("MM.dd"),
           Total = 25,
           UnProcessed = 4,
           Processing = 6,
           Completed = 15,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 10).ToString("MM.dd"),
           Total = 23,
           UnProcessed = 8,
           Processing = 5,
           Completed = 10,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 11).ToString("MM.dd"),
           Total = 27,
           UnProcessed = 6,
           Processing = 8,
           Completed = 13,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 12).ToString("MM.dd"),
           UnProcessed = 3,
           Processing = 7,
           Completed = 18,
           Total = 28
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 1, 13).ToString("MM.dd"),
           Total = 29,
           UnProcessed = 5,
           Processing = 4,
           Completed = 20,
       }
   };
    }
}




