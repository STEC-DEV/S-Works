@page "/dashboard"
@using System.Globalization
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Dashboard.Main.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Dashboard
@using FamTec.Shared.Server.DTO
@using Microsoft.AspNetCore.SignalR.Client
@inherits PermissionComponentBase

@if (dashboardLoading)
{

    <Loading />

}
else
{
    <div class="grid padding">

        @if (placeVocPerm)
        {
            <VocStatusBoard Data="vocCurrentData" SubData="vocByTypeDayData" ColumnBarData="vocWeekData" ColPropertyTrans="vocWeekProperyDic" LineBarData="vocByTypeWeekData" LinePropertyTrans="vocTypePropertyDic" />
            <ColumnBarChart title="민원처리현황(최근 7일)" Data="vocWeekData" PropertyTrans="vocWeekProperyDic" />
            @* <donutchart title="민원발생현황" data="voccurrentdata" propertyname="vocweekpropery" /> *@
            //<RowBarChart title="유형별 민원발생현황" Data="vocByTypeDayData" PropertyName="vocTypeProperty" />
            <LineChart title="유형별 민원발생추이(최근 7일)" Data="vocByTypeWeekData" propertytrans="vocTypePropertyDic" />
        }
        @if (placeMaterialPerm)
        {
            <ListDonutChart Title="품목별 재고" Data="inventoryAmount" AllMaterialData="materialList" @bind-SelectedData="selectedInventory" OnChangeMaterial="PostChangeMaterial" />
        }
        @if (placeVocPerm)
        {
            //<LineChart title="유형별 민원발생추이(최근 7일)" Data="vocByTypeWeekData" propertytrans="vocTypePropertyDic" />
        }
        @if (placeMachinePerm || placeElecPerm || placeLiftPerm || placeFirePerm ||
    placeConstructPerm || placeNetworkPerm || placeBeautyPerm || placeSecurityPerm)
        {
            <LineChart Title="유지보수건수(최근 7일)" Data="maintenanceWeekData" PropertyName="maintenaceTypeProperty" PropertyTrans="maintenaceTypePropertyDic" />
            <StackBarChart Title="유지보수비용추이(1년)" Data="maintenanceYearPriceData" PropertyName="maintenaceTypeProperty" PropertyTrans="maintenaceTypePropertyDic" />
        }

    </div>

}


@code {
    private bool dashboardLoading = true;

    //민원처리현황 -바
    List<VocWeekStatusCountDTO> vocWeekData;
    //민원발생현황 -도넛
    VocDaysStatusCountDTO vocCurrentData;
    //유형별 민원발생추이
    List<VocWeekCountDTO> vocByTypeWeekData;
    //유형별 민원발생현황
    VocDaysCountDTO vocByTypeDayData;


    //품목별 재고
    List<InventoryAmountDTO> inventoryAmount;
    //전체 품목
    List<ShowMaterialIdxDTO> materialList;
    //품목별 재고 선택 항목
    List<ShowMaterialIdxDTO> selectedInventory = new List<ShowMaterialIdxDTO>();

    //유지보수건수
    List<MaintenanceWeekCountDTO> maintenanceWeekData;
    //유지보수비용(1년)
    List<MaintenanceYearPriceDTO> maintenanceYearPriceData;



    bool maintenanceYearPriceDataIsLoading = true;

    List<string> vocWeekPropery = new List<string>{
        "Total",
        "UnProcessed",
        "Processing",
        "Completed"
    };
    Dictionary<string, string> vocWeekProperyDic = new Dictionary<string, string>()
    {
        {"Total","전체"},
        {"UnProcessed","미처리"},
        { "Processing","처리중"},
        {"Completed","처리완료"},
    };
    List<string> vocTypeProperty = new List<string>{
        "DefaultType",
        "MachineType",
        "ElecType",
        "liftType",
        "FireType",
        "ConstructType",
        "NetWorkType",
        "BeautyType",
        "SecurityType",
    };
    Dictionary<string, string> vocTypePropertyDic = new Dictionary<string, string>()
    {
        {"DefaultType","미분류"},
        {"MachineType","기계"},
        { "ElecType","전기"},
        {"liftType","승강"},
        {"FireType","소방"},
        {"ConstructType","건축"},
        {"NetWorkType","통신"},
        {"BeautyType","미화"},
        {"SecurityType","보안"},
    };
    List<string> maintenaceTypeProperty = new List<string>{
        "MachineType",
        "ElecType",
        "liftType",
        "FireType",
        "ConstructType",
        "NetWorkType",
        "BeautyType",
        "SecurityType",
    };
    Dictionary<string, string> maintenaceTypePropertyDic = new Dictionary<string, string>();


    bool showDataLabels = false;


    bool placeVocPerm = false;
    bool placeMaterialPerm = false;
    bool placeMachinePerm = false;
    bool placeElecPerm = false;
    bool placeLiftPerm = false;
    bool placeFirePerm = false;
    bool placeConstructPerm = false;
    bool placeNetworkPerm = false;
    bool placeBeautyPerm = false;
    bool placeSecurityPerm = false;



    protected override void OnInitialized()
    {


    }

    protected override async Task OnInitializedAsync()
    {
        /**/

        /* 병렬작업 [선택]*/
        await base.OnInitializedAsync();

        var permissionTasks = new[]
        {
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Voc"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Material"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Machine"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Elec"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Lift"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Fire"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Construct"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Network"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Beauty"),
            (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Security")
        };



        var results = await Task.WhenAll(permissionTasks);

        placeVocPerm = results[0];
        placeMaterialPerm = results[1];
        placeMachinePerm = results[2];
        placeElecPerm = results[3];
        placeLiftPerm = results[4];
        placeFirePerm = results[5];
        placeConstructPerm = results[6];
        placeNetworkPerm = results[7];
        placeBeautyPerm = results[8];
        placeSecurityPerm = results[9];

        //4.설비 권한설정
        await OnPropertyFacility();

        // 5. 실제 데이터 로딩은 병렬로 처리하되 배치 처리
        var dataTasks = new List<Task>();

        if (placeVocPerm)
        {
            dataTasks.AddRange(new[] {
            OnLoadVocWeekData(),
            OnLoadCurrentVoc(),
            OnLoadVocByType(),
            OnLoadVocByTypeDay()
        });
        }


        // 5-1. 모의 데이터는 즉시 설정
        //OnMockupVocDay();
        //OnMockupVocWeek();
        await GetAllMaterialList();
        if (placeMaterialPerm)
        {
            Console.WriteLine("실행");
            dataTasks.Add(OnLoadInventorybyMaterial());
        }

        await OnLoadMaintenaceCountWeek();
        await OnLoadMaintenaceYaerPrice();

        // 6. 데이터 로딩을 배치로 처리
        while (dataTasks.Any())
        {
            var batch = dataTasks.Take(3).ToList(); // 한 번에 3개씩 처리
            dataTasks.RemoveRange(0, Math.Min(3, dataTasks.Count));

            await Task.WhenAll(batch);
            await Task.Delay(10); // UI 업데이트를 위한 짧은 지연
        }

        dashboardLoading = false;

        await OnConnectionSocket();
        // await Socket();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Socket(); // 첫 렌더링 후에도 Socket 메서드 호출
        }
    }


    //권한에 따라 property 설정(설비)
    private async Task OnPropertyFacility()
    {
        // 권한에 따라 동적으로 항목을 추가할 Dictionary
        // 권한이 true일 경우 Dictionary에 Key/Value를 추가
        if (placeMachinePerm)
            maintenaceTypePropertyDic.Add("MachineType", "기계");

        if (placeElecPerm)
            maintenaceTypePropertyDic.Add("ElecType", "전기");

        if (placeLiftPerm)
            maintenaceTypePropertyDic.Add("liftType", "승강");

        if (placeFirePerm)
            maintenaceTypePropertyDic.Add("FireType", "소방");

        if (placeConstructPerm)
            maintenaceTypePropertyDic.Add("ConstructType", "건축");

        if (placeNetworkPerm)
            maintenaceTypePropertyDic.Add("NetWorkType", "통신");

        if (placeBeautyPerm)
            maintenaceTypePropertyDic.Add("BeautyType", "미화");

        if (placeSecurityPerm)
            maintenaceTypePropertyDic.Add("SecurityType", "보안");
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnLoadInventorybyMaterial();
    }


    //민원처리현황 데이터 조회
    private async Task OnLoadVocWeekData()
    {
        try
        {
            ResponseList<VocWeekStatusCountDTO> resGet = await apiManager.GetListAsync<VocWeekStatusCountDTO>("Voc/sign/v2/GetVocWeeksStatusCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원 1주일 데이터 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocWeekData = new List<VocWeekStatusCountDTO>();
                return;
            }
            vocWeekData = resGet.data;

        }
        catch (Exception ex)
        {
            Console.WriteLine("민원처리현황 : " + ex);
        }
    }

    //민원발생현황 데이터
    private async Task OnLoadCurrentVoc()
    {
        try
        {
            ResponseUnit<VocDaysStatusCountDTO> resGet = await apiManager.GetUnitAsync<VocDaysStatusCountDTO>("Voc/sign/v2/GetVocDaysStatusCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocCurrentData = new VocDaysStatusCountDTO();
                return;
            }
            vocCurrentData = resGet.data;

        }
        catch (Exception ex)
        {
            Console.WriteLine("민원발생현황 : " + ex);
        }
    }

    //유형별 민원발생현황(최근7일)
    private async Task OnLoadVocByType()
    {
        try
        {
            ResponseList<VocWeekCountDTO> resGet = await apiManager.GetListAsync<VocWeekCountDTO>("Voc/sign/v2/GetVocWeekCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocByTypeWeekData = new List<VocWeekCountDTO>();
                return;
            }
            vocByTypeWeekData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유형별 민원발생현황(7) : " + ex);
        }
    }

    //유형별 민원발생현황
    private async Task OnLoadVocByTypeDay()
    {
        try
        {
            ResponseUnit<VocDaysCountDTO> resGet = await apiManager.GetUnitAsync<VocDaysCountDTO>("Voc/sign/v2/GetVocDaysCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "민원발생현황 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                vocByTypeDayData = new VocDaysCountDTO();
                return;
            }
            vocByTypeDayData = resGet.data;

        }
        catch (Exception ex)
        {
            Console.WriteLine("유형별 민원발생현황 : " + ex);
        }
    }


    //==============================================
    // 자재

    //품목별 재고
    private async Task OnLoadInventorybyMaterial()
    {
        try
        {

            List<int> selected = new List<int>();
            if (selectedInventory != null)
            {
                selected = selectedInventory.Where(m => m.DashBoardYN == true).Select(m => m.Id).ToList();
<<<<<<< HEAD
                // if(selected.Count() == 0)
                // {
                //     inventoryAmount = new List<InventoryAmountDTO>();
                //     return;
                // }

=======
                if(selected.Count == 0)
                {
                    inventoryAmount = new List<InventoryAmountDTO>();
                    return;
                }
>>>>>>> origin/Front
                string ids = string.Join("&MaterialIdx=", selected);

                ResponseList<InventoryAmountDTO> resGet = await apiManager.GetListAsync<InventoryAmountDTO>($"Store/sign/v2/GetInventoryAmount?MaterialIdx={ids}");
                if (resGet.code != 200)
                {
                    await JS.InvokeVoidAsync("alert", "품목별 재고 조회 실패");
                    return;
                }
                if (resGet.data == null)
                {
                    inventoryAmount = new List<InventoryAmountDTO>();
                    return;
                }
                inventoryAmount = resGet.data;
            }
            else
            {
                inventoryAmount = new List<InventoryAmountDTO>();
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("품목별 재고 실패: " + ex);
        }
    }


    //사업장 품목인덱스 리턴
    private async Task GetAllMaterialList()
    {
        try
        {
            ResponseList<ShowMaterialIdxDTO> resGet = await apiManager.GetListAsync<ShowMaterialIdxDTO>("Material/sign/v2/GetDashBoardMaterialIdx");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "품목 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                selectedInventory = new List<ShowMaterialIdxDTO>();
                return;
            }
            materialList = resGet.data;

            selectedInventory = materialList.Where(m => m.DashBoardYN == true).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine("품목 조회 실패 : " + ex);
        }
    }

    //대시보드 품목 변경
    private async Task PostChangeMaterial()
    {
        try
        {
            Console.WriteLine("수 :" + selectedInventory.Count());
            List<int> selected = new List<int>();
            selected = selectedInventory.Select(m => m.Id).ToList();
            ResponseUnit<bool> resPost = await apiManager.PostAsync<bool>("Material/sign/v2/SetDashBoardMaterial", selected);
            if (resPost.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "품목 변경 실패");
                return;
            }

            await GetAllMaterialList();
            await OnLoadInventorybyMaterial();

        }
        catch (Exception ex)
        {

        }
    }

    //================================================
    //유지보수

    //유지보수 건수
    private async Task OnLoadMaintenaceCountWeek()
    {
        try
        {
            ResponseList<MaintenanceWeekCountDTO> resGet = await apiManager.GetListAsync<MaintenanceWeekCountDTO>("Maintenance/sign/v2/GetMaintenanceCount");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "유지보수건수 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                maintenanceWeekData = null;
                return;
            }
            maintenanceWeekData = resGet.data;

        }
        catch (Exception ex)
        {
            Console.WriteLine("유지보수건수 조회 실패: " + ex);
        }
    }
    //유지보수 비용 (1년)
    private async Task OnLoadMaintenaceYaerPrice()
    {
        try
        {
            ResponseList<MaintenanceYearPriceDTO> resGet = await apiManager.GetListAsync<MaintenanceYearPriceDTO>("Maintenance/sign/v2/GetMaintenanceYearPrice");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "유지보수비용추이 조회 실패");
                return;
            }
            if (resGet.data == null)
            {
                maintenanceYearPriceData = null;

                return;
            }
            maintenanceYearPriceData = resGet.data;
        }
        catch (Exception ex)
        {
            Console.WriteLine("유지보수비용추이 조회 실패: " + ex);
        }
    }



    private void OnMockupVocDay()
    {
        vocCurrentData = new VocDaysStatusCountDTO
            {
                Total = 16,
                UnProcessed = 5,
                Processing = 3,
                Completed = 8,
            };
    }

    private void OnMockupVocWeek()
    {
        vocWeekData = new List<VocWeekStatusCountDTO>
   {
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 8).ToString("MM.dd"),
           Total = 16,
           UnProcessed = 5,
           Processing = 3,
           Completed = 8,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 9).ToString("MM.dd"),
           Total = 23,
           UnProcessed = 7,
           Processing = 4,
           Completed = 12,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 10).ToString("MM.dd"),
           Total = 25,
           UnProcessed = 4,
           Processing = 6,
           Completed = 15,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 11).ToString("MM.dd"),
           Total = 23,
           UnProcessed = 8,
           Processing = 5,
           Completed = 10,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 12).ToString("MM.dd"),
           Total = 27,
           UnProcessed = 6,
           Processing = 8,
           Completed = 13,
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 13).ToString("MM.dd"),
           UnProcessed = 3,
           Processing = 7,
           Completed = 18,
           Total = 28
       },
       new VocWeekStatusCountDTO
       {
           Date = new DateTime(2025, 2, 14).ToString("MM.dd"),
           Total = 29,
           UnProcessed = 5,
           Processing = 4,
           Completed = 20,
       }
   };
    }


    //소켓 연결
    private async Task OnConnectionSocket()
    {
        Console.WriteLine("실행");
        //사업장 권한 확인
        Dictionary<String, String> socketRoomName = new Dictionary<String, String>{
            {"voc", "_VocStatus"},
            {"material","_MaterialStatus"},
            {"facility","_MaintenanceStatus"},

       };

        if (!placeVocPerm)
        {
            socketRoomName.Remove("voc");
        }
        if (!placeMaterialPerm)
        {
            socketRoomName.Remove("material");
        }
        bool hasAnyFacilityPermission =
            placeMachinePerm ||
            placeElecPerm ||
            placeLiftPerm ||
            placeFirePerm ||
            placeConstructPerm ||
            placeNetworkPerm ||
            placeBeautyPerm ||
            placeSecurityPerm;

        // 모든 권한이 없는 경우에만 제거
        if (!hasAnyFacilityPermission)
        {
            socketRoomName.Remove("facility");
        }
        Console.WriteLine($"rotn : {socketRoomName.Count}");
        foreach (var item in socketRoomName)
        {

            try
            {
                Console.WriteLine(item.Value);
                await HubObject.hubConnection!.InvokeAsync("JoinRoomAsync", $"{PLACEIDX}{item.Value}");
                Console.WriteLine($"처리완료: {item.Key}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during processing {item.Key}: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
            }
            // Console.WriteLine($"가입할 방 {RoomName[perm.idx]}");



        }
    }

    //소켓 리시버 설정
    private async Task Socket()
    {
        bool IsConnected = HubObject.hubConnection.State == HubConnectionState.Connected;

        // HubConnection이 null이 아닌지 확인
        if (IsConnected)
        {

            // 메시지 수신 처리
            HubObject.hubConnection.On<string>("ReceiveVocStatus", async (message) =>
            {
                Console.WriteLine(message);
                await OnLoadVocWeekData();
                await OnLoadCurrentVoc();
                await OnLoadVocByType();
                await OnLoadVocByTypeDay();

                StateHasChanged(); // 상태 변경 알림
            });
            HubObject.hubConnection.On<string>("ReceiveMaterialStatus", async (message) =>
            {
                Console.WriteLine(message);
                await OnLoadInventorybyMaterial();
                await GetAllMaterialList();
                await PostChangeMaterial();
                StateHasChanged(); // 상태 변경 알림
            });
            HubObject.hubConnection.On<string>("ReceiveMaintenanceStatusStatus", async (message) =>
            {
                Console.WriteLine(message);
                await OnLoadMaintenaceCountWeek();
                await OnLoadMaintenaceYaerPrice();
                StateHasChanged(); // 상태 변경 알림
            });
        }


    }
}

