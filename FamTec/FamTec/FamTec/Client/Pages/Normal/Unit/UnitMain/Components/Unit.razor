@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Unit
@using FamTec.Shared.Server.DTO


<div class="unit yappear">
    <div class="unit-wrap">
        <div class="unit-header">
            <span class="title">
                단위 목록
            </span>
            @if (BASIC && DelUnits.Count > 0)
            {
                <Button 
                    Name="삭제"
                    Width=true
                    Type="1"
                    OnClick="OnIsDel" />
            }
            
        </div>
        <div class="contents">
            
            <div class="table-section">
                @if (SystemData == null)
                {
                    <Loading />
                }
                else
                {
                <UnitTable ListData="@SystemData"/>
                }
            </div>
            <div class="table-section">
                @if (UserData == null)
                {
                    <Loading />
                }
                else
                {
                <UnitTable ListData="@UserData"
                            CheckedItems="@DelUnits"
                           OnCheck="OnChecked" />
                }
            </div>
        </div>
    </div>
</div>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDelete" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    [Parameter] public List<UnitDTO> UserData { get; set; }
    [Parameter] public List<UnitDTO> SystemData { get; set; }
    [Parameter] public EventCallback OnLoadUnit { get; set; }
    List<int> DelUnits = new List<int>();

    bool isDel = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }



    //체크 선수 목록
    private void OnChecked(int id)
    {
        if (DelUnits.Contains(id))
        {
            DelUnits.Remove(id);
        }
        else
        {
            DelUnits.Add(id);
        }
    }

    private async Task OnDelete()
    {
        try
        {
            ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>("Unit/sign/DeleteUnitinfo",DelUnits);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoadUnit.InvokeAsync();
            DelUnits.Clear();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }

    private void OnIsDel()
    {
        isDel = !isDel;
    }
}
