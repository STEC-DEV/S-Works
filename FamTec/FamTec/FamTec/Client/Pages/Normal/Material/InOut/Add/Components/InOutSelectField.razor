@using FamTec.Client.Pages.CommonComponents.IconButton
@typeparam T

<div class="selectfield @(Row==true ? "row":"")">
    @if (!String.IsNullOrEmpty(Label))
    {
        <label class="label @(Required.Value ? "required" : "")">
            @Label
        </label>
    }

    <ul class="selectbox @(EditMode ? "" : "none")">
        <label class="display @(IsActive ? "active" : "")"
               @onclick=OnActive>
             <div class="display-row">
                    @if (SelectName == null)
                    {
                        <span class="display-title">선택</span>
                    }
                    else
                    {
                        <span class="display-title">
                            @SelectName
                        </span>
                    }
                    <div class="icon">
                        <DownTriangleButton />
                    </div>
               </div>
        </label>
        <ul class="options @(IsActive && SelectData != null? "active" : "")">
            @if (SelectData != null && SelectData.Any())
            {
                @foreach (var selectRow in SelectData)
                {
                    
                    <li class="option-item" @onclick="() => OnSelectRow(selectRow)">
                        <span class="item-text">@selectRow.GetType().GetProperty("RoomName").GetValue(selectRow)</span>
                        <span class="item-text">@selectRow.GetType().GetProperty("Num").GetValue(selectRow)</span>
                    </li>
                    
                }
            }
        </ul>
    </ul>

</div>

@code {
    [Parameter] public string Key { get; set; }
    [Parameter] public List<T> SelectData { get; set; }
    [Parameter] public int Value{ get; set; }
    [Parameter] public EventCallback<int> OnChange { get; set; } //선택 값 반환 이벤트
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    [Parameter] public bool EditMode {get;set;}
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool? Row { get; set; }
    [Parameter] public bool? Required { get; set; } = false;

    public string SelectName = "선택";
    public bool IsActive { get; set; } = false;

    private DotNetObjectReference<InOutSelectField<T>> _objRef;

    protected override void OnInitialized()
    {
        _objRef = DotNetObjectReference.Create(this); // **수정된 부분**
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateSelectName();
        await base.OnParametersSetAsync();
    }

    private async Task UpdateSelectName()
    {
        if (Value != 0 && SelectData != null)
        {
            var selectedItem = SelectData.FirstOrDefault(item => (int)item.GetType().GetProperty("RoomId")?.GetValue(item) == Value);
            if (selectedItem != null)
            {
                SelectName = selectedItem.GetType().GetProperty("RoomName")?.GetValue(selectedItem).ToString();
            }
            else
            {
                SelectName = "선택";
            }
        }
        else
        {
            SelectName = "선택";
        }
    }

    public async Task Reset()
    {
        Value = 0;
        SelectName = "선택";
        await ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }

    public async Task OnSelectRow(object row)
    {
        if (row == null)
        {
            Value = 0;
            SelectName = "선택";
        }
        else
        {
            int id = (int)row.GetType().GetProperty("RoomId").GetValue(row);
            Value = id;
            SelectName = row.GetType().GetProperty("RoomName").GetValue(row).ToString();
        }
        OnActive();
        await ValueChanged.InvokeAsync(Value);
        await OnChange.InvokeAsync(Value);
        
        StateHasChanged();
    }

    public void OnActive()
    {
        IsActive = !IsActive;
        if (IsActive)
        {
            JS.InvokeVoidAsync("clickHandler.addClickListener", _objRef);
        }
        else
        {
            JS.InvokeVoidAsync("clickHandler.removeClickListener", _objRef);
        }
    }
    //외부 영역 클릭

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    [JSInvokable]
    public void CloseSelectBox()
    {
        IsActive = false;
        StateHasChanged();
    }

}
