@page "/material/inout"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Material.InOut.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="inout yappear">
    <div class="inout-wrap">
        <div class="inout-header">
            <span class="title">
                입출고 목록
            </span>
            <div class="option">
                <Input Placeholder="목록에서 검색" ValueChanged="OnSearch" />
                @if (MATERIAL)
                {
                    <Button Name="등록"
                            Width=true
                            Type="0"
                            OnClick="OnAddMove" />
                }

            </div>
        </div>
         <div class="option-page">
                
            @if(totalPage > 1)
            {
                <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
            }
            <Viewer OnChanged="OnChangeViewNum" />
        </div>
        <div class="contents">
            <InOutTable ListData="@FilterList" />
        </div>
    </div>
</div>

@code {
    List<InOutListDTO> InOuts = new List<InOutListDTO>();
    List<InOutListDTO> FilterList = new List<InOutListDTO>();
    private string _searchText = "";


    int viewNum;
    private int currentPage;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadInOut();
        viewNum = 25;
        currentPage = 1;
        totalPage = 1;
        await Paging();
    }

    private async Task OnLoadInOut()
    {
        try
        {
            ResponseList<InOutListDTO> resGet = await apiManager.GetListAsync<InOutListDTO>("Store/sign/GetHistory");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }

            InOuts = resGet.data;
            FilterList = InOuts;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "입출고 목록 조회 에러");
        }
    }

    private async Task OnSearch(string text)
    {
        _searchText = text;
        FilterList = String.IsNullOrEmpty(_searchText)
                                ? InOuts
                                : InOuts.Where(m => (m.MaterialCode?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.MaterialName?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.RoomName?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                                        ).ToList();
        await InvokeAsync(StateHasChanged);
    }


    private void OnAddMove()
    {
        Navigation.NavigateTo("/material/inout/add");
    }



   
    //페이지 필터링
    private async Task Paging()
    {

        // Console.WriteLine("============페이징 실행============");
        if (InOuts == null || !InOuts.Any())
        {
            totalPage = 1;
            currentPage = 1;
            FilterList = new List<InOutListDTO>();

            StateHasChanged();
            return;
        }
        // Console.WriteLine("현현패" + currentPage);

        totalPage = (int)Math.Ceiling((double)InOuts.Count / viewNum);

        // Console.WriteLine("현페" + Math.Min(currentPage, totalPage));
        // Console.WriteLine("전체" + totalPage);

        currentPage = Math.Min(currentPage, totalPage);

        int skip = (currentPage - 1) * viewNum;
        FilterList = InOuts.Skip(skip).Take(viewNum).ToList();

        // Console.WriteLine($"[페이징] 전체 데이터 수: {InOuts?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        Console.WriteLine($": {currentPage}");
        await Paging();
    }

}
