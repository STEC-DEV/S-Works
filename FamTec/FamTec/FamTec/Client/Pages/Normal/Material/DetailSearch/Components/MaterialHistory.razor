@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Shared.Client.DTO.Normal.Location.Inventory
@using FamTec.Shared.Client.DTO.Normal.Material.Detail


<div class="history yappear">
    <div class="header">
        <span class="title">
            입출고 내역
        </span>
        @if (ListData !=null &&ListData.Count > 0)
        {
            <div class="options">
                <SelectField T=DetailMaterialListDTO
                             Key="material"
                             SelectData="@ListData"
                             @bind-Value=@MaterialId
                             EditMode="true" 
                             Half="true"
                             />
                    
                    @if (ListData.Count > 0)
                    {
                        <ExportButton OnClick="Export" />
                    }
            </div>
        }
        
        
    </div>
    <div class="filter">
        @if (totalPage > 1)
        {
            <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
        }
        <Viewer OnChanged="OnChangeViewNum" />
    </div>
    <div class="content">
        
        @if (FilterList == null && FilterList2 == null)
        {
            <Loading/>
        }
        else
        {
            <MaterialTable ListData="@pageList3" ListData2="@FilterList2" TotalPage="@totalPage" CurrentPage="@currentPage" />
        }
    </div>
</div>

@code {
    [Parameter] public List<DetailMaterialListDTO> ListData { get; set; }
    [Parameter] public string StartDt{ get; set; }
    [Parameter] public string EndDt{ get; set; }

    private int _materialId;
    int MaterialId
    {
        get => _materialId;
        set
        {
            _materialId = value;
            // FilterData();
            _ = InvokeAsync(async () => await FilterData());
        }
    }

    List<InventoryRecordDTO> FilterList;
    List<InventoryRecordDTO> pageList3;
    DetailMaterialListDTO FilterList2;
    string curDate;
    int viewNum;
    private int currentPage;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;

    protected override async Task OnInitializedAsync()
    {
        viewNum = 25;
        currentPage = 1;
        totalPage = 1;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(ListData != null && ListData.Any())
        {
            MaterialId = ListData[0].Id;
        }

        await FilterData();
    }

    //페이지 필터링
    private async Task Paging()
    {

        // Console.WriteLine("============페이징 실행============");
        if (FilterList == null || !FilterList.Any())
        {
            totalPage = 1;
            currentPage = 1;
            pageList3 = new List<InventoryRecordDTO>();
            StateHasChanged();
            return;
        }

        totalPage = (int)Math.Ceiling((double)FilterList.Count / viewNum);

        // Console.WriteLine("현페" + Math.Min(currentPage, totalPage));
        // Console.WriteLine("전체" + totalPage);

        currentPage = Math.Min(currentPage, totalPage);

        int skip = (currentPage - 1) * viewNum;
        pageList3 = FilterList.Skip(skip).Take(viewNum).ToList();

        // Console.WriteLine($"[페이징] 전체 데이터 수: {FilterList?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        await Paging();
    }

    private async Task FilterData()
    {

        if(_materialId == null)
        {
            FilterList = new List<InventoryRecordDTO>();
            StateHasChanged();
        }
        else
        {
            var selectedMaterial = ListData?.FirstOrDefault(m => m.Id == _materialId);
            FilterList2 = selectedMaterial;
            FilterList = selectedMaterial?.InventoryList ?? new List<InventoryRecordDTO>();
            StateHasChanged();
            await Paging();
        }
    }


    private async Task Export()
    {
        if (ListData.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        List<string> colName = new List<string>
        {
            "입출고일시",
            "품목코드",
            "품목명",
            "단위",
            "입고수량",
            "입고단가",
            "입고금액",
            "출고수량",
            "출고단가",
            "출고금액",
            "재고수량",
            "비고",
        };
        var excel = ExcelService.getInstance(JS);
        string dt = StartDt == EndDt ? StartDt : StartDt + "_" + EndDt;
        string title = $"{FilterList2.Name}_입출고내역_{dt}";
        await excel.ExportInOutDetail(ListData, FilterList2, colName, title);
    }
}
