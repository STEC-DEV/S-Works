@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Material.Inventory.Components
@using FamTec.Client.Pages.Voc.Main.Components
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO


<div class="modal">
    <div class="header">
        <span class="title">
            품목 검색
        </span>
    </div>
    <InputCol 
            T="string"
            Placeholder="품목코드, 품목명, 제조사"
            ValueChanged="@((e)=>OnSearch(e))"
            />
     <div class="content yappear">
            <div class="modal-table">
                <SearchTable 
                    OnCheck="OnCheck" 
                    ListData="@FilterData" 
                    CheckedItem="@checkItem" />
            </div>
    </div>
    
    <div class="btns">
        <Button Name="확인" Type="0" OnClick="OnAdd" />
        <Button Name="취소" Type="1" OnClick="OnClicked" />
    </div>
    
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public List<MaterialSearchListDTO> ListData { get; set; }
    [Parameter] public List<MaterialSearchListDTO> SelectData { get; set; }
    [Parameter] public EventCallback<List<MaterialSearchListDTO>> SelectDataChanged { get; set; }


    List<MaterialSearchListDTO> FilterData = new List<MaterialSearchListDTO>();

    string _searchText ="";
    List<int> checkItem = new List<int>();
    private List<MaterialSearchListDTO> _selectData = new List<MaterialSearchListDTO>();


    protected override async Task OnInitializedAsync()
    {
        // SelectData.Clear();
        // _selectData.Clear();
        OnAsync();

        await OnSearch(_searchText);
    }

    private void OnAsync()
    {
        checkItem = SelectData.Select(s => s.Id).ToList();
        _selectData = SelectData;
    }

    private void OnCheck(MaterialSearchListDTO material)
    {
        if (checkItem.Contains(material.Id))
        {
            // 존재하면 삭제
            checkItem.Remove(material.Id);
            _selectData.RemoveAll(m => m.Id == material.Id); // 같은 Id를 가진 항목을 삭제
        }
        else
        {
            // 존재하지 않으면 추가
            checkItem.Add(material.Id);
            _selectData.Add(material);
        }
    }


    private async Task OnSearch(string text)
    {
        _searchText = text;
        FilterData = String.IsNullOrEmpty(_searchText)
                                ? ListData
                                : ListData.Where(m => (m.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.Code?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.Mfr?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                                        ).ToList();

        StateHasChanged();
    }

    //등록
    private async Task OnAdd()
    {
        await SelectDataChanged.InvokeAsync(_selectData);
        await OnClicked();
    }

    private async Task OnClicked()
    {
        await OnClose.InvokeAsync();
    }
}
