@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Client.DTO.Normal.Material
@using FamTec.Shared.Server.DTO


<div class="modal">
    <div class="header">
        <span class="title">
            자재 등록
        </span>
    </div>
    <div class="content">
        <InputCol 
            Label="자재코드" 
            Placeholder="자재코드" 
            ValueType="text"
            @bind-Value="@AddMaterial.Code" 
            />
        <div class="group">
            <InputCol 
                Label="자재명" 
                Placeholder="자재명" 
                ValueType="text" 
                @bind-Value="@AddMaterial.Name" 
                />
            <InputCol 
                Label="제조사" 
                Placeholder="제조사" 
                ValueType="text" 
                @bind-Value="@AddMaterial.ManufacturingComp" 
                />
        </div>
        <InputCol 
            Label="규격" 
            Placeholder="규격" 
            ValueType="text" 
            @bind-Value="@AddMaterial.Standard" 
            />
        <div class="group">
            <InputCol Label="안전재고"
                        Placeholder="안전재고"
                        ValueType="number"
                        Min="0"
                        @bind-Value="@AddMaterial.SafeNum" />
            <InputCol Label="단위"
                        Placeholder="단위"
                        ValueType="text"
                        @bind-Value="@AddMaterial.Unit" />
        </div>
        
        <div class="group">
            <SelectField 
                T="BuildingFloorListDTO" 
                Key="building" 
                SelectData="Locations" 
                Value="SelectedBuildingId" 
                OnChange="OnBuildingChange" 
                Label="건물"
                EditMode="true" />
            @if (SelectedBuilding != null && SelectedBuilding.FloorList.Any())
            {
                <SelectField  
                    Key="floor" 
                    SelectData="SelectedBuilding.FloorList" 
                    Value="SelectedFloorId" 
                    Label="위치"
                    OnChange="OnFloorChange" 
                    EditMode="true" />
            }
        </div>
        <InputImages MaxFilesNum="3" OnChange="OnUploadImage" />
    </div>
    <div class="btns">
        <Button Name="등록" Type="0" OnClick="OnAdd"/>
        <Button Name="닫기" Type="1" OnClick="OnClosed" />
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnLoad { get; set; }

    AddMaterialDTO AddMaterial = new AddMaterialDTO();
    List<BuildingFloorListDTO> Locations = new List<BuildingFloorListDTO>();
    BuildingFloorListDTO SelectedBuilding;
    int SelectedBuildingId;
    int SelectedFloorId;


    protected override async Task OnInitializedAsync()
    {
        await OnLoadLocation();

    }


    private async void OnClosed()
    {
        await OnClose.InvokeAsync();
    }

    private async Task OnAdd()
    {
        try
        {
            Console.WriteLine(AddMaterial.ManufacturingComp);
            ResponseUnit<AddMaterialDTO> resPost = await apiManager.PostWithFilesAsync<AddMaterialDTO>("Material/sign/AddMaterial",AddMaterial);
            if(resPost.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resPost.message);
                return;
            }

            await  OnLoad.InvokeAsync();
            OnClosed();
        }
        catch (Exception ex)
        {
            Console.WriteLine("[Material]자재 등록 에러");
            await JS.InvokeVoidAsync("alert", "자재 등록 에러");

        }
    }

    private async Task OnLoadLocation()
    {
        try
        {
            ResponseList<BuildingFloorListDTO> resGet = await apiManager.GetListAsync<BuildingFloorListDTO>("Building/sign/PlaceBuildingList");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "위치 정보 조회 실패");
                return;
            }
            Locations = resGet.data;


        }
        catch (Exception ex)
        {
            
        }
    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();
        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);

        }
        AddMaterial.Image = temp;
        AddMaterial.ImageName = names;
    }


    private void OnBuildingChange(int buildingId)
    {
        SelectedBuildingId = buildingId;

        SelectedBuilding = Locations.FirstOrDefault(b => b.Id == buildingId);
        SelectedFloorId = 0; // Reset floor selection when building changes
        StateHasChanged();
    }

    private void OnFloorChange(int floorId)
    {
        SelectedFloorId = floorId;
        AddMaterial.DefaultLocation = floorId;
    }

}
