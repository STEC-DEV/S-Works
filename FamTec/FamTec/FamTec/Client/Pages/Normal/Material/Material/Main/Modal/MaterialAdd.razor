@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Client.DTO.Normal.Material
@using FamTec.Shared.Server.DTO


<div class="modal yappear">
    <div class="header">
        <span class="title">
            품목 등록
        </span>
    </div>
    <div class="content">
        <InputCol 
            Label="품목코드" 
            Placeholder="품목코드" 
            ValueType="text"
            Required="true"
            @bind-Value="@AddMaterial.Code" 
            />
        <div class="group">
            <InputCol Label="품목명"
                      Placeholder="품목명" 
                ValueType="text" 
                Required="true"
                @bind-Value="@AddMaterial.Name" 
                />
            <InputCol 
                Label="제조사" 
                Placeholder="제조사" 
                ValueType="text" 
                @bind-Value="@AddMaterial.ManufacturingComp" 
                />
        </div>
        <InputCol 
            Label="규격" 
            Placeholder="규격" 
            ValueType="text" 
            @bind-Value="@AddMaterial.Standard" 
            />
        <div class="group">
            <InputCol Label="안전재고"
                        Placeholder="안전재고"
                        ValueType="number"
                        Min="0"
                        @bind-Value="@AddMaterial.SafeNum" />
            <InputCol Label="단위"
                        Placeholder="단위"
                        ValueType="text"
                        Unit=true
                        @bind-Value="@AddMaterial.Unit" />
        </div>
        
        <div class="group">
            <SelectField 
                T="PlaceRoomListDTO" 
                Key="building" 
                SelectData="PlaceLocation" 
                Value="SelectedBuildingId" 
                OnChange="OnBuildingChange" 
                Label="건물"
                Required="true"
                EditMode="true" />
            @if (PlaceRoom != null && PlaceRoom.Any() && SelectedBuildingId != 0)
            {
                <SelectField  
                    Key="floor" 
                    SelectData="PlaceRoom" 
                    Value="SelectedFloorId" 
                    Label="위치"
                    Required="true"
                    OnChange="OnFloorChange" 
                    EditMode="true" />
            }
        </div>
        @if(AddMaterial.Image != null)
        {
            <ImageSlider Label="대표 이미지" Images="@ImageUrl"/>
        }
        <div class="img-btn">
            <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
            @if(AddMaterial.Image != null)
            {
                <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
            }
            
        </div>
        
    </div>
    <div class="btns">
        <Button Name="등록" Type="0" OnClick="OnAdd"/>
        <Button Name="취소" Type="1" OnClick="OnClosed" />
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnLoad { get; set; }

    AddMaterialDTO AddMaterial = new AddMaterialDTO();
    List<BuildingFloorListDTO> Locations = new List<BuildingFloorListDTO>();
    BuildingFloorListDTO SelectedBuilding;

    int SelectedBuildingId;
    int SelectedFloorId;


    //새 건물 룸 데이터
    List<PlaceRoomListDTO> PlaceLocation = new List<PlaceRoomListDTO>();
    PlaceRoomListDTO PlaceLocationSelect = new PlaceRoomListDTO();
    List<PlaceRoom> PlaceRoom = new List<PlaceRoom>();

    //건물 선택 시 할당받을 위치 변수
    List<BuildingFloor> Room = new List<BuildingFloor>();

    int SelectedRoomId;


    List<byte[]> ImageUrl = new List<byte[]>();

    protected override async Task OnInitializedAsync()
    {
        await OnLoadLocation();
        await OnLoadBuilginRoom();
    }


    private async void OnClosed()
    {
        await OnClose.InvokeAsync();
    }

    private async Task OnAdd()
    {
        try
        {
            
            if (String.IsNullOrEmpty(AddMaterial.Code) || String.IsNullOrEmpty(AddMaterial.Name) || AddMaterial.RoomId == null)
            {
                await JS.InvokeVoidAsync("alert", "필수값 * 을 확인해 주세요");
                return;

            }
            ResponseUnit<AddMaterialDTO> resPost = await apiManager.PostWithFilesAsync<AddMaterialDTO>("Material/sign/AddMaterial",AddMaterial);
            if(resPost.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resPost.message);
                return;
            }

            await  OnLoad.InvokeAsync();
            OnClosed();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "등록 실패");

        }
    }

    //건물 + 위치 + 공간 조회
    private async Task OnLoadBuilginRoom()
    {
        try
        {
            ResponseList<PlaceRoomListDTO> resGet = await apiManager.GetListAsync<PlaceRoomListDTO>("Room/sign/GetPlaceRoomGroup");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            PlaceLocation = resGet.data;

            foreach (var i in PlaceLocation)
            {
                Console.WriteLine();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }


    //건물선택
    private async Task OnBuildingChange(int buildingId)
    {
        PlaceRoom = new List<PlaceRoom>();
        if (buildingId == 0)
        {
            Room = null;
            SelectedRoomId = 0;
            StateHasChanged();
            return;
        }
        SelectedBuildingId = buildingId;

        //건물선택
        PlaceLocationSelect = PlaceLocation?.Where(b => b.Id == SelectedBuildingId).FirstOrDefault();
        //해당건물에 층전체 반복하여 위치 리스트 추가
        foreach (var i in PlaceLocationSelect.FloorList)
        {
            foreach (PlaceRoom room in i.RoomList)
            {
                PlaceRoom.Add(room);
            }
        }

        SelectedRoomId = 0; // Reset floor selection when building changes
        StateHasChanged();
    }

    private async Task OnLoadLocation()
    {
        try
        {
            ResponseList<BuildingFloorListDTO> resGet = await apiManager.GetListAsync<BuildingFloorListDTO>("Building/sign/PlaceBuildingList");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            Locations = resGet.data;


        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();
        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);

        }
        AddMaterial.Image = temp;
        AddMaterial.ImageName = names;
        ImageUrl.Add(temp[0]);
    }


    // private void OnBuildingChange(int buildingId)
    // {
    //     SelectedBuildingId = buildingId;

    //     SelectedBuilding = Locations.FirstOrDefault(b => b.Id == buildingId);
    //     SelectedFloorId = 0; // Reset floor selection when building changes
    //     StateHasChanged();
    // }

    private void OnDelImg()
    {
        AddMaterial.Image = null;
        AddMaterial.ImageName = null;
        ImageUrl.Clear();
        StateHasChanged();
    }

    private void OnFloorChange(int floorId)
    {
        SelectedFloorId = floorId;
        AddMaterial.RoomId = floorId;
    }

}
