@page "/material/info"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Material.Material.Main.Components
@using FamTec.Shared.Client.DTO.Normal.Material
@using FamTec.Shared.Server.DTO
@using FamTec.Client.Pages.Normal.Material.Material.Main.Modal
<div class="container">
    <div class="wrap">
        <div class="header">
            <span class="title">
                자재목록
            </span>
                <div class="options">
                    <Input 
                        Placeholder="search" 
                        Type="text" 
                        ValueChanged="OnSearch"
                        />
                    @if (USEREDIT)
                    {
                        <Button Name="등록"
                                Type="0"
                                Width=true 
                                OnClick="OnEdit"
                                />
                        <Button Name="삭제"
                                Type="1"
                                Width=true 
                                OnClick="OnDelete"
                                />
                    }
                </div>
            
        </div>
        <div class="content">
            <MaterialTable 
                ListData="@FilterData" 
                OnCheck=OnCheck
                />
        </div>
    </div>
    @if (EditMode)
    {
        <ModalBackground>
            <ChildComponent>
                <MaterialAdd OnClose="OnEdit" OnLoad="OnLoadMaterial" />
            </ChildComponent>
        </ModalBackground>
    }

</div>

@code {
    List<MaterialListDTO> Material;
    List<MaterialListDTO> FilterData = new List<MaterialListDTO>();
    List<int> CheckList = new List<int>();
    private string _searchText="";
    private bool EditMode = false;
    private bool isModal = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadMaterial();
        CheckList = new List<int>();
    }

    private async Task OnLoadMaterial()
    {
        try
        {
            ResponseList<MaterialListDTO> resGet = await apiManager.GetListAsync<MaterialListDTO>("Material/sign/GetAllMaterial");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", "[Material][Info] 자재 조회 실패");
                return;
            }
            Material = resGet.data;
            FilterData = Material;

        }catch(Exception ex)
        {
            Console.WriteLine("[Material][Info] 자재 조회 에러" +ex);
            await JS.InvokeVoidAsync("alert", "[Material][Info] 자재 조회 에러");
        }
    }

    private async Task OnSearch(string text)
    {
        _searchText = text;
        FilterData = String.IsNullOrEmpty(_searchText) 
                                ? Material 
                                : Material.Where(m => (m.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.Code?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.ManufacturingComp?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                                        ).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void OnCheck((bool isCheck, MaterialListDTO material) value)
    {
        if (value.isCheck)
        {
            CheckList.Add(value.material.ID);
        }
        else
        {
            CheckList.Remove(value.material.ID);
        }
    }

    /// <summary>
    /// 자재 삭제
    /// </summary>
    /// <returns></returns>
    private async Task OnDelete()
    {
        try
        {
            if(CheckList.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제할 재고를 선택해 주세요.");
                return;
            }
            //여기 http 타입 수정해야함
            ResponseUnit<bool> resGet = await apiManager.PutAsync<bool>("material/sign/deleterMaterial",CheckList);
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            await OnLoadMaterial();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("자재 삭제 에러" + ex);
            await JS.InvokeVoidAsync("alert", "자재 삭제 에러");
        }
    }

    private void OnEdit()
    {
        EditMode =!EditMode ;
    }

}
