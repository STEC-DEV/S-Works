@page "/material/info"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Material.Material.Main.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Shared.Client.DTO.Normal.Material
@using FamTec.Shared.Server.DTO
@using FamTec.Client.Pages.Normal.Material.Material.Main.Modal
<div class="container yappear">
    <div class="wrap">
        <div class="header">
            <span class="title">
                품목정보
            </span>
                <div class="options">
                    <Input 
                        Placeholder="목록에서 검색" 
                        Type="text" 
                        ValueChanged="OnSearch"
                        />
                    @if (MATERIAL)
                    {
                        <Button Name="등록"
                                Type="0"
                                Width=true 
                                OnClick="OnEdit"
                                />
                        @if(CheckList.Count > 0)
                        {
                            <Button Name="삭제"
                                    Type="1"
                                    Width=true
                                    OnClick="OnIsDel" />
                        }
                    
                    }
                </div>
            
        </div>
        <div class="option-page">
                
        @if(totalPage > 1)
        {
            <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
        }
        <Viewer OnChanged="OnChangeViewNum" />
    </div>
        <div class="content">
            <MaterialTable 
                ListData="@FilterData" 
                OnLoadMaterial=OnLoadMaterial
                OnCheck=OnCheck
                />
        </div>
    </div>
    @if (EditMode && MATERIAL)
    {
        <ModalBackground>
            <ChildComponent>
                <MaterialAdd OnClose="OnEdit" OnLoad="OnLoadMaterial" />
            </ChildComponent>
        </ModalBackground>
    }

</div>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDelete" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}

@code {
    List<MaterialListDTO> Material;
    List<MaterialListDTO> FilterData = new List<MaterialListDTO>();
    List<int> CheckList = new List<int>();
    private string _searchText="";
    private bool EditMode = false;
    private bool isModal = false;

    bool isDel = false;

    int viewNum;
    private int currentPage;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadMaterial();
        CheckList = new List<int>();
        viewNum = 25;
        currentPage = 1;
        totalPage = 1;
        await Paging();
    }

    private async Task OnLoadMaterial()
    {
        try
        {
            ResponseList<MaterialListDTO> resGet = await apiManager.GetListAsync<MaterialListDTO>("Material/sign/GetAllMaterial");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if (resGet.data == null)
            {
                Material = new List<MaterialListDTO>();
            }
            else
            {
                Material = resGet.data;
            }

            FilterData = Material;
            StateHasChanged();

        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private async Task OnSearch(string text)
    {
        _searchText = text;
        FilterData = String.IsNullOrEmpty(_searchText) 
                                ? Material 
                                : Material.Where(m => (m.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.Code?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
                                                        (m.ManufacturingComp?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false)
                                                        ).ToList();

        await InvokeAsync(StateHasChanged);
    }

    private void OnCheck((bool isCheck, MaterialListDTO material) value)
    {
        if (value.isCheck)
        {
            CheckList.Add(value.material.ID);
        }
        else
        {
            CheckList.Remove(value.material.ID);
        }
    }

    /// <summary>
    /// 자재 삭제
    /// </summary>
    /// <returns></returns>
    private async Task OnDelete()
    {
        try
        {
            if(CheckList.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제할 항목이 존재하지 않습니다.");
                return;
            }
            //여기 http 타입 수정해야함
            ResponseUnit<bool> resGet = await apiManager.PostAsync<bool>("material/sign/deleteMaterial",CheckList);
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            await OnLoadMaterial();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }

    private void OnEdit()
    {
        EditMode =!EditMode ;
    }


    private void OnIsDel()
    {
        isDel = !isDel;
    }


    // protected override async Task OnParametersSetAsync()
    // {
    //     if (ListData != null)
    //     {
    //         CopyData = new List<MaterialHistoryDTO>(ListData);
    //         await Paging();
    //     }
    // }

    //페이지 필터링
    private async Task Paging()
    {

        // Console.WriteLine("============페이징 실행============");
        if (Material == null || !Material.Any())
        {
            totalPage = 1;
            currentPage = 1;
            FilterData = new List<MaterialListDTO>();

            StateHasChanged();
            return;
        }
        // Console.WriteLine("현현패" + currentPage);

        totalPage = (int)Math.Ceiling((double)Material.Count / viewNum);

        // Console.WriteLine("현페" + Math.Min(currentPage, totalPage));
        // Console.WriteLine("전체" + totalPage);

        currentPage = Math.Min(currentPage, totalPage);

        int skip = (currentPage - 1) * viewNum;
        FilterData = Material.Skip(skip).Take(viewNum).ToList();

        // Console.WriteLine($"[페이징] 전체 데이터 수: {Material?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        await Paging();
    }
}
