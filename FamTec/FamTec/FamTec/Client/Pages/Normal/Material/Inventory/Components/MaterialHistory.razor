@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Shared.Client.DTO.Normal.Location.Inventory


<div class="history yappear">
    <div class="header">
        <span class="title">
            품목별 재고현황
        </span>
        <div class="options">
            @if (ListData.Count > 0)
            {
                <ExportButton OnClick="Export" />
            }
        </div>
    </div>
    <div class="option-page">
                
        @if(totalPage > 1)
        {
            <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
        }
        <Viewer OnChanged="OnChangeViewNum" />
    </div>
    <div class="content @(ListData.Count == 0 || ListData == null ? "height" : "")">
        @if(ListData == null)
        {
            <Loading/>
        }
        else
        {
            <MaterialTable ListData="@ListData" />
        }
    </div>
</div>

@code {
    [Parameter] public List<MaterialHistoryDTO> ListData { get; set; }

    int viewNum;
    private int currentPage;
    private int totalPage;  //전체 페이지 수
    private int FilterOption;
    List<MaterialHistoryDTO> CopyData = new List<MaterialHistoryDTO>();
    List<MaterialHistoryDTO> FilterData = new List<MaterialHistoryDTO>();
    protected override async Task OnInitializedAsync()
    {
        viewNum = 25;
        currentPage = 1;
        totalPage = 1;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(ListData != null)
        {
            CopyData = new List<MaterialHistoryDTO>(ListData);
            await Paging();
        }
    }

    //페이지 필터링
    private async Task Paging()
    {

        // Console.WriteLine("============페이징 실행============");
        if (CopyData == null || !CopyData.Any())
        {
            totalPage = 1;
            currentPage = 1;
            FilterData = new List<MaterialHistoryDTO>();

            StateHasChanged();
            return;
        };
        totalPage = (int)Math.Ceiling((double)CopyData.Count / viewNum);
        currentPage = Math.Min(currentPage, totalPage);

        int skip = (currentPage - 1) * viewNum;
        FilterData = CopyData.Skip(skip).Take(viewNum).ToList();

        // Console.WriteLine($"[페이징] 전체 데이터 수: {CopyData?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        await Paging();
    }


    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        
        await Paging();
    }


    private async Task Export()
    {
        if (ListData.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        List<string> colName = new List<string>
        {
            "품목코드",
            "품목명",
        };
        // 반복해서 넣어야 하는 데이터를 준비
        List<string> dynamicColNames = new List<string>();
        foreach (var item in ListData[0].RoomHistory)
        {
            dynamicColNames.Add(item.Name); // 예시로 item.ColumnName을 추가
        }
        // 중간에 반복한 데이터를 추가
        colName.AddRange(dynamicColNames);

        // 나머지 컬럼명 추가
        colName.Add("총재고수량");
        string date = DateTime.Now.ToString("yyyyMMdd");

        var excel = ExcelService.getInstance(JS);
        string title = $"품목별재고현황_{date}";
        await excel.ExportInventory(ListData, colName, title);
    }
}
