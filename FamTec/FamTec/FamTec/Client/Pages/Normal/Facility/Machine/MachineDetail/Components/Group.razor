@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Facility.Machine.MachineDetail.Modal
@using FamTec.Shared.Client.DTO.Normal.Facility.Group
@using FamTec.Shared.Server.DTO




<div class="group yappear">
    <div class="header">
        <span class="title">
            @GroupData.Name <EditButton OnClick="OnUpdateGroup" />
        </span>
        @if (HasEditPermission())
        {
            <div class="options">
                <Button Name="삭제" Width=true Type="1" OnClick="OnIsDel" />
            </div>
        }
        
    </div>
    <div class="content">
        @foreach(var item in GroupData.keyListDTO)
        {
            <SubItem item="item" OnLoad="LoadGroup" FacType="@FacType" />
        }
        @if (HasEditPermission())
        {
            <div class="add-item" @onclick="OnModal">
                +
            </div>
        }

    </div>
    @if (IsModal)
    {
        <ModalBackground>
            <ChildComponent>
                <SubItemModal OnClose="OnModal" GroupId="@GroupData.id" LoadGroup="LoadGroup" />
            </ChildComponent>
        </ModalBackground>
    }
    @if (isDel)
    {
        <ModalBackground>
            <ChildComponent>
                <ConfirmModal OnConfirm="()=>OnDelGroup(GroupData.id)" OnCancel="OnIsDel" />
            </ChildComponent>
        </ModalBackground>
    }
    @if (isGroupEdit)
    {
        <ModalBackground>
            <ChildComponent>
                <UpdateGroupModal CloseModal="OnUpdateGroup" GroupData=GroupData LoadGroup=LoadGroup />
            </ChildComponent>
        </ModalBackground>
    }
</div>

@code {
    [Parameter] public GroupDTO? GroupData { get; set; }
    // [Parameter] public bool EditMode { get; set; } = false;
    [Parameter] public EventCallback LoadGroup { get; set; }
    [Parameter] public string FacType { get; set; }
    bool IsModal = false;
    // bool EditMode = false;
    bool isDel = false;
    bool isGroupEdit = false;

    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    //그룹삭제
    private async Task OnDelGroup(int groupid)
    {
        try
        {
            ResponseUnit<bool> resDel = await apiManager.PostAsync<bool>("FacilityGroup/sign/DeleteGroup", groupid);
            if (resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await LoadGroup.InvokeAsync();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }

    private void OnModal()
    {
        IsModal = !IsModal;
    }

    // private void OnEditMode()
    // {
    //     EditMode = !EditMode;
    // }

    private void OnIsDel()
    {
        isDel = !isDel;
    }

    private void OnUpdateGroup()
    {
        isGroupEdit = !isGroupEdit;
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
}
