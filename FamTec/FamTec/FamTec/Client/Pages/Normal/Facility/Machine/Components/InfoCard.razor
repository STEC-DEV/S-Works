@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO


<div class="infocard-container">
    <div class="infocard-header">
        <span>
            설비 제원
        </span>
    </div>
    <div class="infocard-content">
        <div class="infocard-img-area">
            @* <PreviewBox ImageUrls="@ImageUrl" /> *@
            <ImageSlider Label="설비 사진" Images="@ImageUrl"/>
            <div class="img-btn">
                <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                @if (ImageUrl.Count > 0)
                {
                    <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                }
            </div>
            
        </div>
        <div class="infocard-inputs">
            <InputCol
                Label="설비이름"
                Placeholder="설비이름"
                Row="true" 
                @bind-Value=@Facility.Name
                Required="true"
                />
            <InputCol
                Label="형식"
                Placeholder="형식"
                Row="true" 
                @bind-Value=@Facility.Type
                />
            <SelectField T="PlaceRoomListDTO"
                         Key="building"
                         SelectData="PlaceLocation"
                         @bind-Value="SelectedBuildingId"
                         OnChange="OnBuildingChange"
                         Label="건물"
                         Row="true"
                         EditMode="true" 
                         Required="true"
                         />
            @if (PlaceRoom != null && PlaceRoom.Any() && SelectedBuildingId != 0)
            {
                <SelectField  
                    Key="floor" 
                    SelectData="PlaceRoom" 
                    @bind-Value="SelectedRoomId" 
                    Label="위치"
                    Row="true"
                    OnChange="OnLocationChange" 
                    EditMode="true" 
                    Required="true"
                    />
            }

            <InputCol
                Label="규격용량"
                Placeholder="규격용량"
                Row="true" 
                @bind-Value=@Facility.Standard_capacity
                />
            <InputCol
                Label="수량"
                Placeholder="수량"
                Row="true" 
                ValueType="number"
                @bind-Value=@Facility.Num
                />
            <InputCol
                Label="내용년수"
                Placeholder="내용년수"
                Row="true" 
                @bind-Value=@Facility.LifeSpan
                />
            <DateInput 
                Label="설치년월" 
                Row="true"
                @bind-Date=@Facility.EquipDT
                Placeholder="YYYYMMDD"/>
            <DateInput 
                Label="교체년월" 
                Row="true"
                @bind-Date=@Facility.ChangeDT
                Placeholder="YYYYMMDD"/>
        </div>
    </div>
</div>

@code {
    // [Parameter]public FacilityDetailDTO Facility { get; set; }
    private FacilityDetailDTO _facility;

    [Parameter]
    public FacilityDetailDTO Facility
    {
        get => _facility;
        set
        {
            if (_facility != value)
            {
                _facility = value;
                FacilityChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<FacilityDetailDTO> FacilityChanged { get; set; }


    //건물 위치
    List<PlaceRoomListDTO> PlaceLocation = new List<PlaceRoomListDTO>();
    PlaceRoomListDTO PlaceLocationSelect = new PlaceRoomListDTO();
    List<PlaceRoom> PlaceRoom = new List<PlaceRoom>();

    int SelectedBuildingId;
    int SelectedRoomId;

    // private List<string> ImageUrl = new List<string>();//이미지 프리뷰
    private List<byte[]> ImageUrl = new List<byte[]>();//이미지 프리뷰
    bool EditMode = true;

    protected override async Task OnInitializedAsync()
    {
        // await OnLoadBuilding();
        await OnLoadBuilginRoom();
    }


    //건물 + 위치 + 공간 조회
    private async Task OnLoadBuilginRoom()
    {
        try
        {
            ResponseList<PlaceRoomListDTO> resGet = await apiManager.GetListAsync<PlaceRoomListDTO>("Room/sign/GetPlaceRoomGroup");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            PlaceLocation = resGet.data;

            foreach (var i in PlaceLocation)
            {
                Console.WriteLine();
            }
        }
        catch (Exception ex)
        {

        }
    }

    //건물선택
    private async Task OnBuildingChange(int buildingId)
    {
        PlaceRoom.Clear();
        if (buildingId == 0)
        {
            SelectedRoomId = 0;
            StateHasChanged();
            return;
        }
        SelectedBuildingId = buildingId;

        //SelectBuilding = Building?.Where(b => b.Id == SelectedBuildingId).FirstOrDefault();
        PlaceLocationSelect = PlaceLocation?.Where(b => b.Id == SelectedBuildingId).FirstOrDefault();
        //해당건물에 층전체 반복하여 위치 리스트 추가
        foreach (var i in PlaceLocationSelect.FloorList)
        {
            foreach (PlaceRoom room in i.RoomList)
            {
                PlaceRoom.Add(room);
            }
        }

        // Room = SelectBuilding.FloorList;

        SelectedRoomId = 0; // Reset floor selection when building changes
        StateHasChanged();
    }

    //위치 선택
    private void OnLocationChange(int locationId)
    {
        Facility.RoomId= locationId;

    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);
        }

        Facility.Image = temp[0];
        Facility.ImageName = names[0];

        ImageUrl.Add(temp[0]);

        StateHasChanged();
        await FacilityChanged.InvokeAsync(Facility);
    }

    private async Task OnDelImg()
    {
        if (Facility.Image == null || string.IsNullOrEmpty(Facility.ImageName) || ImageUrl.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "삭제할 이미지가 존재하지 않습니다.");
            return;
        }
        Facility.Image = null;
        Facility.ImageName = null;
        ImageUrl.Clear();
    }

}
