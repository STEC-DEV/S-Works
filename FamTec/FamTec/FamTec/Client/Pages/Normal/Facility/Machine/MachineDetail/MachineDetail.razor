@page "/facility/{FacType}/{Id:int}"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Facility.Machine.Components
@using FamTec.Client.Pages.Normal.Facility.Machine.MachineDetail.Components
@using FamTec.Client.Pages.Normal.Facility.Machine.MachineDetail.Modal
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Shared.Client.DTO.Normal.Facility.Group
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Server.DTO

<div class="detail-container">
    @if (OriginalFacility != null)
    {
        <FacInfo 
        Facility=@(OriginalFacility) 
        FacType=@FacType
        OnLoad="OnLoadFacility"
        OnExport="@Export"
        />
        }
    @if (HasEditPermission())
    {
        <label class="sub-btn yappear" @onclick=@OnModal title="그룹 추가">
            +
        </label>
    }
    @if (Group != null)
    {
        <div class="group yappear">
            @foreach (var group in Group)
            {
                @if (group != null)
                {
                    <Group GroupData="@group" LoadGroup="OnLoadGroup" FacType="@FacType" />

                }
            }
        </div>
    }
    
    <div class="history yappear">
        @if (OriginalFacility != null)
        {
            <History Id="@Id" FacType="@FacType" FacName="@OriginalFacility.Name" />
        }
    </div>
    
    @if (IsModal && HasEditPermission())
    {
        <ModalBackground>
            <ChildComponent>
                <SubGroupModal Id="@Id" CloseModal="OnModal" LoadGroup="OnLoadGroup" />
            </ChildComponent>
        </ModalBackground>
    }

</div>

@code {
    [Parameter] public string FacType { get; set; }
    [Parameter] public int Id { get; set; }

    FacilityDetailDTO facilityDetailDTO;
    FacilityDetailDTO OriginalFacility;
    FacilityDetailDTO UpdateFacility;


    List<GroupDTO> Group = new List<GroupDTO>();
    bool IsModal = false;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadFacility();
        await OnLoadGroup();


    }

    //조회
    private async Task OnLoadFacility()
    {
        try
        {
            ResponseUnit<FacilityDetailDTO> resFacInfo = await apiManager.GetUnitAsync<FacilityDetailDTO>($"{FacType}Facility/sign/Detail{FacType}Facility?facilityid={Id}");
            if (resFacInfo.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resFacInfo.message);
                return;
            }
            if(resFacInfo.data == null)
            {
                facilityDetailDTO = new FacilityDetailDTO();
                OriginalFacility = new FacilityDetailDTO();
                UpdateFacility = new FacilityDetailDTO();
            }
            else
            {
                facilityDetailDTO = new FacilityDetailDTO(resFacInfo.data);
                OriginalFacility = facilityDetailDTO.DeepCopy();
                UpdateFacility = facilityDetailDTO.DeepCopy();
            }
            
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }

    }

    //그룹조회
    private async Task OnLoadGroup()
    {
        try
        {
            ResponseList<GroupDTO> resGroup = await apiManager.GetListAsync<GroupDTO>($"FacilityGroup/sign/GetFacilityGroup?facilityid={Id}");
            if (resGroup.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGroup.message);
                return;
            }
            Group = resGroup.data;
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private void OnModal()
    {
        IsModal = !IsModal;
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }

    /// <summary>
    /// 엑셀 내보내기
    /// </summary>
    /// <returns></returns>
    private async Task Export()
    {
        if (facilityDetailDTO == null)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        var excel = ExcelService.getInstance(JS);
        string date = DateTime.Now.ToString("yyyyMMdd");
        string title = $"{facilityDetailDTO.Name}제원_{date}";
        await excel.ExportFacility(facilityDetailDTO, Group, title);
    }
}
