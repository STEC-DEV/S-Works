@using FamTec.Client.Pages.CommonComponents

@using FamTec.Client.Pages.Normal.Facility.Machine.MachineDetail.Modal
@using FamTec.Shared.Client.DTO.Normal.Facility.Group
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="item-container">
    <div class="item-wrap" >
        <label class="item-label" >
            @item.ItemKey @unit
        </label>
        <div class="item-values">
            @foreach (var i in item.valueList)
            {
                <span class="value">
                    @i.itemValue
                </span>
            }
        </div>
        @if (HasEditPermission())
        {
            <EditButton OnClick="@OnItemEdit" />
            <XButton OnClick="OnIsDel" />
        }
    </div>
    @if (HasEditPermission() && ItemEdit)
    {
        <ModalBackground>
            <ChildComponent>
                <UpdateSubItemModal OnClose="OnItemEdit" Data="item" LoadGroup="OnLoad" />
            </ChildComponent>
        </ModalBackground>
    }
</div>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="()=>OnDelItem(item.Id)" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}
@code {
    [Parameter] public ItemDTO item { get; set; }
    [Parameter] public bool EditMode { get; set; } = false;
    [Parameter] public EventCallback OnLoad { get; set; }
    [Parameter] public string FacType { get; set; }
    private bool ItemEdit = false;
    bool isDel = false;

    private string unit = "";

    protected override async Task OnParametersSetAsync()
    {
        if (!String.IsNullOrEmpty(item.Unit))
        {
            unit = "(" + item.Unit + ")";
        }

    }


    private void OnItemEdit()
    {
        if (USEREDIT)
        {
            ItemEdit = !ItemEdit;
        }
    }

    private async Task OnDelItem(int keyid)
    {
        try
        {
            ResponseUnit<bool> resDel = await apiManager.PostAsync<bool>("FacilityGroupKey/sign/DeleteKey", keyid);
            if (resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoad.InvokeAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }

    private void OnIsDel()
    {
        isDel = !isDel;
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
}
