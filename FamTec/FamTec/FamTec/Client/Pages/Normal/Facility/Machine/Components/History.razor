@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Facility.Machine.MachineDetail.Modal
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Server.DTO


<div class="history yappear">
    <div class="header">
        <span class="title">
            유지보수 이력
        </span>
        @if (HasEditPermission())
        {
            <div class="options">
                @if (_editMode)
                {
                    <Button Name="등록" Width=true Type="0" OnClick="OnAdd" />
                    @if (DelMaintenance.MaintanceID.Count != 0)
                    {
                        <Button Name="삭제" Width=true Type="1" OnClick="OnDelMode" />
                    }
                    <Button Name="취소" Width=true Type="1" OnClick="OnEdit" />
                    
                }
                else
                {
                    <Button Name="편집" Width=true Type="0" OnClick="OnEdit" />
                }
            </div>
        }

        

    </div>
    <div class="content">

    </div>
    <HistoryTable 
        ListData="@ListData" 
        FacType="@FacType" 
        FacId="@Id" 
        OnCheck="OnCheck"
        EditMode=_editMode
        />
    @if (_isDel && HasEditPermission())
    {
        <ModalBackground>
            <ChildComponent>
                <DeleteNote Message="@DelMessage" OnDel="OnDeleteMaintenance" OnClick="OnDelMode" />
            </ChildComponent>
        </ModalBackground>
    }
</div>

@code {
    [Parameter] public int Id{ get; set; }
    [Parameter] public string FacType{ get; set; }

    List<MaintenanceListDTO> ListData;
    private bool _editMode = false;
    private bool _isDel = false;
    List<int?> checkedMaintenance = new List<int?>();


    DeleteMaintenanceDTO DelMaintenance = new DeleteMaintenanceDTO();
    string DelMessage="";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadMaintenance();
    }

    private async Task OnLoadMaintenance()
    {
        try
        {
            ResponseList<MaintenanceListDTO> resGet = await apiManager.GetListAsync<MaintenanceListDTO>($"Maintenance/sign/GetMaintanceHistory?facilityid={Id}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }

            if(resGet.data == null)
            {
                ListData = new List<MaintenanceListDTO>();
            }
            else
            {
                ListData = resGet.data;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine("유지보수 이력조회 실패");
            await JS.InvokeVoidAsync("alert", "유지보수 이력 조회 에러");
        }
    }


    private async Task OnDeleteMaintenance()
    {
        try
        {
            if (DelMaintenance.MaintanceID.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제할 항목이 존재하지 않습니다.");
                return;
            }
            DelMaintenance.Note = DelMessage;
            ResponseUnit<bool> resDel = await apiManager.PostAsync<bool>("Maintenance/sign/DeleteMaintenanceList", DelMaintenance);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                OnDelMode();
                return;
            }
            await OnLoadMaintenance();
            OnDelMode();
            DelMaintenance.MaintanceID.Clear();
            StateHasChanged();

        }catch(Exception ex)
        {
            Console.WriteLine("[설비][유지보수] 삭제 에러 " + ex);
            await JS.InvokeVoidAsync("alert", "[설비][유지보수] 삭제 에러");
        }
    }

    private void OnCheck((bool isCheck, MaintenanceListDTO checkdata) data)
    {
        if (data.isCheck)
        {
            DelMaintenance.MaintanceID.Add(data.checkdata.ID.Value);
        }
        else
        {
            DelMaintenance.MaintanceID.Remove(data.checkdata.ID.Value);
        }
    }


    private void OnEdit()
    {
        DelMaintenance.MaintanceID.Clear();
        _editMode = !_editMode;
    }

    private void OnDelMode()
    {
        _isDel = !_isDel;
    }

    private void OnAdd()
    {
        Navigation.NavigateTo($"/facility/{FacType}/{Id}/maintenance/add");
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
}
