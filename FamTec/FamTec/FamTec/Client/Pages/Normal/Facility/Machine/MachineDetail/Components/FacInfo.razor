@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO


<div class="infocard-container yappear">
    <div class="infocard-header">
        <span>
            설비 제원
        </span>
        @if (USEREDIT)
        {
            <div class="option">
                @if (EditMode)
                {
                    <div class="btns">
                        <Button Name="저장" Width=true Type="0" OnClick="OnUpdate" />
                        <Button Name="취소" Width=true Type="1" OnClick="OnEdit" />
                    </div>
                    
                }
                else
                {
                    <Button Name="수정" Width=true Type="0" OnClick="OnEdit" />
                }
            </div>
        }
        
    </div>
    <div class="infocard-content">
        @if (Facility == null)
        {
            <Loading/>
        }
        else
        {
            <div class="infocard-img-area">
                @* <PreviewBox ImageUrls="@ImageUrl" /> *@
                <ImageSlider Label="설비 이미지" Images="@ImageUrl"/>
                @if (EditMode)
                {
                    <div class="img-btn">
                        <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                        @if(ImageUrl.Count > 0){
                            <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                        }

                    </div>

                    
                }

            </div>
            <div class="infocard-inputs">
                @if (EditMode)
                {
                    <InputCol Label="설비이름"
                              Placeholder="설비이름"
                              Row="true"
                              Required=true
                              @bind-Value=@UpdateFacility.Name />
                    <InputCol Label="형식"
                              Placeholder="형식"
                              Row="true"
                              @bind-Value=@UpdateFacility.Type />
                    <SelectField T="PlaceRoomListDTO"
                                 Key="building"
                                 SelectData="PlaceLocation"
                                 @bind-Value="SelectedBuildingId"
                                 OnChange="OnBuildingChange"
                                 Label="건물"
                                 Row="true"
                                 EditMode="true"
                                 Required=true />
                    @if (PlaceRoom != null && PlaceRoom.Any() && SelectedBuildingId != 0)
                    {
                        <SelectField Key="floor"
                                     SelectData="PlaceRoom"
                                     @bind-Value="SelectedRoomId"
                                     Label="위치"
                                     Row="true"
                                     OnChange="OnLocationChange"
                                     EditMode="true"
                                     Required=true />
                    }

                    <InputCol Label="규격용량"
                              Placeholder="규격용량"
                              Row="true"
                              @bind-Value=@UpdateFacility.Standard_capacity />
                    <InputCol Label="수량"
                              Placeholder="수량"
                              Row="true"
                              ValueType="number"
                              @bind-Value=@UpdateFacility.Num />
                    <InputCol Label="내용년수"
                              Placeholder="내용년수"
                              Row="true"
                              @bind-Value=@UpdateFacility.LifeSpan />
                    <DateInput Label="설치년월"
                               Row="true"
                               @bind-Date=@UpdateFacility.EquipDT
                               Placeholder="YYYYMMDD" />
                    <DateInput Label="교체년월"
                               Row="true"
                               @bind-Date=@UpdateFacility.ChangeDT
                               Placeholder="YYYYMMDD" />
                }
                else
                {
                    <TextField2 Label="설비이름"
                                Value=@Facility.Name
                                Row=true />
                    <TextField2 Label="형식"
                                Value=@Facility.Type
                                Row=true />
                    <TextField2 Label="위치"
                                Value=@Facility.RoomName
                                Row=true />
                    <TextField2 Label="규격용량"
                                Value=@Facility.Standard_capacity
                                Row=true />
                    <TextField2 Label="수량"
                                Value=@Facility.Num.ToString()
                                Row=true />
                    <TextField2 Label="내용년수"
                                Value=@Facility.LifeSpan
                                Row=true />
                    <TextField2 Label="설치년월"
                                Value=@Facility.EquipDT?.ToString("yyyy-MM-dd")
                                Row=true />
                    <TextField2 Label="교체년월"
                                Value=@Facility.ChangeDT?.ToString("yyyy-MM-dd")
                                Row=true />

                }

            </div>
        }

    </div>
</div>

@code {
    // [Parameter]public FacilityDetailDTO Facility { get; set; }
    private FacilityDetailDTO _facility;
    [Parameter] public string FacType { get; set; }

    [Parameter]
    public FacilityDetailDTO Facility
    {
        get => _facility;
        set
        {
            if (_facility != value)
            {
                _facility = value;
                FacilityChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<FacilityDetailDTO> FacilityChanged { get; set; }
    [Parameter] public EventCallback OnLoad{ get; set; }

    //원본 데이터
    FacilityDetailDTO OriginalFacility;
    //수정본 데이터
    FacilityDetailDTO UpdateFacility;

    //건물 위치
    List<PlaceRoomListDTO> PlaceLocation = new List<PlaceRoomListDTO>();
    PlaceRoomListDTO PlaceLocationSelect = new PlaceRoomListDTO();
    List<PlaceRoom> PlaceRoom = new List<PlaceRoom>();

    int SelectedBuildingId;
    int SelectedRoomId;

    // private List<string> ImageUrl = new List<string>();//이미지 프리뷰
    private List<byte[]> ImageUrl = new List<byte[]>();//이미지 프리뷰
    bool EditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadBuilginRoom();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Facility != null)
        {
            OriginalFacility = Facility.DeepCopy();
            UpdateFacility = Facility.DeepCopy();
            await ImgConvert();
        }

    }



    private async Task OnUpdate()
    {
        try
        {
            if (string.IsNullOrEmpty(Facility.Name) || Facility.RoomId == 0 || Facility.RoomId == null)
            {
                await JS.InvokeVoidAsync("alert", "필수값 * 을 확인해 주세요");
                return;
            }
            ResponseUnit<bool> resUpdate = await apiManager.PutAsync<bool>($"{FacType}Facility/sign/Update{FacType}Facility", UpdateFacility,true);
            if(resUpdate.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resUpdate.message);
                return;
            }

            await OnLoad.InvokeAsync();
            OnEdit();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "장비 수정 에러");
        }
    }

    //건물 + 위치 + 공간 조회
    private async Task OnLoadBuilginRoom()
    {
        try
        {
            ResponseList<PlaceRoomListDTO> resGet = await apiManager.GetListAsync<PlaceRoomListDTO>("Room/sign/GetPlaceRoomGroup");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            PlaceLocation = resGet.data;

        }
        catch (Exception ex)
        {

        }
    }

    /*
    * 이미지 변환
    */
    private async Task ImgConvert()
    {
        Console.WriteLine("여기");
        ImageUrl.Clear();
        if (Facility.Image != null &&
            !string.IsNullOrEmpty(Facility.ImageName)
            && !ImageUrl.Any(i => i.SequenceEqual(Facility.Image))
        )
        {
            ImageUrl.Add(Facility.Image);
        }
    }


    //건물선택
    private async Task OnBuildingChange(int buildingId)
    {
        PlaceRoom.Clear();
        if (buildingId == 0)
        {

            SelectedRoomId = 0;
            StateHasChanged();
            return;
        }

        SelectedBuildingId = buildingId;

        // SelectBuilding = Building?.Where(b => b.Id == SelectedBuildingId).FirstOrDefault();
        PlaceLocationSelect = PlaceLocation?.Where(b => b.Id == SelectedBuildingId).FirstOrDefault();
        //해당건물에 층전체 반복하여 위치 리스트 추가
        foreach (var i in PlaceLocationSelect.FloorList)
        {
            foreach (PlaceRoom room in i.RoomList)
            {
                PlaceRoom.Add(room);
            }
        }
        // Room = SelectBuilding.FloorList;

        SelectedRoomId = 0; // Reset floor selection when building changes
        StateHasChanged();
    }

    //위치 선택
    private void OnLocationChange(int locationId)
    {
        UpdateFacility.RoomId = locationId;

    }

    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();


        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);
        }
        if (ImageUrl.Count == 0)
        {
            ImageUrl.Add(temp[0]);
        }
        else
        {
            ImageUrl[0] = temp[0];
        }

        UpdateFacility.Image = temp[0];
        UpdateFacility.ImageName = names[0];

        StateHasChanged();
        await FacilityChanged.InvokeAsync(Facility);
    }


    private async void OnEdit()
    {
        UpdateFacility = OriginalFacility.DeepCopy();
        await ImgConvert();
        EditMode = !EditMode;
        
    }

    private void OnDelImg()
    {
        UpdateFacility.Image = null;
        UpdateFacility.ImageName = null;
        ImageUrl.Clear();
        StateHasChanged();
    }

}
