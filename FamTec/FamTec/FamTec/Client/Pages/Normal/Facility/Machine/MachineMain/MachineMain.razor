@page "/facility/{FacType}"
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Facility.Machine.MachineMain.Components
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase
@* @(ListFacility.Count == 0 || ListFacility == null ? "height" : "") *@
<div class="fac-container yappear">
    <div class="fac-wrap ">
        <div class="fac-header">
            <span class="title">
                @title 설비
            </span>
            @if (HasEditPermission())
            {
                <div class="header-options">
                    <Input Placeholder="목록에서 검색"
                           Type="text"
                           ValueChanged="OnSearch" />
                    <Button Name="등록" Width=true Type=0 OnClick="@onAdd" />
                    @if (DelList.Count > 0)
                    {
                        <Button Name="삭제" Width=true Type=1 OnClick="@OnIsDel" />
                    }

                </div>
            }
            
        </div>
        @if (FilterData == null)
        {
            <Loading/>
        }
        else
        {
            <FacilityTable ListData="FilterData" FacType="@FacType" OnCheck="OnChecked" Checkitems="@DelList" />
        }

    </div>
    
</div>
@if (isDel)
{
    <ModalBackground>
        <ChildComponent>
            <ConfirmModal OnConfirm="OnDelFac" OnCancel="OnIsDel" />
        </ChildComponent>
    </ModalBackground>
}
@code {
    [Parameter] public string FacType { get; set; }

    List<FacilityListDTO> ListFacility;
    List<FacilityListDTO> FilterData = new List<FacilityListDTO>();
    private string title = "";


    List<int> DelList = new List<int>();

    bool isDel = false;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        ConvertType();
        // ListFacility = new List<FacilityListDTO>();
        await OnLoadMahine();

    }

    protected override async Task OnParametersSetAsync()
    {
        ConvertType();
        // ListFacility = new List<FacilityListDTO>();
        await OnLoadMahine();

    }

    private void ConvertType()
    {
        title = FacType switch
        {
            "machine" => "기계",
            "electronic" => "전기",
            "lift" => "승강",
            "fire" => "소방",
            "construct" => "건물",
            "network" => "통신",
            "beauty" => "미화",
            "security" => "보안",
            _ => "Unknown"
        };
        StateHasChanged();
    }

    
    private async Task OnLoadMahine()
    {
        try
        {
            ResponseList<FacilityListDTO> resGetData = await apiManager.GetListAsync<FacilityListDTO>($"{FacType}Facility/sign/GetAll{FacType}Facility");
            foreach (var i in resGetData.data)
            {
                Console.WriteLine(i.Name);
            }
            if (resGetData.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGetData.message);
                return;
            }

            if (resGetData.data == null)
            {
                ListFacility = new List<FacilityListDTO>();
                FilterData = new List<FacilityListDTO>();
            }
            else
            {
                ListFacility = resGetData.data;
                FilterData = ListFacility;
            }
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }



    }

    //설비 삭제
    private async Task OnDelFac()
    {
        try
        {
            if(DelList.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제할 항목을 선택해주세요.");
                return;
            }
            ResponseUnit<bool> resDel = await apiManager.PutAsync<bool>($"{FacType}Facility/sign/Delete{FacType}Facility",DelList);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            DelList.Clear();
            await OnLoadMahine();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "삭제 실패");
        }
    }

    /*
     * 조회
     */
    private async void OnChecked((bool isChecked, int id) data)
    {
        if (data.isChecked)
        {
            DelList.Add(data.id);
        }
        else
        {
            DelList.Remove(data.id);
        }
    }


    private void onAdd()
    {
        Navigation.NavigateTo($"/facility/{FacType}/add");
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }

    //검색
    private string _searchText = "";
    private async Task OnSearch(string text)
    {
        _searchText = text;
        FilterData = String.IsNullOrEmpty(_searchText)
                                ? ListFacility
                                : ListFacility.Where(m => (m.Name?.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ?? false) ).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private void OnIsDel()
    {
        isDel = !isDel;
    }
}
