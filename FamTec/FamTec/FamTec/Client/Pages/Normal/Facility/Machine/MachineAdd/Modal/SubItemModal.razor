@using FamTec.Client.Pages.CommonComponents



@using FamTec.Shared.Client.DTO.Normal.Facility.Group
@using FamTec.Shared.Server.DTO

<div class="modal">
    <div class="hedaer">
        <span class="title">
            정보 추가
        </span>
    </div>
    <div class="input">
        <label>이름</label>
        <input type="text" placeholder="항목명" @bind-value=@Item.Name />
    </div>
    <div class="input">
        <InputCol Label="단위" Placeholder="단위" @bind-Value=@Item.Unit Unit=true/>
        
    </div>
    <div class="item-header">
        <span>값</span>
        <div class="btns">
            <Button Name="추가" Type="0" Width=true OnClick="OnInCreaseValueNum" />
            <Button Name="삭제" Type="1" Width=true OnClick="OnDeCreaseValueNum" />
        </div>
    </div>
    <ul class="value-ul">
        @foreach (var item in Item.ItemValues.Select((value, idx) => (value, idx)))
        {
            <li class="value-li">
                <input type="checkbox" @onchange="e=>OnCheck(e,item.idx)" />
                <input class="value-input" type="text" @bind-value=item.value.Values />
            </li>
        }
    </ul>

    <div class="btns">
        <Button Name="추가" Type="0" OnClick="OnAdded"/>
        <Button Name="취소" Type="1" OnClick="OnModal" />
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<AddGroupKey> OnAdd{ get; set; }

    List<int> Checked = new List<int>();
    AddGroupKey Item = new AddGroupKey();


    protected override async Task OnInitializedAsync()
    {
        Item.ItemValues = new List<AddGroupItemValueDTO>()
        {
            new AddGroupItemValueDTO
            {

            },
        };
    }

    private async void OnDeCreaseValueNum()
    {

        if (Item.ItemValues.Count - Checked.Count < 1)
        {
            await JS.InvokeVoidAsync("alert", "최소 1개의 값은 필요합니다.");
            return;
        }

        // Checked 리스트를 내림차순으로 정렬
        Checked.Sort((a, b) => b.CompareTo(a));

        foreach (var idx in Checked)
        {
            if (idx < Item.ItemValues.Count)
            {
                Item.ItemValues.RemoveAt(idx);
            }
        }

        // 삭제 후 Checked 리스트 초기화
        Checked.Clear();

        StateHasChanged();

    }

    private void OnCheck(ChangeEventArgs e, int idx)
    {
        //체크한 경우
        if ((bool)e.Value)
        {
            Checked.Add(idx);
        }
        else //체크 해제
        {
            if (Checked.Find(c => c == idx) == idx)
            {
                Checked.Remove(idx);
            }
        }
    }


    private async void OnInCreaseValueNum()
    {
        if(Item.ItemValues.Count >= 3)
        {
            await JS.InvokeVoidAsync("alert", "최대 3개까지 입력할 수 있습니다.");
            return;
        }
        Item.ItemValues.Add(new AddGroupItemValueDTO());
        StateHasChanged();
    }


    private async void OnAdded()
    {
        await OnAdd.InvokeAsync(Item);
        OnModal();
    }

    private void OnModal()
    {
        OnClose.InvokeAsync();
    }
}
