@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Material
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO


<div class="modal yappear">
    <div class="header">
        <span class="title">
            사용자재(@UseMaterial.MaterialName) 수정
        </span>
    </div>
    <div class="content">
        <div class="form">
            <div class="row">
                <TextField2 Label="품목 위치" Value="@UseMaterial.AddStore.RoomName" Color=true />
                <TextField2 Label="재고 수량" Value="@stockNum.ToString()" Color=true />
            </div>
            <InputCol Label="수량"
                      Placeholder="수량"
                      Max="@(MaxNum)"
                      Min="1"
                      ValueType="number"
                      @bind-Value="@ChangeNum" />

        </div>
    </div>
    <div class="btns">
        <Button Name="저장" Type="0" OnClick="OnUpdate" />
        <Button Name="취소" Type="1" OnClick="OnCanceled" />
    </div>
</div>

@code {
    [Parameter] public int UseMaterialId {get;set;}
    [Parameter] public int CurMaterialNum { get; set; }
    [Parameter] public int RoomName { get; set; }
    [Parameter] public InOutInventoryDTO UseMaterial { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnLoadMaintenance { get; set; }



    int stockNum;
    int ChangeNum;
    int MaxNum;

    protected override async Task OnInitializedAsync()
    {
        await OnLoadMaterialStock();
        ChangeNum = CurMaterialNum;
        MaxNum = stockNum;
    }

    private async void OnCanceled()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnLoadMaterialStock()
    {
        try
        {
            ResponseUnit<LocationMaterial> resGet = await apiManager.GetUnitAsync<LocationMaterial>($"Store/sign/GetLocationMaterialNum?materialid={UseMaterial.MaterialID}&roomid={UseMaterial.AddStore.RoomID}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            stockNum = resGet.data.Num;

        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }


    private async Task OnUpdate()
    {
        try
        {
            Console.WriteLine(ChangeNum);
            if(ChangeNum == CurMaterialNum)
            {
                await JS.InvokeVoidAsync("alert", "수량이 변경되지 않았습니다.");
                return;
            }
            if(ChangeNum > MaxNum)
            {
                await JS.InvokeVoidAsync("alert", "변경 수량이 재고 수량보다 많습니다.");
                return;
            }

            UseMaterial.AddStore.Num = ChangeNum;

            await OnLoadMaintenance.InvokeAsync();
            OnCanceled();

        }catch(Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert","저장 실패");
        }
    }


}
