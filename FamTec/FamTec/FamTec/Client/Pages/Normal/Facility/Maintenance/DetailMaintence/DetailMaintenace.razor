@page "/facility/{FacType}/{FacId:int}/maintenance/{MaintenanceId:int}"
@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Facility.Maintenance.DetailMaintence.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO


<div class="container">
    @* <InfoCard @bind-Maintenance=Maintenance OriginalMaintenance="@OriginalMaintenance" /> *@
    <InfoCard 
        Maintenance="@Maintenance" 
        OnLoadMaintenance="OnLoadMaintenance" 
        OnEditMode="OnEdit" 
        EditMode=_useMaterialEditMode 
        FacType="@FacType"
        UpdateUseMaterial="@updateMaterial"
        OnExport=@Export
        />

    @if(Maintenance == null)
    {
        <Loading/>
    }
    else
    {
        @if (Maintenance.Type == 0)
        {
            @if (_useMaterialEditMode)
            {
                <SearchMaterial @bind-Data=@SelectMaterial EditMode=_useMaterialEditMode />
                @if (SelectMaterial.Id != 0)
                {
                    <OutForm MaterialId="SelectMaterial.Id" @bind-AddItem="@addMaterial" />
                    <div class="btn">
                        <Button Name="자재 추가" Width=true Type="0" OnClick=@OnAddMaterial />
                    </div>
                }
            }
            <InOutList ListData="@(_useMaterialEditMode ? updateMaterial : originalMaterial)"
                       EditMode=_useMaterialEditMode
                       FacType="@FacType"
                       OnEdit="OnEdit"
                       OnLoadMaintenance="OnLoadMaintenance"
                       MaintenanceId=MaintenanceId />
        }
    }

    

</div>

@code {
    [Parameter] public string FacType { get; set; }
    [Parameter] public int FacId { get; set; }
    [Parameter] public int MaintenanceId {get;set;}

    MaterialSearchListDTO SelectMaterial = new MaterialSearchListDTO();

    //테이블 타입
    UpdateMaintancematerialDTO updateMaterial;
    UpdateMaintancematerialDTO originalMaterial;

    DetailMaintenanceDTO Maintenance;
    //원본 유지보수 데이터
    DetailMaintenanceDTO OriginalMaintenance;

    List<InOutInventoryDTO> UseMaterial = new List<InOutInventoryDTO>(); //사용자재


    //=====사용자재추가=======
    AddMaintetanceMaterialDTO AddMaintenance = new AddMaintetanceMaterialDTO();
    MaterialDTO addMaterial = new MaterialDTO();


    //입출고 데이터



    //사용자재 목록 편집 상태 변수
    bool _useMaterialEditMode = false; 


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await OnLoadMaintenance();
    }

    /// <summary>
    /// 유지보수 정보 조회
    /// </summary>
    /// <returns></returns>
    private async Task OnLoadMaintenance()
    {
        try
        {
            ResponseUnit<DetailMaintenanceDTO> resGet = await apiManager.GetUnitAsync<DetailMaintenanceDTO>($"Maintenance/sign/GetDetailMaintance?Maintanceid={MaintenanceId}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if (resGet.data == null)
            {
                Maintenance = new DetailMaintenanceDTO();
            }
            else
            {
                Maintenance = new DetailMaintenanceDTO(resGet.data);
                Maintenance.UseMaterialList = new List<UseMaterialDTO>(resGet.data.UseMaterialList);
            }
            
            await OnConverTableData(Maintenance);
            // await OnConverDTO();
        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }


    //새 형태 테이블
    private async Task OnConverTableData(DetailMaintenanceDTO data)
    {
        if(data.UseMaterialList == null)
        {
            updateMaterial = new UpdateMaintancematerialDTO();
            originalMaterial = new UpdateMaintancematerialDTO();
            return;
        }
        updateMaterial = new UpdateMaintancematerialDTO();
        updateMaterial.MaintanceID = data.MaintanceID;
        originalMaterial = new UpdateMaintancematerialDTO();
        originalMaterial.MaintanceID = data.MaintanceID;
        foreach (UseMaterialDTO m in data.UseMaterialList)
        {
            originalMaterial.UpdateUsematerialDTO.Add(new UpdateUseMaterialDTO()
                {
                    MaterialID = m.MaterialID,
                    MaterialCode = m.MaterialCode,
                    MaterialName = m.MaterialName,
                    RoomName = m.RoomName,
                    Unit = m.Unit,
                    UseID = m.ID,
                    RoomID = m.RoomID,
                    Num = m.Num,
                    Note = m.Note,
                    Price = m.TotalPrice
                });
            updateMaterial.UpdateUsematerialDTO.Add(new UpdateUseMaterialDTO()
            {
                    MaterialID = m.MaterialID,
                    MaterialCode = m.MaterialCode,
                    MaterialName = m.MaterialName,
                    RoomName = m.RoomName,
                    Unit = m.Unit,
                    UseID = m.ID,
                    RoomID =m.RoomID,
                    Num = m.Num,
                    Note = m.Note,
                    Price = m.TotalPrice
            });
        }

    }







    //추가항목 추가
    private async Task OnAddMaterial()
    {
        try
        {
            if (Maintenance.WorkDT == null ||
                addMaterial.Num == 0 ||
                SelectMaterial.Id == 0 ||
                addMaterial.RoomID == 0 ||
                Maintenance.Type != 0
            )
            {
                await JS.InvokeVoidAsync("alert", "출고 내용의 필수값 * 을 확인해주세요.");
                addMaterial = new MaterialDTO();
                StateHasChanged();
                return;
            }
            if (updateMaterial.UpdateUsematerialDTO.Any(m => m.MaterialID == SelectMaterial.Id && m.RoomID == addMaterial.RoomID))
            {
                await JS.InvokeVoidAsync("alert", "이미 추가된 자재입니다.");
                return;
            }
            ResponseUnit<InOutInventoryDTO> resGet = await apiManager.GetUnitAsync<InOutInventoryDTO>($"Store/sign/AddOutStoreList?roomid={addMaterial.RoomID}&materialid={SelectMaterial.Id}&outcount={addMaterial.Num}");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                addMaterial = new MaterialDTO();
                StateHasChanged();
                return;
            }
            updateMaterial.UpdateUsematerialDTO.Add(new UpdateUseMaterialDTO
                {
                    UseID = 0,
                    MaterialID = resGet.data.MaterialID.Value,
                    MaterialCode = SelectMaterial.Code,
                    MaterialName = SelectMaterial.Name,
                    RoomName = resGet.data.AddStore.RoomName,
                    Unit = SelectMaterial.Unit,
                    RoomID = resGet.data.AddStore.RoomID.Value,
                    Num = resGet.data.AddStore.Num,
                    Note = resGet.data.AddStore.Note,
                    Price = resGet.data.AddStore.TotalPrice
                });
            SelectMaterial = new MaterialSearchListDTO();

            addMaterial = new MaterialDTO();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "추가 실패");
        }
    }

    //추가 사용자재 단일이지만 리스트로 구현되어 일단 리스트로 사용하기로함
    private async Task OnSum()
    {
        AddMaintenance.MaintanceID = MaintenanceId;
        MaterialDTO tempMaterial = new MaterialDTO();
        tempMaterial.MaterialID = SelectMaterial.Id;
        tempMaterial.RoomID = addMaterial.RoomID;
        tempMaterial.Num = addMaterial.Num;
        tempMaterial.Note = addMaterial.Note;
        AddMaintenance.MaterialList.Add(tempMaterial);
    }



    private void OnEdit()
    {
        _useMaterialEditMode = !_useMaterialEditMode;
        if (!_useMaterialEditMode)
        {
            updateMaterial = new UpdateMaintancematerialDTO(){
                    MaintanceID = originalMaterial.MaintanceID,
                    UpdateUsematerialDTO = new List<UpdateUseMaterialDTO>() { }
            };

            foreach (UpdateUseMaterialDTO use in originalMaterial.UpdateUsematerialDTO)
            {
                updateMaterial.UpdateUsematerialDTO.Add(new UpdateUseMaterialDTO(use));
            }

            
        }
    }

    /// <summary>
    /// 엑셀 내보내기
    /// </summary>
    /// <returns></returns>
    private async Task Export()
    {
        if (Maintenance == null)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        var excel = ExcelService.getInstance(JS);
        string date = DateTime.Now.ToString("yyyyMMdd");
        string title = $"{Maintenance.WorkName}_유지보수_{date}";
        await excel.ExportFacMaintenance(Maintenance, originalMaterial.UpdateUsematerialDTO, title);
    }
}
