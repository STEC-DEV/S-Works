@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="list yappear">
    <div class="header">
        <span class="title">
            사용 자재 목록
        </span>
        @if (HasEditPermission())
        {
            
            <div class="option">
                    @if (DelUseMaterial.Count > 0)
                    {
                        <Button Name="삭제" Width=true Type="1" OnClick="OnDel" />
                    }
                
            </div>

        }

        

    </div>
    @if(ListData == null)
    {
        <Loading/>
    }
    else
    {
        <div class="content">
        <InOutTable 
            ListData="@ListData" 
            OnCheck=OnCheck 
            EditMode=EditMode
            CheckItems="DelUseMaterial"
            OnLoadMaintenance="OnLoadMaintenance"
            />
    </div>
    }

</div>

@code {
    [Parameter] public string Title{ get; set; }
    // [Parameter] public List<InOutInventoryDTO> ListData { get; set; }
    // [Parameter] public List<UseMaterialDTO> ListData { get; set; }
    [Parameter] public UpdateMaintancematerialDTO ListData { get; set; }
    [Parameter] public int MaintenanceId { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public string FacType { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnLoadMaintenance { get; set; }


    List<UpdateUseMaterialDTO> DelUseMaterial = new List<UpdateUseMaterialDTO>();

    List<int> CheckMaterial = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private async Task OnDel()
    {

        if(DelUseMaterial.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "삭제항목이 존재하지 않습니다.");
            return;
        }
        foreach (UpdateUseMaterialDTO del in DelUseMaterial)
        {
            ListData.UpdateUsematerialDTO.Remove(del);
        }
        DelUseMaterial.Clear();

        StateHasChanged();
    }



    private void OnCheck((bool isCheck, UpdateUseMaterialDTO material) data)
    {
        if (data.isCheck)
        {
            DelUseMaterial.Add(data.material);
        }
        else
        {
            DelUseMaterial.Remove(data.material);
        }
    }

    private void OnEditMode()
    {
        DelUseMaterial.Clear();
        OnEdit.InvokeAsync();
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
}
