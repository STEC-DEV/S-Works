@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Material.InOut
@using FamTec.Shared.Server.DTO
@inherits PermissionComponentBase

<div class="list yappear">
    <div class="header">
        <span class="title">
            사용 자재 목록
        </span>
        @if (HasEditPermission())
        {
            <div class="option">
                @if (!EditMode)
                {
                    <Button Name="편집" Width=true OnClick="OnEditMode" />
                }
                else
                {
                    if (DelUseMaterial.UseMaintenenceIDs.Count != 0)
                    {
                        <Button Name="삭제" Width=true Type="1" OnClick="OnDel" />
                    }
                    <Button Name="취소" Width=true Type="2" OnClick="OnEditMode" />
                }
            </div>
        }

        

    </div>
    <div class="content">
        <InOutTable 
            ListData="@ListData" 
            OnCheck=OnCheck 
            EditMode=EditMode
            OnLoadMaintenance="OnLoadMaintenance"
            />
    </div>
</div>

@code {
    [Parameter] public string Title{ get; set; }
    // [Parameter] public List<InOutInventoryDTO> ListData { get; set; }
    [Parameter] public List<UseMaterialDTO> ListData { get; set; }
    [Parameter] public int MaintenanceId { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public string FacType { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnLoadMaintenance { get; set; }


    DeleteUseMaterialDTO DelUseMaterial = new DeleteUseMaterialDTO();

    List<int> CheckMaterial = new List<int>();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }


    private async Task OnDel()
    {
        try
        {
            DelUseMaterial.MaintanceID = MaintenanceId;
            if(DelUseMaterial.MaintanceID == 0 || DelUseMaterial.UseMaintenenceIDs.Count == 0)
            {
                await JS.InvokeVoidAsync("alert", "삭제 항목이 없습니다.");
                return;
            }
            ResponseUnit<bool> resDel = await apiManager.PostAsync<bool>("Maintenance/sign/DeleteMaintenanceStore", DelUseMaterial);
            if(resDel.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resDel.message);
                return;
            }
            await OnLoadMaintenance.InvokeAsync();
            StateHasChanged();

        }catch(Exception ex)
        {
            Console.WriteLine("[유지보수][사용자재] 삭제 에러" + ex);
            await JS.InvokeVoidAsync("alert", "[유지보수][사용자재] 삭제 에러");
        }
    }



    private void OnCheck((bool isCheck, UseMaterialDTO material)data)
    {
        if (data.isCheck)
        {
            DelUseMaterial.UseMaintenenceIDs.Add(data.material.ID);
        }
        else
        {
            DelUseMaterial.UseMaintenenceIDs.Remove(data.material.ID);
        }
    }

    private void OnEditMode()
    {
        DelUseMaterial.UseMaintenenceIDs.Clear();
        OnEdit.InvokeAsync();
    }

    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
}
