@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO


<div class="infocard-container">
    <div class="infocard-header">
        <span>
            유지보수 정보
        </span>
    </div>
    <div class="infocard-content">
        <div class="infocard-img-area">
            <PreviewBox ImageUrls="@ImageUrl" />
            <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
        </div>
        <div class="infocard-inputs">
            <DateInput Label="작업일자"
                       Row="true"
                       @bind-Date=@Maintenance.WorkDT
                       Placeholder="YYYYMMDD" />
            <InputCol Label="작업명"
                      Placeholder="작업명"
                      Row="true"
                      @bind-Value=@Maintenance.Name />
            <SelectField Key="WorkType"
                         SelectData="WorkType"
                         @bind-Value="Maintenance.Type"
                         OnChange="OnWorkTypeChange"
                         Label="작업 구분"
                         Row="true"
                         EditMode="true" />

            <InputCol Label="작업자"
                      Placeholder="작업자"
                      Row="true"
                      @bind-Value=@Maintenance.Worker />
            @if(Maintenance.Type == 1)
            {
                <TextField2
                    Label="쇼요비용"
                    Row=true
                    Value="@TotalPrice.ToString()"
                    />
            }
            else
            {
                <InputCol Label="소요비용"
                          Placeholder="소요비용"
                          @bind-Value=@Maintenance.TotalPrice
                          ValueType="number"
                          Row=true />
            }
            

        </div>
    </div>
</div>

@code {
    // [Parameter]public FacilityDetailDTO Facility { get; set; }
    private AddMaintenanceDTO _maintenance;
    [Parameter] public float TotalPrice {get; set;}
    [Parameter]
    public AddMaintenanceDTO Maintenance
    {
        get => _maintenance;
        set
        {
            if (_maintenance != value)
            {
                _maintenance = value;
                MaintenanceChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<AddMaintenanceDTO> MaintenanceChanged { get; set; }


    //건물, 위치정보 조회 변수
    List<BuildingFloorListDTO> Building = new List<BuildingFloorListDTO>();
    BuildingFloorListDTO SelectBuilding = new BuildingFloorListDTO();
    //건물 선택 시 할당받을 위치 변수
    List<BuildingFloor> Room = new List<BuildingFloor>();

    int SelectedWorkType;

    private List<string> ImageUrl = new List<string>();//이미지 프리뷰
    bool EditMode = true;

    List<object> WorkType = new List<object>()
    {
        new
        {
            Id = 1,
            Name = "자체 작업"
        },
        new
        {
            Id = 2,
            Name = "외주 작업"
        },
    };

    protected override async Task OnInitializedAsync()
    {

    }


    //작업 구분 선택
    private async Task OnWorkTypeChange(int worktype)
    {

        if (worktype == 0)
        {
            SelectedWorkType = 0;
            Maintenance.Num = 0;
            Maintenance.UnitPrice = 0;

            StateHasChanged();
            return;
        }
        SelectedWorkType = worktype;
        Maintenance.Type = SelectedWorkType;
        await MaintenanceChanged.InvokeAsync(Maintenance);
        StateHasChanged();
    }



    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            Maintenance.Image = image.Image;
            Maintenance.ImageName = image.Name;
            ImageUrl.Add(image.ImageUrl);
        }
        StateHasChanged();
        await MaintenanceChanged.InvokeAsync(Maintenance);
    }


}
