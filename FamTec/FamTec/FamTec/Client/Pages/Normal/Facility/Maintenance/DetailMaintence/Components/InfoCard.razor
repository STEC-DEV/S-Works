@inherits PermissionComponentBase
@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Client.DTO.Normal.Location
@using FamTec.Shared.Server.DTO


<div class="infocard-container yappear">
    <div class="infocard-header">
        <span>
            유지보수 정보
        </span>
        @if (HasEditPermission())
        {
            <div class="option">
                @if (EditMode)
                {
                    <div class="btns">
                        <Button Name="저장" Width=true Type="0" OnClick="OnUpdate" />
                        <Button Name="취소" Width=true Type="1" OnClick="OnEdit" />
                    </div>

                }
                else
                {
                    <Button Name="편집" Width=true Type="0" OnClick="OnEdit" />
                }
                 <div class="icon" @onclick=Export>
                    <ExportIcon />
                </div>
            </div>
        }
    </div>
    <div class="infocard-content">
        @if(Maintenance == null)
        {
            <Loading/>

        }
        else
        {
            <div class="infocard-img-area">
                <ImageSlider Label="대표 이미지" Images="@ImageUrl"/>
                @if (EditMode)
                {
                    <div class="img-btn">
                        <InputImages MaxFilesNum="1" OnChange="OnUploadImage" />
                        @if(ImageUrl.Count > 0)
                        {
                            <Button Name="삭제" Width=true Type="1" OnClick="OnDelImg" />
                        }

                    </div>
                }
                
            </div>
            <div class="infocard-inputs">
                @if (EditMode)
                {
                    <TextField2 Label="작업년월"
                                Row=true
                                Value="@UpdateMaintenance.WorkDT" />
                    <InputCol Label="작업명"
                              Placeholder="작업명"
                              Required="true"
                              Row="true"
                              @bind-Value=@UpdateMaintenance.WorkName />
                    <TextField2 Label="작업구분"
                                Row=true
                                Value="@(UpdateMaintenance.Type == 0? "자체 작업" : "외주 작업")" />
                    <InputCol Label="작업자"
                              Placeholder="작업자"
                              Required="true"
                              Row="true"
                              @bind-Value=@UpdateMaintenance.Worker />
                    <TextField2 Label="소요 비용"
                                Row=true
                                Value="@UpdateMaintenance.TotalPrice.ToString()" />

                }
                else
                {
                    <TextField2 Label="작업년월"
                                Row=true
                                Value="@Maintenance.WorkDT" />
                    <TextField2 Label="작업명"
                                Row=true
                                Value="@Maintenance.WorkName" />
                    <TextField2 Label="작업구분"
                                Row=true
                                Value="@(Maintenance.Type == 0? "자체 작업" : "외주 작업")" />
                    <TextField2 Label="작업자"
                                Row=true
                                Value="@Maintenance.Worker" />
                    <TextField2 Label="소요 비용"
                                Row=true
                                Value="@Maintenance.TotalPrice.ToString()" />
                }

            </div>
        }
        
    </div>
</div>

@code {
    [Parameter] public float TotalPrice { get; set; }
    [Parameter] public DetailMaintenanceDTO Maintenance { get; set; }
    [Parameter] public EventCallback OnLoadMaintenance { get; set; }
    [Parameter] public EventCallback OnEditMode { get; set; }
    [Parameter] public bool EditMode { get; set; }
    [Parameter] public UpdateMaintancematerialDTO UpdateUseMaterial { get; set; }
    [Parameter] public string FacType { get; set; }
    [Parameter] public EventCallback OnExport { get; set; }
    // [Parameter] public EventCallback<DetailMaintenanceDTO> MaintenanceChanged { get; set; }

    DetailMaintenanceDTO UpdateMaintenance;
    UpdateMaintenanceInfo updateMaintenance = new UpdateMaintenanceInfo();

    //건물, 위치정보 조회 변수
    List<BuildingFloorListDTO> Building = new List<BuildingFloorListDTO>();
    BuildingFloorListDTO SelectBuilding = new BuildingFloorListDTO();
    //건물 선택 시 할당받을 위치 변수
    List<BuildingFloor> Room = new List<BuildingFloor>();

    int SelectedWorkType = 0;

    // private List<string> ImageUrl = new List<string>();//이미지 프리뷰
    private List<byte[]> ImageUrl = new List<byte[]>();//이미지 프리뷰
                                                       // bool EditMode = false;


    List<object> WorkType = new List<object>()
    {
        new
        {
            Id = 0,
            Name = "자체 작업"
        },
        new
        {
            Id = 1,
            Name = "외주 작업"
        },
    };

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // if (Maintenance != null)
        // {
        //     UpdateMaintenance = Maintenance.DeepCopy();
        // }
        if (Maintenance != null)
        {
            UpdateMaintenance = new DetailMaintenanceDTO(Maintenance);
        }
        
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Maintenance != null)
        {
            UpdateMaintenance = Maintenance.DeepCopy();
            await ImgConvert();
        }
    }


    private async void OnUploadImage(List<ImageFile> images)
    {
        ImageUrl.Clear();
        List<byte[]> temp = new List<byte[]>();
        List<string> names = new List<string>();

        foreach (var image in images)
        {
            temp.Add(image.Image);
            names.Add(image.Name);
        }
        if (ImageUrl.Count == 0)
        {

            ImageUrl.Add(temp[0]);
        }
        else
        {

            ImageUrl[0] = temp[0];
        }
        UpdateMaintenance.Image = temp[0];
        UpdateMaintenance.ImageName = names[0];
        StateHasChanged();
        // await MaintenanceChanged.InvokeAsync(Maintenance);
    }


    private async Task OnUpdate()
    {
        try
        {
            if (string.IsNullOrEmpty(UpdateMaintenance.Worker) || string.IsNullOrEmpty(UpdateMaintenance.WorkName))
            {
                await JS.InvokeVoidAsync("alert", "필수값 * 을 확인해 주세요");
                return;
            }

            ResponseUnit<bool> resUpdate = await apiManager.PutAsync<bool>("Maintenance/sign/UpdateMaintenance", UpdateMaintenance, true);
            if(resUpdate.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resUpdate.message);
                return;
            }
            ResponseUnit<bool> resMUpdate = await apiManager.PostAsync<bool>("Maintenance/sign/UpdateSupMaintenance", UpdateUseMaterial);
            if(resMUpdate.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resUpdate.message);
                return;
            }
            OnEdit();
            await OnLoadMaintenance.InvokeAsync();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "유지보수 정보 수정 에러");
        }
    }

    /*
    * 이미지 변환
    */
    private async Task ImgConvert()
    {
        ImageUrl.Clear();
        if (Maintenance.Image != null &&
            !string.IsNullOrEmpty(Maintenance.ImageName)
            && !ImageUrl.Any(i => i.SequenceEqual(Maintenance.Image))
        )
        {
            ImageUrl.Add(Maintenance.Image);
        }
    }

    private async void OnEdit()
    {
        // EditMode = !EditMode;
        await OnEditMode.InvokeAsync();
        await ImgConvert();
        UpdateMaintenance = Maintenance.DeepCopy();
    }

    private void OnDelImg()
    {
        UpdateMaintenance.Image = null;
        UpdateMaintenance.ImageName = null;
        ImageUrl.Clear();
        StateHasChanged();
    }
    private bool HasEditPermission()
    {
        return FacType switch
        {
            "machine" => MACHINE,
            "electronic" => ELEC,
            "lift" => LIFT,
            "fire" => FIRE,
            "construct" => CONSTRUCT,
            "network" => NETWORK,
            "beauty" => BEAUTY,
            "security" => SECURITY,
            _ => false
        };
    }
    private async void Export()
    {
        await OnExport.InvokeAsync();
    }
}
