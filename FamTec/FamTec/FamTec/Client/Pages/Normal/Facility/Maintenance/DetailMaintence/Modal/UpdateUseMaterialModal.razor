@using FamTec.Client.Pages.CommonComponents
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Client.DTO.Normal.Facility.Maintenance
@using FamTec.Shared.Server.DTO


<div class="modal yappear">
    <div class="header">
        <span class="title">
            사용자재(@UseMaterial.MaterialName) 수정
        </span>
    </div>
    <div class="content">
        <div class="list">
            <span class="label">
                입출고 내역
            </span>
            <div class="list-wrap">
                <table class="table">
                    <thead class="thead">
                        <tr class="th-tr">
                            <th class="th"><span>입출고일시</span></th>
                            <th class="th"><span>구분</span></th>
                            <th class="th"><span>단가</span></th>
                            <th class="th"><span>수량</span></th>
                        </tr>
                    </thead>
                    <tbody class="body">
                        @foreach (UseDetailStoreDTO material in UseMaterial.UseList)
                        {
                            <tr class="tr">
                                <td class="td">2024-10-17 17:53:28</td>
                                <td class="td">@(material.InOut == 0 ? "출고" : "입고")</td>
                                <td class="td">@material.UnitPrice</td>
                                <td class="td">@material.Num</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>       
        </div>
        <div class="form">
            <div class="row">
                <TextField2 Label="품목 위치" Value="@UseMaterial.RoomName" Color=true />
                <TextField2 Label="재고 수량" Value="@UseMaterial.TotalAvailableInventory.ToString()" Color=true />
            </div>
            <InputCol Label="수량"
                      Placeholder="수량"
                      Max="@(MaxNum)"
                      Min="1"
                      ValueType="number"
                      @bind-Value="@ChangeNum" />

        </div>
    </div>
    <div class="btns">
        <Button Name="저장" Type="0" OnClick="OnUpdate" />
        <Button Name="취소" Type="1" OnClick="OnCanceled" />
    </div>
</div>

@code {
    // [Parameter] public int UseMaterialId {get;set;}
    // [Parameter] public int CurMaterialNum { get; set; }
    [Parameter] public UpdateUseMaterialDTO Data { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnLoadMaintenance { get; set; }
    //수정 변수
    UpdateMaintenanceMaterialDTO UpdateUseMaterial = new UpdateMaintenanceMaterialDTO();
    //사용자재 상세조회 변수
    UseMaterialDetailDTO UseMaterial = new UseMaterialDetailDTO();
    int ChangeNum;
    int MaxNum;

    protected override async Task OnInitializedAsync()
    {
        await OnLoadDetailUseMaterial();
        ChangeNum = Data.Num;
        MaxNum = UseMaterial.TotalAvailableInventory + Data.Num;
    }

    private async void OnCanceled()
    {
        await OnCancel.InvokeAsync();
    }

    private async Task OnLoadDetailUseMaterial()
    {
        try
        {
            ResponseUnit<UseMaterialDetailDTO> resGet = await apiManager.GetUnitAsync<UseMaterialDetailDTO>($"UseMaintenence/sign/GetDetailUseMaterial?useid={Data.UseID}&materialid={Data.MaterialID}&roomId={Data.RoomID}");
            if(resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            UseMaterial = resGet.data;

        }catch(Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "조회 실패");
        }
    }

    private async Task OnUpdate()
    {

        if(ChangeNum == Data.Num)
        {
            await JS.InvokeVoidAsync("alert", "변경 사항이 존재하지 않습니다.");
            return;
        }
        if(ChangeNum > MaxNum)
        {
            await JS.InvokeVoidAsync("alert", "재고 수량을 초과하였습니다.");
            return;
        }
        Data.Num = ChangeNum;
        OnCanceled();

    }

    private async Task OnSumUpdateData()
    {
        UpdateUseMaterial.MaintanceID = UseMaterial.MaintenanceId;
        UpdateUseMaterial.MaterialID = UseMaterial.MaterialId; //자재 아이디
        UpdateUseMaterial.RoomID = UseMaterial.RoomId;
        UpdateUseMaterial.UseMaintanceID = UseMaterial.UseMaterialId;//사용자재 테이블
        UpdateUseMaterial.Num = ChangeNum;

    }
}
