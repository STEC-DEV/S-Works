@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.CommonComponents.IconButton
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.utill
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.DTO.Normal.Facility
@using System.Web


<div class="container yappear">
    <div class="wrap">
        <div class="header">
            <span class="title">
                유지보수 이력
            </span>
            <div class="option">
                @if(Data?.Count != 0)
                {
                    <ExportButton OnClick="Export" />
                }
            </div>
        </div>
        <div class="option @(SearchOption !=0 ? "flex-end":null)">
            @if (SearchOption == 0)
            {
                <div class="vochistory-slider  @(SearchOption == 1 ? "date-none" : "")">
                    <DateSlider CreateDate="@createdate" OnChanged="OnSelectDate" CurDate="@CurrentDate" />
                </div>
            }
            
            <div class="option-page">
                
                @if(totalPage > 1)
                {
                    <Pagenation TotalPage="@totalPage" CurrentPage="@currentPage" OnChanged="OnMovePage" />
                }
                <Viewer OnChanged="OnChangeViewNum" />
            </div>
            
        </div>
        <div class="content">
            @if (FilterData == null)
            {
                <Loading/>
            }
            else
            {
                <HistoryTable ListData="@FilterData" />
            }
            
        </div>
    </div>
    
</div>

@code {
    // [Parameter] public List<AllMaintanceHistoryDTO> MonthData{ get; set; }
    [Parameter] public List<MaintanceHistoryDTO> Data { get; set; }
    [Parameter] public int SearchOption { get; set; }
    [Parameter] public DateTime CurrentDate { get; set; }
    [Parameter] public EventCallback<DateOnly> OnDateChange { get; set; }
    [Parameter] public string SearchParam { get; set; }
    List<MaintanceHistoryDTO> FilterData;
    List<MaintanceHistoryDTO> originalData = new List<MaintanceHistoryDTO>();


    //사업장 생성일자 필요함
    public DateTime createdate;

    //페이징
    private int currentPage = 1;
    private int totalPage;  //전체 페이지 수

    //뷰
    int viewNum = 25;

    //월별
    string curDate;

    protected async override Task OnInitializedAsync()
    {
        createdate = await (_authStateProvider as CustomAuthProvider).GetPlaceCreate();

    }


    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("옵션" + SearchOption);

        if (Data != null)
        {
            originalData = new List<MaintanceHistoryDTO>(Data);
            Console.WriteLine(originalData.Count);
            await Paging();
        }
        StateHasChanged();

    }



    //현재 선택한 년월
    private async Task OnSelectDate(DateOnly date)
    {
        await OnDateChange.InvokeAsync(date);
    }


    //페이지 필터링
    private async Task Paging()
    {

        // Console.WriteLine("============페이징 실행============");
        if (originalData == null || !originalData.Any())
        {
            totalPage = 1;
            currentPage = 1;
            FilterData = new List<MaintanceHistoryDTO>();

            StateHasChanged();
            return;
        }
        FilterData = new List<MaintanceHistoryDTO>();
        totalPage = (int)Math.Ceiling((double)originalData.Count / viewNum);
        currentPage = Math.Min(currentPage, totalPage);
        int skip = (currentPage - 1) * viewNum;
        FilterData = originalData.Skip(skip).Take(viewNum).ToList();
        // Console.WriteLine(FilterData.Count());
        // Console.WriteLine($"[페이징] 전체 데이터 수: {originalData?.Count}, 현재 페이지: {currentPage}, 총 페이지: {totalPage}");
        // Console.WriteLine("============페이징 끝============");
        StateHasChanged();
    }


    //viewr
    private async Task OnChangeViewNum(int value)
    {
        viewNum = value;
        // currentPage = 1;
        await Paging();
    }

    //페이지 이동 핸들링
    private async Task OnMovePage(int num)
    {
        if (num == -2)
            currentPage = Math.Min(currentPage + 1, totalPage);
        else if (num == -1)
            currentPage = Math.Max(currentPage - 1, 1);
        else
            currentPage = Math.Clamp(num, 1, totalPage);

        await Paging();
    }
    
    private async Task Export()
    {
        if (Data.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "데이터가 존재하지 않습니다.");
            return;
        }
        List<string> colName = new List<string>
        {
            "설비유형",
            "작업년월",
            "수리(보수)이력",
            "작업구분",
            "작업자",
            "사용자재",
            "소요비용",
        };
        var excel = ExcelService.getInstance(JS);
        string title = $"유지보수이력_{CurrentDate.ToString("yyyyMM")} ";
        if (SearchOption == 1)
        {
            await OnParseQueryStringv2();
            title = $"유지보수이력_{startDt}_{endDt}";
        }
        await excel.ExportMaintenanceData(Data, colName, CurrentDate.ToString("yyyyMM"), title);
    }

    string startDt;
    string endDt;
    private async Task OnParseQueryStringv2()
    {

        var parameters = HttpUtility.ParseQueryString(SearchParam);
        startDt = parameters["startDate"].Replace("-","");
        endDt = parameters["endDate"].Replace("-", "");
    }
}
