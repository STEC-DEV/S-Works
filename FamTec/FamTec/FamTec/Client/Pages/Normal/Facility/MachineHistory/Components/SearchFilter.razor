@using FamTec.Client.Pages.CommonComponents
@using FamTec.Client.Pages.Normal.Location.LocationMain.Components
@using FamTec.Client.Pages.Normal.Voc.VocMain.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Server.DTO
@using System.Web
<div class="container">
    <div class="filter-wrap">
        <div class="header">
            <span class="title">
                조회 조건
            </span>
            <Button Name="조회" Width=true Type="0" OnClick="OnSearch" />
        </div>
        <div class="content">
            <div class="filter-date">
                @* 조회기간 컴포넌트 시작 *@
                <span class="filter-date-title">
                    조회기간
                </span>
                <div class="filter-date-content">
                    <div class="filter-date-item">
                        <div class="item-group">
                            <input type="radio" name="date" value=0 @onchange=OnDateOptionChanged checked="@(selectDefaultOption==0)">
                            <span class="label">월간</span>
                        </div>
                    </div>
                    <div class="filter-date-item">
                        <div class="item-group">
                            <input type="radio" name="date" value=1 @onchange=OnDateOptionChanged checked="@(selectDefaultOption==1)">
                            <span class="label">기간 설정</span>
                        </div>
                        <div class="@(selectDefaultOption != 1 ? "none" : "") ">
                            <InputDuration 
                                Row="true"
                                StartDT="@startDt" 
                                EndDT="@endDt" 
                                StartDTChanged="@(newDate => startDt = newDate)"
                                           EndDTChanged="@(newDate => endDt = newDate)" />
                        </div>
                    </div>
                </div>
            </div>

            <MultiSelectDrop Row=true Label="설비유형" SelectItems="@FacType" OnSelectionChanged="HandleSelectionChange" />
            <MultiSelectDrop Row=true Label="작업구분" SelectItems="@WorkType" OnSelectionChanged="HandleSelectionChange" />
        </div>

    </div>
</div>

@code {

    [Parameter]
    public EventCallback<List<MaintanceHistoryDTO>> OnSearchDurationData { get; set; }
    [Parameter] public int DefaultOption { get; set; }
    [Parameter] public List<FilterItem> FacType { get; set; }
    [Parameter] public List<FilterItem> WorkType { get; set; }

    List<MaintanceHistoryDTO> DurationData = new List<MaintanceHistoryDTO>();

    private int selectDefaultOption = 0;
    private DateTime startDt = DateTime.Now;
    private DateTime endDt = DateTime.Now;



    protected override async Task OnInitializedAsync()
    {
    }

    private async Task ConvertType(List<int> facperm)
    {
        selectDefaultOption = DefaultOption;
    }

    //조회 기간
    private void OnDateOptionChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            selectDefaultOption = value;

        }
    }

    List<string> facType = new List<string>();
    List<int> workType = new List<int>();

    private async void OnSearch()
    {
        var parameters = HttpUtility.ParseQueryString(string.Empty);
        facType = FacTypeCheckData(FacType);
        workType = WorkCheckData(WorkType);
        Console.WriteLine(facType.Count);
        if (facType.Count == 0 || workType.Count == 0)
        {
            await JS.InvokeVoidAsync("alert", "조건을 선택해 주세요");
            return;
        }
        parameters["searchType"] = selectDefaultOption.ToString();
        if (selectDefaultOption == 1)
        {
            parameters["StartDate"] = startDt.ToString("yyyy-MM-dd");
            parameters["EndDate"] = endDt.ToString("yyyy-MM-dd");
        }

        parameters["category"] = string.Join(",", facType);
        parameters["type"] = string.Join(",", workType);
        //조건 추가해야함
        Navigation.NavigateTo($"/facility/history/{parameters}",false);
    }

    private string convertFactype(int facType)
    {
        return facType switch
        {
            1 => "기계",
            2 => "전기",
            3 => "승강",
            4 => "소방",
            5 => "건축",
            6 => "통신",
            7 => "미화",
            8 => "보안",
        };
    }


    //요소 선택
    private void HandleSelectionChange(List<FilterItem> selectedItems)
    {
        var selectedNames = string.Join(", ", selectedItems.Where(x => x.IsChecked).Select(x => x.Name));
        Console.WriteLine($"Selected items: {selectedNames}");
    }

    //체크된 요소 id 리스트 반환
    private List<int> WorkCheckData(List<FilterItem> items)
    {
        List<int> data = items.Where(i => i.IsChecked == true).Select(i => i.Id).ToList();

        return data;
    }
    private List<string> FacTypeCheckData(List<FilterItem> items)
    {
        List<string> data = items.Where(i => i.IsChecked == true).Select(i => i.Name).ToList();

        return data;
    }
}
