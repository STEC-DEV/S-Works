@page "/facility/history"
@page "/facility/history/{SearchParams}"
@using FamTec.Client.Pages.Normal.Facility.MachineHistory.Components
@using FamTec.Client.Shared.Provider
@using FamTec.Shared.Client.Class
@using FamTec.Shared.Client.DTO.Normal.Facility
@using FamTec.Shared.Server.DTO
@using System.Web

<div class="container yappear">
    <SearchFilter 
        FacType="@filterFacType"
        WorkType="@workType"
        DefaultOption="@FilterOption"
        />
    
    <MaintanenceHistory OnDateChange="HandleDateChanged"
                        Data=ListData
                        SearchOption="@FilterOption"
                        CurrentDate="curDate"
                        SearchParam="@SearchParams" />
    
</div>

@code {
    [Parameter]
    public string SearchParams { get; set; }

    List<MaintanceHistoryDTO> ListData;
    int FilterOption = 0;

    //설비유형 변수
    int selectFacType = 9;
    //작업구분 변수
    int selectWorkType = 9;

    private string startDt = "";
    private string endDt = "";

    DateTime curDate = DateTime.Now;
    string curMonth = "";

    // 사업장 권한
    bool placeMachine;
    bool placeElect;
    bool placeLift;
    bool placeFire;
    bool placeConstruct;
    bool placeNetwork;
    bool placeBeauty;
    bool placeSecurity;

    //사용자 설비 권한 리스트 \ 기계,전기,승강,소방,건축,통신,미화,보안 순서
    List<int> facPerm = new List<int>();
    List<FilterItem> filterFacType = new List<FilterItem>();
    List<FilterItem> facType = new List<FilterItem>
    {
        new FilterItem { Id = 1, Name = "기계", IsChecked=true },
        new FilterItem { Id = 2, Name = "전기", IsChecked=true },
        new FilterItem { Id = 3, Name = "승강", IsChecked=true },
        new FilterItem { Id = 4, Name = "소방", IsChecked=true },
        new FilterItem { Id = 5, Name = "건축", IsChecked=true },
        new FilterItem { Id = 6, Name = "통신", IsChecked=true },
        new FilterItem { Id = 7, Name = "미화", IsChecked=true },
        new FilterItem { Id = 8, Name = "보안", IsChecked=true },
    };

    //작업 구분 데이터
    List<FilterItem> workType = new List<FilterItem>
    {
        new FilterItem { Id = 0, Name = "자체", IsChecked=true },
        new FilterItem { Id = 1, Name = "외주", IsChecked=true },

    };

    List<string> facTypeParams = new List<string>();
    List<int> workParams = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        await OnCheckPlacePerm();
        facPerm = await (_authStateProvider as CustomAuthProvider).GetFacilityUserPemrList();
        await ConvertType(facPerm);
        selectFacType = 0;
        selectWorkType = 2;

        DateTime date = DateTime.Now;
        curMonth = date.ToString("yyyy-MM");
        await OnSearch();

    }

    protected override async Task OnParametersSetAsync()
    {
        await OnSearch();
    }

    private async Task ConvertType(List<int> facperm)
    {
        filterFacType.Clear(); 
        for (int i = 0; i < facPerm.Count; i++)
        {
            if (facPerm[i] >= 1) // 권한이 1 이상인 경우
            {
                bool hasPermission = i switch
                {
                    0 => placeMachine,
                    1 => placeElect,
                    2 => placeLift,
                    3 => placeFire,
                    4 => placeConstruct,
                    5 => placeNetwork,
                    6 => placeBeauty,
                    7 => placeSecurity,
                    _ => false
                };
                // i+1을 하지 않고 직접 i와 매칭되는 facType 항목을 추가
                if (hasPermission)
                {
                    filterFacType.Add(facType[i]);
                }
            }
        }
    }

    private async Task OnCheckPlacePerm()
    {
        placeMachine = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Machine");
        placeElect = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Elec");
        placeLift = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Lift");
        placeFire = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Fire");
        placeConstruct = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Construct");
        placeNetwork = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Network");
        placeBeauty = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Beauty");
        placeSecurity = await (_authStateProvider as CustomAuthProvider).GetPlacePermission("PlacePerm_Security");
    }

    private string convertFactype(int facType)
    {
        return facType switch
        {
            1 => "기계",
            2 => "전기",
            3 => "승강",
            4 => "소방",
            5 => "건축",
            6 => "통신",
            7 => "미화",
            8 => "보안",

        };
    }

    private async void HandleDateChanged(DateOnly newDate)
    {
        curDate = newDate.ToDateTime(TimeOnly.MinValue);
        curMonth = curDate.ToString("yyyy-MM");
        await OnSearch();
    }

    private async Task OnSearch()
    {
        try
        {
            if (!string.IsNullOrEmpty(SearchParams))
            {
                OnParseQueryString();
            }
            else
            {
                facTypeParams = FacTypeCheckData(filterFacType);
                workParams = WorkCheckData(workType);
            }
            List<string> FacType = new List<string>();
            List<int> WorkType = new List<int>();


            if (FilterOption == 0)
            {
                startDt = "";
                endDt = "";
                if (string.IsNullOrEmpty(curMonth))
                {
                    curMonth = curDate.ToString("yyyy-MM");
                }
            }
            else
            {
                curMonth = "";
            }
            
            var categoryQuery = string.Join("&category=", facTypeParams);
            var typeQuery = string.Join("&type=", workParams);


            // ResponseList<MaintanceHistoryDTO> resGet = await apiManager.GetListAsync<MaintanceHistoryDTO>($"Maintenance/sign/GetAllHistoryList?StartDate={startDt.ToString("yyyy-MM-dd")}&EndDate={endDt.ToString("yyyy-MM-dd")}&category={categoryQuery}&type={typeQuery}");
            ResponseList<MaintanceHistoryDTO> resGet = await apiManager.GetListAsync<MaintanceHistoryDTO>($"Maintenance/sign/GetHistorySearchList?searchType={FilterOption}&StartDate={startDt}&EndDate={endDt}&searchdate={curMonth}&category={categoryQuery}&type={typeQuery}");
            if (resGet.code != 200)
            {
                await JS.InvokeVoidAsync("alert", resGet.message);
                return;
            }
            if(resGet.data == null)
            {
                ListData = new List<MaintanceHistoryDTO>();
            }
            else
            {
                ListData = resGet.data;
            }
            StateHasChanged();

        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", "유지보수 조회 검색 에러");
        }
    }

    //체크된 요소 id 리스트 반환
    private List<int> WorkCheckData(List<FilterItem> items)
    {
        List<int> data = items.Where(i => i.IsChecked == true).Select(i => i.Id).ToList();

        return data;
    }
    private List<string> FacTypeCheckData(List<FilterItem> items)
    {
        List<string> data = items.Where(i => i.IsChecked == true).Select(i => i.Name).ToList();

        return data;
    }

    private void OnParseQueryString()
    {
        var parameters = HttpUtility.ParseQueryString(SearchParams);
        string categoryParams = parameters["category"];
        facTypeParams = categoryParams?.Split(',').ToList() ?? new List<string>();
        workParams= ParseIntList(parameters["type"]);
        

        startDt = parameters["StartDate"];
        endDt = parameters["EndDate"];
        FilterOption = int.Parse(parameters["searchType"]);
    }


    //쉼표 구분
    private List<int> ParseIntList(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<int>();

        return value.Split(',')
                    .Select(s => int.TryParse(s, out int result) ? result : (int?)null)
                    .Where(n => n.HasValue)
                    .Select(n => n.Value)
                    .ToList();
    }
}
